
HFM_Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009394  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  080095c4  080095c4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095c4  080095c4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  080095cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001328  20000184  08009750  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014ac  08009750  000214ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001608b  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038da  00000000  00000000  00036282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e09  00000000  00000000  0003ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f72  00000000  00000000  0003bc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198e2  00000000  00000000  00040b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf575  00000000  00000000  0005a465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c94  00000000  00000000  001299dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009554 	.word	0x08009554

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009554 	.word	0x08009554

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb41 	bl	80008a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f830 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f96c 	bl	8000500 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000228:	f000 f878 	bl	800031c <MX_ADC2_Init>
  MX_DAC1_Init();
 800022c:	f000 f8dc 	bl	80003e8 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000230:	f000 f91e 	bl	8000470 <MX_I2C2_Init>
  MX_USB_Device_Init();
 8000234:	f008 fc6e 	bl	8008b14 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  eeprom_chip.at24cxx_address = 0xA0;
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <main+0x64>)
 800023a:	22a0      	movs	r2, #160	; 0xa0
 800023c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  eeprom_chip.at24cxx_page_number = 512;
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <main+0x64>)
 8000242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  eeprom_chip.at24cxx_page_size = 64;
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <main+0x64>)
 800024c:	2240      	movs	r2, #64	; 0x40
 800024e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  eeprom_chip.at24cxx_size = eeprom_chip.at24cxx_page_number * eeprom_chip.at24cxx_page_size;
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <main+0x64>)
 8000254:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <main+0x64>)
 800025a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800025e:	fb12 f303 	smulbb	r3, r2, r3
 8000262:	b29a      	uxth	r2, r3
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0x64>)
 8000266:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  eeprom_chip.i2c_device = hi2c2;
 800026a:	4a04      	ldr	r2, [pc, #16]	; (800027c <main+0x64>)
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <main+0x68>)
 800026e:	4610      	mov	r0, r2
 8000270:	4619      	mov	r1, r3
 8000272:	234c      	movs	r3, #76	; 0x4c
 8000274:	461a      	mov	r2, r3
 8000276:	f009 f95f 	bl	8009538 <memcpy>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027a:	e7fe      	b.n	800027a <main+0x62>
 800027c:	2000026c 	.word	0x2000026c
 8000280:	20000220 	.word	0x20000220

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b094      	sub	sp, #80	; 0x50
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2238      	movs	r2, #56	; 0x38
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f009 f924 	bl	80094e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002aa:	f003 fdaf 	bl	8003e0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80002ae:	2321      	movs	r3, #33	; 0x21
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	2303      	movs	r3, #3
 80002c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002c4:	2302      	movs	r3, #2
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80002c8:	2318      	movs	r3, #24
 80002ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002cc:	2302      	movs	r3, #2
 80002ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4618      	mov	r0, r3
 80002de:	f003 fe39 	bl	8003f54 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002e8:	f000 f956 	bl	8000598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2303      	movs	r3, #3
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2104      	movs	r1, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f004 f93d 	bl	8004584 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000310:	f000 f942 	bl	8000598 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3750      	adds	r7, #80	; 0x50
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	463b      	mov	r3, r7
 8000324:	2220      	movs	r2, #32
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f009 f8d9 	bl	80094e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000330:	4a2b      	ldr	r2, [pc, #172]	; (80003e0 <MX_ADC2_Init+0xc4>)
 8000332:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000334:	4b29      	ldr	r3, [pc, #164]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000336:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800033a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_ADC2_Init+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_ADC2_Init+0xc0>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000356:	2204      	movs	r2, #4
 8000358:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_ADC2_Init+0xc0>)
 800035c:	2200      	movs	r2, #0
 800035e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000362:	2200      	movs	r2, #0
 8000364:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000368:	2201      	movs	r2, #1
 800036a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_ADC2_Init+0xc0>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000376:	2200      	movs	r2, #0
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_ADC2_Init+0xc0>)
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000382:	2200      	movs	r2, #0
 8000384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_ADC2_Init+0xc0>)
 800038a:	2200      	movs	r2, #0
 800038c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000396:	4811      	ldr	r0, [pc, #68]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000398:	f000 fcf0 	bl	8000d7c <HAL_ADC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80003a2:	f000 f8f9 	bl	8000598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_ADC2_Init+0xc8>)
 80003a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2306      	movs	r3, #6
 80003ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003b2:	237f      	movs	r3, #127	; 0x7f
 80003b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b6:	2304      	movs	r3, #4
 80003b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003be:	463b      	mov	r3, r7
 80003c0:	4619      	mov	r1, r3
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_ADC2_Init+0xc0>)
 80003c4:	f000 fe64 	bl	8001090 <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80003ce:	f000 f8e3 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	3720      	adds	r7, #32
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200001a0 	.word	0x200001a0
 80003e0:	50000100 	.word	0x50000100
 80003e4:	04300002 	.word	0x04300002

080003e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08c      	sub	sp, #48	; 0x30
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2230      	movs	r2, #48	; 0x30
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f009 f873 	bl	80094e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_DAC1_Init+0x80>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	; (800046c <MX_DAC1_Init+0x84>)
 80003fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <MX_DAC1_Init+0x80>)
 8000402:	f001 fb44 	bl	8001a8e <HAL_DAC_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800040c:	f000 f8c4 	bl	8000598 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000410:	2302      	movs	r3, #2
 8000412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800042c:	2301      	movs	r3, #1
 800042e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	480b      	ldr	r0, [pc, #44]	; (8000468 <MX_DAC1_Init+0x80>)
 800043c:	f001 fb4a 	bl	8001ad4 <HAL_DAC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000446:	f000 f8a7 	bl	8000598 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	2210      	movs	r2, #16
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_DAC1_Init+0x80>)
 8000452:	f001 fb3f 	bl	8001ad4 <HAL_DAC_ConfigChannel>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800045c:	f000 f89c 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3730      	adds	r7, #48	; 0x30
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2000020c 	.word	0x2000020c
 800046c:	50000800 	.word	0x50000800

08000470 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <MX_I2C2_Init+0x80>)
 8000476:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <MX_I2C2_Init+0x84>)
 8000478:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0070215B;
 800047a:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <MX_I2C2_Init+0x80>)
 800047c:	4a1e      	ldr	r2, [pc, #120]	; (80004f8 <MX_I2C2_Init+0x88>)
 800047e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <MX_I2C2_Init+0x80>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <MX_I2C2_Init+0x80>)
 8000488:	2201      	movs	r2, #1
 800048a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <MX_I2C2_Init+0x80>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <MX_I2C2_Init+0x80>)
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <MX_I2C2_Init+0x80>)
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_I2C2_Init+0x80>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <MX_I2C2_Init+0x80>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004aa:	4811      	ldr	r0, [pc, #68]	; (80004f0 <MX_I2C2_Init+0x80>)
 80004ac:	f001 fe54 	bl	8002158 <HAL_I2C_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004b6:	f000 f86f 	bl	8000598 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ba:	2100      	movs	r1, #0
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <MX_I2C2_Init+0x80>)
 80004be:	f001 feda 	bl	8002276 <HAL_I2CEx_ConfigAnalogFilter>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004c8:	f000 f866 	bl	8000598 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004cc:	2100      	movs	r1, #0
 80004ce:	4808      	ldr	r0, [pc, #32]	; (80004f0 <MX_I2C2_Init+0x80>)
 80004d0:	f001 ff1c 	bl	800230c <HAL_I2CEx_ConfigDigitalFilter>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004da:	f000 f85d 	bl	8000598 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C2);
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <MX_I2C2_Init+0x8c>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	4a06      	ldr	r2, [pc, #24]	; (80004fc <MX_I2C2_Init+0x8c>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000220 	.word	0x20000220
 80004f4:	40005800 	.word	0x40005800
 80004f8:	0070215b 	.word	0x0070215b
 80004fc:	40010000 	.word	0x40010000

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_GPIO_Init+0x90>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <MX_GPIO_Init+0x90>)
 800051c:	f043 0320 	orr.w	r3, r3, #32
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_GPIO_Init+0x90>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_GPIO_Init+0x90>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_GPIO_Init+0x90>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_GPIO_Init+0x90>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MX_GPIO_Init+0x90>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	4a11      	ldr	r2, [pc, #68]	; (8000590 <MX_GPIO_Init+0x90>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_GPIO_Init+0x90>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0x94>)
 8000566:	f001 fddf 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RUN_Pin */
  GPIO_InitStruct.Pin = RUN_Pin;
 800056a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_GPIO_Init+0x94>)
 8000584:	f001 fc4e 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	48000400 	.word	0x48000400

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6613      	str	r3, [r2, #96]	; 0x60
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005cc:	6593      	str	r3, [r2, #88]	; 0x58
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_MspInit+0x44>)
 80005d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09a      	sub	sp, #104	; 0x68
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2244      	movs	r2, #68	; 0x44
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f008 ff67 	bl	80094e0 <memset>
  if(hadc->Instance==ADC2)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_ADC_MspInit+0xa4>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d134      	bne.n	8000686 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800061c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000620:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000622:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4618      	mov	r0, r3
 800062e:	f004 f999 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000638:	f7ff ffae 	bl	8000598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_ADC_MspInit+0xa8>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_ADC_MspInit+0xa8>)
 8000642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_ADC_MspInit+0xa8>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_ADC_MspInit+0xa8>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_ADC_MspInit+0xa8>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_ADC_MspInit+0xa8>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800066c:	2303      	movs	r3, #3
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 fbcf 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000686:	bf00      	nop
 8000688:	3768      	adds	r7, #104	; 0x68
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	50000100 	.word	0x50000100
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <HAL_DAC_MspInit+0x74>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d124      	bne.n	8000704 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_DAC_MspInit+0x78>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_DAC_MspInit+0x78>)
 80006c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_DAC_MspInit+0x78>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_DAC_MspInit+0x78>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_DAC_MspInit+0x78>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_DAC_MspInit+0x78>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ea:	2330      	movs	r3, #48	; 0x30
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f001 fb90 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	50000800 	.word	0x50000800
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b09a      	sub	sp, #104	; 0x68
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2244      	movs	r2, #68	; 0x44
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f008 fed3 	bl	80094e0 <memset>
  if(hi2c->Instance==I2C2)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d137      	bne.n	80007b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f004 f907 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800075c:	f7ff ff1c 	bl	8000598 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000778:	f44f 7340 	mov.w	r3, #768	; 0x300
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077e:	2312      	movs	r3, #18
 8000780:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800078a:	2304      	movs	r3, #4
 800078c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f001 fb44 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 80007a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a6:	6593      	str	r3, [r2, #88]	; 0x58
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_I2C_MspInit+0xac>)
 80007aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3768      	adds	r7, #104	; 0x68
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40005800 	.word	0x40005800
 80007c0:	40021000 	.word	0x40021000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f89a 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <USB_LP_IRQHandler+0x10>)
 800081e:	f001 fec8 	bl	80025b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000f98 	.word	0x20000f98

0800082c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000852:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087a:	f7ff ffd7 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f008 fe37 	bl	80094f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000882:	f7ff fcc9 	bl	8000218 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   r0, =_estack
 8000888:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000894:	080095cc 	.word	0x080095cc
  ldr r2, =_sbss
 8000898:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800089c:	200014ac 	.word	0x200014ac

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>

080008a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f001 f8af 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f80e 	bl	80008d4 <HAL_InitTick>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	e001      	b.n	80008c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008c4:	f7ff fe6e 	bl	80005a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008c8:	79fb      	ldrb	r3, [r7, #7]

}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_InitTick+0x68>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d022      	beq.n	800092e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_InitTick+0x6c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_InitTick+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f8ba 	bl	8001a76 <HAL_SYSTICK_Config>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10f      	bne.n	8000928 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b0f      	cmp	r3, #15
 800090c:	d809      	bhi.n	8000922 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090e:	2200      	movs	r2, #0
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f04f 30ff 	mov.w	r0, #4294967295
 8000916:	f001 f886 	bl	8001a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_InitTick+0x70>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e007      	b.n	8000932 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	e004      	b.n	8000932 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e001      	b.n	8000932 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000008 	.word	0x20000008
 8000940:	20000000 	.word	0x20000000
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4413      	add	r3, r2
 8000956:	4a03      	ldr	r2, [pc, #12]	; (8000964 <HAL_IncTick+0x1c>)
 8000958:	6013      	str	r3, [r2, #0]
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	200002c0 	.word	0x200002c0
 8000968:	20000008 	.word	0x20000008

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200002c0 	.word	0x200002c0

08000984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800098c:	f7ff ffee 	bl	800096c <HAL_GetTick>
 8000990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099c:	d004      	beq.n	80009a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_Delay+0x40>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4413      	add	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a8:	bf00      	nop
 80009aa:	f7ff ffdf 	bl	800096c <HAL_GetTick>
 80009ae:	4602      	mov	r2, r0
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d8f7      	bhi.n	80009aa <HAL_Delay+0x26>
  {
  }
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000008 	.word	0x20000008

080009c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	609a      	str	r2, [r3, #8]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3360      	adds	r3, #96	; 0x60
 8000a42:	461a      	mov	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <LL_ADC_SetOffset+0x44>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	03fff000 	.word	0x03fff000

08000a78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3360      	adds	r3, #96	; 0x60
 8000a86:	461a      	mov	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3360      	adds	r3, #96	; 0x60
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ace:	bf00      	nop
 8000ad0:	371c      	adds	r7, #28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b087      	sub	sp, #28
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3360      	adds	r3, #96	; 0x60
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000b04:	bf00      	nop
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3360      	adds	r3, #96	; 0x60
 8000b20:	461a      	mov	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b3a:	bf00      	nop
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	615a      	str	r2, [r3, #20]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3330      	adds	r3, #48	; 0x30
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	4413      	add	r3, r2
 8000b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	211f      	movs	r1, #31
 8000b98:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	0e9b      	lsrs	r3, r3, #26
 8000ba4:	f003 011f 	and.w	r1, r3, #31
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb8:	bf00      	nop
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3314      	adds	r3, #20
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	0e5b      	lsrs	r3, r3, #25
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	4413      	add	r3, r2
 8000be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	0d1b      	lsrs	r3, r3, #20
 8000bec:	f003 031f 	and.w	r3, r3, #31
 8000bf0:	2107      	movs	r1, #7
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	0d1b      	lsrs	r3, r3, #20
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d10a      	bne.n	8000c46 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000c44:	e00a      	b.n	8000c5c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c52:	43db      	mvns	r3, r3
 8000c54:	401a      	ands	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	407f0000 	.word	0x407f0000

08000c6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6093      	str	r3, [r2, #8]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ca4:	d101      	bne.n	8000caa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ccc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cf4:	d101      	bne.n	8000cfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <LL_ADC_IsEnabled+0x18>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <LL_ADC_IsEnabled+0x1a>
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d101      	bne.n	8000d46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d101      	bne.n	8000d6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e000      	b.n	8000d6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e177      	b.n	8001086 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fc21 	bl	80005ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff67 	bl	8000c90 <LL_ADC_IsDeepPowerDownEnabled>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff4d 	bl	8000c6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff82 	bl	8000ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d115      	bne.n	8000e0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff66 	bl	8000cb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000dec:	4b9c      	ldr	r3, [pc, #624]	; (8001060 <HAL_ADC_Init+0x2e4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	099b      	lsrs	r3, r3, #6
 8000df2:	4a9c      	ldr	r2, [pc, #624]	; (8001064 <HAL_ADC_Init+0x2e8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	099b      	lsrs	r3, r3, #6
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e00:	e002      	b.n	8000e08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f9      	bne.n	8000e02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff64 	bl	8000ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10d      	bne.n	8000e3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e22:	f043 0210 	orr.w	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f043 0201 	orr.w	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff75 	bl	8000d2e <LL_ADC_REG_IsConversionOngoing>
 8000e44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4a:	f003 0310 	and.w	r3, r3, #16
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8110 	bne.w	8001074 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 810c 	bne.w	8001074 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e64:	f043 0202 	orr.w	r2, r3, #2
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff49 	bl	8000d08 <LL_ADC_IsEnabled>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e80:	f7ff ff42 	bl	8000d08 <LL_ADC_IsEnabled>
 8000e84:	4604      	mov	r4, r0
 8000e86:	4878      	ldr	r0, [pc, #480]	; (8001068 <HAL_ADC_Init+0x2ec>)
 8000e88:	f7ff ff3e 	bl	8000d08 <LL_ADC_IsEnabled>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d105      	bne.n	8000ea0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4874      	ldr	r0, [pc, #464]	; (800106c <HAL_ADC_Init+0x2f0>)
 8000e9c:	f7ff fd94 	bl	80009c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7f5b      	ldrb	r3, [r3, #29]
 8000ea4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000eaa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000eb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000eb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ebe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d106      	bne.n	8000edc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	045b      	lsls	r3, r3, #17
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d009      	beq.n	8000ef8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <HAL_ADC_Init+0x2f4>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	430b      	orrs	r3, r1
 8000f0a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff01 	bl	8000d2e <LL_ADC_REG_IsConversionOngoing>
 8000f2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff0e 	bl	8000d54 <LL_ADC_INJ_IsConversionOngoing>
 8000f38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d16d      	bne.n	800101c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d16a      	bne.n	800101c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f4a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f52:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f62:	f023 0302 	bic.w	r3, r3, #2
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d017      	beq.n	8000fa8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6911      	ldr	r1, [r2, #16]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000fa6:	e013      	b.n	8000fd0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fb6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fcc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d118      	bne.n	800100c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fe4:	f023 0304 	bic.w	r3, r3, #4
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ff0:	4311      	orrs	r1, r2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	e007      	b.n	800101c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691a      	ldr	r2, [r3, #16]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10c      	bne.n	800103e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f023 010f 	bic.w	r1, r3, #15
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
 800103c:	e007      	b.n	800104e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 020f 	bic.w	r2, r2, #15
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
 800105e:	e011      	b.n	8001084 <HAL_ADC_Init+0x308>
 8001060:	20000000 	.word	0x20000000
 8001064:	053e2d63 	.word	0x053e2d63
 8001068:	50000100 	.word	0x50000100
 800106c:	50000300 	.word	0x50000300
 8001070:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	f043 0210 	orr.w	r2, r3, #16
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001084:	7ffb      	ldrb	r3, [r7, #31]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop

08001090 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0b6      	sub	sp, #216	; 0xd8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_ConfigChannel+0x22>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e3c8      	b.n	8001844 <HAL_ADC_ConfigChannel+0x7b4>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe35 	bl	8000d2e <LL_ADC_REG_IsConversionOngoing>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 83ad 	bne.w	8001826 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	f7ff fd47 	bl	8000b6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe23 	bl	8000d2e <LL_ADC_REG_IsConversionOngoing>
 80010e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe2f 	bl	8000d54 <LL_ADC_INJ_IsConversionOngoing>
 80010f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 81d9 	bne.w	80014b6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 81d4 	bne.w	80014b6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001116:	d10f      	bne.n	8001138 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd4e 	bl	8000bc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fd08 	bl	8000b46 <LL_ADC_SetSamplingTimeCommonConfig>
 8001136:	e00e      	b.n	8001156 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	461a      	mov	r2, r3
 8001146:	f7ff fd3d 	bl	8000bc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fcf8 	bl	8000b46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d022      	beq.n	80011be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6919      	ldr	r1, [r3, #16]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001188:	f7ff fc52 	bl	8000a30 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6919      	ldr	r1, [r3, #16]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	461a      	mov	r2, r3
 800119a:	f7ff fc9e 	bl	8000ada <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6919      	ldr	r1, [r3, #16]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	7f1b      	ldrb	r3, [r3, #28]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x124>
 80011ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011b2:	e000      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x126>
 80011b4:	2300      	movs	r3, #0
 80011b6:	461a      	mov	r2, r3
 80011b8:	f7ff fcaa 	bl	8000b10 <LL_ADC_SetOffsetSaturation>
 80011bc:	e17b      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fc57 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10a      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x15a>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fc4c 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	0e9b      	lsrs	r3, r3, #26
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	e01e      	b.n	8001228 <HAL_ADC_ConfigChannel+0x198>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fc41 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800120c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001218:	2320      	movs	r3, #32
 800121a:	e004      	b.n	8001226 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800121c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1b0>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0e9b      	lsrs	r3, r3, #26
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	e018      	b.n	8001272 <HAL_ADC_ConfigChannel+0x1e2>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800125c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001264:	2320      	movs	r3, #32
 8001266:	e004      	b.n	8001272 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001272:	429a      	cmp	r2, r3
 8001274:	d106      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc10 	bl	8000aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fbf4 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x220>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fbe9 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	0e9b      	lsrs	r3, r3, #26
 80012aa:	f003 021f 	and.w	r2, r3, #31
 80012ae:	e01e      	b.n	80012ee <HAL_ADC_ConfigChannel+0x25e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fbde 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80012de:	2320      	movs	r3, #32
 80012e0:	e004      	b.n	80012ec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80012e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x276>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0e9b      	lsrs	r3, r3, #26
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	e018      	b.n	8001338 <HAL_ADC_ConfigChannel+0x2a8>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800131a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800131e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800132a:	2320      	movs	r3, #32
 800132c:	e004      	b.n	8001338 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800132e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fbad 	bl	8000aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2102      	movs	r1, #2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fb91 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x2e6>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2102      	movs	r1, #2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fb86 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	0e9b      	lsrs	r3, r3, #26
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	e01e      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x324>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb7b 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800139c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80013a4:	2320      	movs	r3, #32
 80013a6:	e004      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80013a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x33c>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0e9b      	lsrs	r3, r3, #26
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	e016      	b.n	80013fa <HAL_ADC_ConfigChannel+0x36a>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80013ec:	2320      	movs	r3, #32
 80013ee:	e004      	b.n	80013fa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80013f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d106      	bne.n	800140c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb4c 	bl	8000aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2103      	movs	r1, #3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb30 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10a      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x3a8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2103      	movs	r1, #3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fb25 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	f003 021f 	and.w	r2, r3, #31
 8001436:	e017      	b.n	8001468 <HAL_ADC_ConfigChannel+0x3d8>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2103      	movs	r1, #3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb1a 	bl	8000a78 <LL_ADC_GetOffsetChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001452:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800145a:	2320      	movs	r3, #32
 800145c:	e003      	b.n	8001466 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800145e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x3f0>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0e9b      	lsrs	r3, r3, #26
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	e011      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x414>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800148e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001490:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001498:	2320      	movs	r3, #32
 800149a:	e003      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800149c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	2103      	movs	r1, #3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff faf7 	bl	8000aa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc24 	bl	8000d08 <LL_ADC_IsEnabled>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8140 	bne.w	8001748 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff fba1 	bl	8000c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a8f      	ldr	r2, [pc, #572]	; (800171c <HAL_ADC_ConfigChannel+0x68c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f040 8131 	bne.w	8001748 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10b      	bne.n	800150e <HAL_ADC_ConfigChannel+0x47e>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0e9b      	lsrs	r3, r3, #26
 80014fc:	3301      	adds	r3, #1
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2b09      	cmp	r3, #9
 8001504:	bf94      	ite	ls
 8001506:	2301      	movls	r3, #1
 8001508:	2300      	movhi	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	e019      	b.n	8001542 <HAL_ADC_ConfigChannel+0x4b2>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800151c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800151e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001526:	2320      	movs	r3, #32
 8001528:	e003      	b.n	8001532 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800152a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2b09      	cmp	r3, #9
 800153a:	bf94      	ite	ls
 800153c:	2301      	movls	r3, #1
 800153e:	2300      	movhi	r3, #0
 8001540:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001542:	2b00      	cmp	r3, #0
 8001544:	d079      	beq.n	800163a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x4d2>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e9b      	lsrs	r3, r3, #26
 8001558:	3301      	adds	r3, #1
 800155a:	069b      	lsls	r3, r3, #26
 800155c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001560:	e015      	b.n	800158e <HAL_ADC_ConfigChannel+0x4fe>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001572:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800157a:	2320      	movs	r3, #32
 800157c:	e003      	b.n	8001586 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800157e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	069b      	lsls	r3, r3, #26
 800158a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x51e>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0e9b      	lsrs	r3, r3, #26
 80015a0:	3301      	adds	r3, #1
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	e017      	b.n	80015de <HAL_ADC_ConfigChannel+0x54e>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80015c6:	2320      	movs	r3, #32
 80015c8:	e003      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80015ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	ea42 0103 	orr.w	r1, r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10a      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x574>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0e9b      	lsrs	r3, r3, #26
 80015f4:	3301      	adds	r3, #1
 80015f6:	f003 021f 	and.w	r2, r3, #31
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	051b      	lsls	r3, r3, #20
 8001602:	e018      	b.n	8001636 <HAL_ADC_ConfigChannel+0x5a6>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800161c:	2320      	movs	r3, #32
 800161e:	e003      	b.n	8001628 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f003 021f 	and.w	r2, r3, #31
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001636:	430b      	orrs	r3, r1
 8001638:	e081      	b.n	800173e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x5c6>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	3301      	adds	r3, #1
 800164e:	069b      	lsls	r3, r3, #26
 8001650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001654:	e015      	b.n	8001682 <HAL_ADC_ConfigChannel+0x5f2>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e003      	b.n	800167a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3301      	adds	r3, #1
 800167c:	069b      	lsls	r3, r3, #26
 800167e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x612>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0e9b      	lsrs	r3, r3, #26
 8001694:	3301      	adds	r3, #1
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	e017      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x642>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	61fb      	str	r3, [r7, #28]
  return result;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80016ba:	2320      	movs	r3, #32
 80016bc:	e003      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	ea42 0103 	orr.w	r1, r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x66e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	3301      	adds	r3, #1
 80016ea:	f003 021f 	and.w	r2, r3, #31
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	3b1e      	subs	r3, #30
 80016f6:	051b      	lsls	r3, r3, #20
 80016f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fc:	e01e      	b.n	800173c <HAL_ADC_ConfigChannel+0x6ac>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	613b      	str	r3, [r7, #16]
  return result;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d104      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001716:	2320      	movs	r3, #32
 8001718:	e006      	b.n	8001728 <HAL_ADC_ConfigChannel+0x698>
 800171a:	bf00      	nop
 800171c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f003 021f 	and.w	r2, r3, #31
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	051b      	lsls	r3, r3, #20
 8001738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800173c:	430b      	orrs	r3, r1
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	6892      	ldr	r2, [r2, #8]
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa3e 	bl	8000bc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_ADC_ConfigChannel+0x7bc>)
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d071      	beq.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001754:	483e      	ldr	r0, [pc, #248]	; (8001850 <HAL_ADC_ConfigChannel+0x7c0>)
 8001756:	f7ff f95d 	bl	8000a14 <LL_ADC_GetCommonPathInternalCh>
 800175a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a3c      	ldr	r2, [pc, #240]	; (8001854 <HAL_ADC_ConfigChannel+0x7c4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d004      	beq.n	8001772 <HAL_ADC_ConfigChannel+0x6e2>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <HAL_ADC_ConfigChannel+0x7c8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d127      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d121      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001786:	d157      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800178c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001790:	4619      	mov	r1, r3
 8001792:	482f      	ldr	r0, [pc, #188]	; (8001850 <HAL_ADC_ConfigChannel+0x7c0>)
 8001794:	f7ff f92b 	bl	80009ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_ADC_ConfigChannel+0x7cc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	4a30      	ldr	r2, [pc, #192]	; (8001860 <HAL_ADC_ConfigChannel+0x7d0>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017b2:	e002      	b.n	80017ba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f9      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017c0:	e03a      	b.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_ADC_ConfigChannel+0x7d4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d113      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x764>
 80017cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_ADC_ConfigChannel+0x7d8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d02a      	beq.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ea:	4619      	mov	r1, r3
 80017ec:	4818      	ldr	r0, [pc, #96]	; (8001850 <HAL_ADC_ConfigChannel+0x7c0>)
 80017ee:	f7ff f8fe 	bl	80009ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017f2:	e021      	b.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_ADC_ConfigChannel+0x7dc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11c      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_ADC_ConfigChannel+0x7d8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d011      	beq.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181c:	4619      	mov	r1, r3
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <HAL_ADC_ConfigChannel+0x7c0>)
 8001820:	f7ff f8e5 	bl	80009ee <LL_ADC_SetCommonPathInternalCh>
 8001824:	e008      	b.n	8001838 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	f043 0220 	orr.w	r2, r3, #32
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001840:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001844:	4618      	mov	r0, r3
 8001846:	37d8      	adds	r7, #216	; 0xd8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	80080000 	.word	0x80080000
 8001850:	50000300 	.word	0x50000300
 8001854:	c3210000 	.word	0xc3210000
 8001858:	90c00010 	.word	0x90c00010
 800185c:	20000000 	.word	0x20000000
 8001860:	053e2d63 	.word	0x053e2d63
 8001864:	c7520000 	.word	0xc7520000
 8001868:	50000100 	.word	0x50000100
 800186c:	cb840000 	.word	0xcb840000

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff40 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff90 	bl	8001964 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5f 	bl	8001910 <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff33 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffa4 	bl	80019cc <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e014      	b.n	8001aca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7fe fdf1 	bl	8000698 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	795b      	ldrb	r3, [r3, #5]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_DAC_ConfigChannel+0x18>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e192      	b.n	8001e12 <HAL_DAC_ConfigChannel+0x33e>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2202      	movs	r2, #2
 8001af6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d174      	bne.n	8001bea <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b00:	f7fe ff34 	bl	800096c <HAL_GetTick>
 8001b04:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d134      	bne.n	8001b76 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b0c:	e011      	b.n	8001b32 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b0e:	f7fe ff2d 	bl	800096c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d90a      	bls.n	8001b32 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f043 0208 	orr.w	r2, r3, #8
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e16f      	b.n	8001e12 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e6      	bne.n	8001b0e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7fe ff1f 	bl	8000984 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8001b50:	e01e      	b.n	8001b90 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b52:	f7fe ff0b 	bl	800096c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d90a      	bls.n	8001b76 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f043 0208 	orr.w	r2, r3, #8
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e14d      	b.n	8001e12 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	dbe8      	blt.n	8001b52 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7fe feff 	bl	8000984 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	ea02 0103 	and.w	r1, r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	21ff      	movs	r1, #255	; 0xff
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	ea02 0103 	and.w	r1, r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d11d      	bne.n	8001c2e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	4313      	orrs	r3, r2
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	4013      	ands	r3, r2
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	e00f      	b.n	8001c78 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d102      	bne.n	8001c66 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001c60:	2301      	movs	r3, #1
 8001c62:	623b      	str	r3, [r7, #32]
 8001c64:	e008      	b.n	8001c78 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	623b      	str	r3, [r7, #32]
 8001c72:	e001      	b.n	8001c78 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	6a3a      	ldr	r2, [r7, #32]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_DAC_ConfigChannel+0x1d8>
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	e000      	b.n	8001cae <HAL_DAC_ConfigChannel+0x1da>
 8001cac:	2300      	movs	r3, #0
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_DAC_ConfigChannel+0x204>
 8001cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd6:	e000      	b.n	8001cda <HAL_DAC_ConfigChannel+0x206>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d114      	bne.n	8001d1a <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001cf0:	f002 fde6 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8001cf4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_DAC_ConfigChannel+0x348>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d904      	bls.n	8001d08 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	e00f      	b.n	8001d28 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <HAL_DAC_ConfigChannel+0x34c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d90a      	bls.n	8001d26 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
 8001d18:	e006      	b.n	8001d28 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4313      	orrs	r3, r2
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
 8001d24:	e000      	b.n	8001d28 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001d26:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	4313      	orrs	r3, r2
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d92:	4313      	orrs	r3, r2
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	22c0      	movs	r2, #192	; 0xc0
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43da      	mvns	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	400a      	ands	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	ea02 0103 	and.w	r1, r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	09896800 	.word	0x09896800
 8001e20:	04c4b400 	.word	0x04c4b400

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e32:	e15a      	b.n	80020ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 814c 	beq.w	80020e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d017      	beq.n	8001f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	6939      	ldr	r1, [r7, #16]
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0203 	and.w	r2, r3, #3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a6 	beq.w	80020e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	4b5b      	ldr	r3, [pc, #364]	; (8002108 <HAL_GPIO_Init+0x2e4>)
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_GPIO_Init+0x2e4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa4:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_GPIO_Init+0x2e4>)
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb0:	4a56      	ldr	r2, [pc, #344]	; (800210c <HAL_GPIO_Init+0x2e8>)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fda:	d01f      	beq.n	800201c <HAL_GPIO_Init+0x1f8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a4c      	ldr	r2, [pc, #304]	; (8002110 <HAL_GPIO_Init+0x2ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d019      	beq.n	8002018 <HAL_GPIO_Init+0x1f4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4b      	ldr	r2, [pc, #300]	; (8002114 <HAL_GPIO_Init+0x2f0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <HAL_GPIO_Init+0x1f0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4a      	ldr	r2, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x2f4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_GPIO_Init+0x1ec>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x2f8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x1e8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2fc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_GPIO_Init+0x1e4>
 8002004:	2305      	movs	r3, #5
 8002006:	e00a      	b.n	800201e <HAL_GPIO_Init+0x1fa>
 8002008:	2306      	movs	r3, #6
 800200a:	e008      	b.n	800201e <HAL_GPIO_Init+0x1fa>
 800200c:	2304      	movs	r3, #4
 800200e:	e006      	b.n	800201e <HAL_GPIO_Init+0x1fa>
 8002010:	2303      	movs	r3, #3
 8002012:	e004      	b.n	800201e <HAL_GPIO_Init+0x1fa>
 8002014:	2302      	movs	r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x1fa>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_GPIO_Init+0x1fa>
 800201c:	2300      	movs	r3, #0
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202e:	4937      	ldr	r1, [pc, #220]	; (800210c <HAL_GPIO_Init+0x2e8>)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_GPIO_Init+0x300>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002060:	4a30      	ldr	r2, [pc, #192]	; (8002124 <HAL_GPIO_Init+0x300>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002066:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_GPIO_Init+0x300>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800208a:	4a26      	ldr	r2, [pc, #152]	; (8002124 <HAL_GPIO_Init+0x300>)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_GPIO_Init+0x300>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_GPIO_Init+0x300>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_GPIO_Init+0x300>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_GPIO_Init+0x300>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f47f ae9d 	bne.w	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000
 800210c:	40010000 	.word	0x40010000
 8002110:	48000400 	.word	0x48000400
 8002114:	48000800 	.word	0x48000800
 8002118:	48000c00 	.word	0x48000c00
 800211c:	48001000 	.word	0x48001000
 8002120:	48001400 	.word	0x48001400
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002144:	e002      	b.n	800214c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e081      	b.n	800226e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fac8 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e006      	b.n	80021e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d104      	bne.n	80021f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69d9      	ldr	r1, [r3, #28]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b20      	cmp	r3, #32
 800228a:	d138      	bne.n	80022fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002296:	2302      	movs	r3, #2
 8002298:	e032      	b.n	8002300 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2224      	movs	r2, #36	; 0x24
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b20      	cmp	r3, #32
 8002320:	d139      	bne.n	8002396 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800232c:	2302      	movs	r3, #2
 800232e:	e033      	b.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800235e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002396:	2302      	movs	r3, #2
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af06      	add	r7, sp, #24
 80023aa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0d7      	b.n	8002566 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f006 fd82 	bl	8008ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 fcc8 	bl	8004d72 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	e04c      	b.n	8002482 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	3301      	adds	r3, #1
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	7bfa      	ldrb	r2, [r7, #15]
 8002410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	b298      	uxth	r0, r3
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3336      	adds	r3, #54	; 0x36
 8002426:	4602      	mov	r2, r0
 8002428:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3303      	adds	r3, #3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	3338      	adds	r3, #56	; 0x38
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	440b      	add	r3, r1
 8002462:	333c      	adds	r3, #60	; 0x3c
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	3340      	adds	r3, #64	; 0x40
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	3301      	adds	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3ad      	bcc.n	80023e8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e044      	b.n	800251c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	3301      	adds	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d3b5      	bcc.n	8002492 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	687e      	ldr	r6, [r7, #4]
 800252e:	466d      	mov	r5, sp
 8002530:	f106 0410 	add.w	r4, r6, #16
 8002534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	602b      	str	r3, [r5, #0]
 800253c:	1d33      	adds	r3, r6, #4
 800253e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f002 fc31 	bl	8004da8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f001 fc29 	bl	8003db6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800256e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_PCD_Start+0x16>
 8002580:	2302      	movs	r3, #2
 8002582:	e012      	b.n	80025aa <HAL_PCD_Start+0x3c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fbd7 	bl	8004d44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f004 fdf0 	bl	8007180 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fdf5 	bl	80071ae <USB_ReadInterrupts>
 80025c4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fb26 	bl	8002c22 <PCD_EP_ISR_Handler>

    return;
 80025d6:	e110      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d013      	beq.n	800260a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f4:	b292      	uxth	r2, r2
 80025f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f006 fcfb 	bl	8008ff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8fc 	bl	8002800 <HAL_PCD_SetAddress>

    return;
 8002608:	e0f7      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00c      	beq.n	800262e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800262c:	e0e5      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264a:	b292      	uxth	r2, r2
 800264c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002650:	e0d3      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d034      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	b292      	uxth	r2, r2
 8002670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800267c:	b29a      	uxth	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0208 	bic.w	r2, r2, #8
 8002686:	b292      	uxth	r2, r2
 8002688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800269e:	2100      	movs	r1, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f006 fe9d 	bl	80093e0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f006 fcde 	bl	8009068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026be:	b292      	uxth	r2, r2
 80026c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026c4:	e099      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d027      	beq.n	8002720 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0208 	orr.w	r2, r2, #8
 80026e2:	b292      	uxth	r2, r2
 80026e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fa:	b292      	uxth	r2, r2
 80026fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0204 	orr.w	r2, r2, #4
 8002712:	b292      	uxth	r2, r2
 8002714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f006 fc8b 	bl	8009034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800271e:	e06c      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	2b00      	cmp	r3, #0
 8002728:	d040      	beq.n	80027ac <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273c:	b292      	uxth	r2, r2
 800273e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d12b      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0204 	orr.w	r2, r2, #4
 800275e:	b292      	uxth	r2, r2
 8002760:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0208 	orr.w	r2, r2, #8
 8002776:	b292      	uxth	r2, r2
 8002778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800278c:	b29b      	uxth	r3, r3
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800279a:	2101      	movs	r1, #1
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f006 fe1f 	bl	80093e0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80027a2:	e02a      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f006 fc45 	bl	8009034 <HAL_PCD_SuspendCallback>
    return;
 80027aa:	e026      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027be:	b29a      	uxth	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027c8:	b292      	uxth	r2, r2
 80027ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f006 fc03 	bl	8008fda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027d4:	e011      	b.n	80027fa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00c      	beq.n	80027fa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f2:	b292      	uxth	r2, r2
 80027f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80027f8:	bf00      	nop
  }
}
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_PCD_SetAddress+0x1a>
 8002816:	2302      	movs	r3, #2
 8002818:	e013      	b.n	8002842 <HAL_PCD_SetAddress+0x42>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fc90 	bl	8007158 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	4608      	mov	r0, r1
 8002854:	4611      	mov	r1, r2
 8002856:	461a      	mov	r2, r3
 8002858:	4603      	mov	r3, r0
 800285a:	70fb      	strb	r3, [r7, #3]
 800285c:	460b      	mov	r3, r1
 800285e:	803b      	strh	r3, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002868:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	da0e      	bge.n	800288e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	705a      	strb	r2, [r3, #1]
 800288c:	e00e      	b.n	80028ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 0207 	and.w	r2, r3, #7
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028b8:	883a      	ldrh	r2, [r7, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	78ba      	ldrb	r2, [r7, #2]
 80028c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028d6:	78bb      	ldrb	r3, [r7, #2]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d102      	bne.n	80028e2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_EP_Open+0xa6>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e00e      	b.n	800290e <HAL_PCD_EP_Open+0xc4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fa74 	bl	8004dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800290c:	7afb      	ldrb	r3, [r7, #11]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002926:	2b00      	cmp	r3, #0
 8002928:	da0e      	bge.n	8002948 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	705a      	strb	r2, [r3, #1]
 8002946:	e00e      	b.n	8002966 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 0207 	and.w	r2, r3, #7
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_PCD_EP_Close+0x6a>
 800297c:	2302      	movs	r3, #2
 800297e:	e00e      	b.n	800299e <HAL_PCD_EP_Close+0x88>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f002 fdc0 	bl	8005514 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	460b      	mov	r3, r1
 80029b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	7afb      	ldrb	r3, [r7, #11]
 80029b8:	f003 0207 	and.w	r2, r3, #7
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 ff73 	bl	80058ee <USB_EPStartXfer>
 8002a08:	e005      	b.n	8002a16 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6979      	ldr	r1, [r7, #20]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 ff6c 	bl	80058ee <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 0207 	and.w	r2, r3, #7
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 ff18 	bl	80058ee <USB_EPStartXfer>
 8002abe:	e005      	b.n	8002acc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6979      	ldr	r1, [r7, #20]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 ff11 	bl	80058ee <USB_EPStartXfer>
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 0207 	and.w	r2, r3, #7
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d901      	bls.n	8002af4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e03e      	b.n	8002b72 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da0e      	bge.n	8002b1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	705a      	strb	r2, [r3, #1]
 8002b18:	e00c      	b.n	8002b34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_PCD_EP_SetStall+0x7e>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e00e      	b.n	8002b72 <HAL_PCD_EP_SetStall+0x9c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68f9      	ldr	r1, [r7, #12]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 f9f9 	bl	8006f5a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 020f 	and.w	r2, r3, #15
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d901      	bls.n	8002b98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e040      	b.n	8002c1a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da0e      	bge.n	8002bbe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	705a      	strb	r2, [r3, #1]
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 0207 	and.w	r2, r3, #7
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_EP_ClrStall+0x82>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e00e      	b.n	8002c1a <HAL_PCD_EP_ClrStall+0xa0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 f9f6 	bl	8006ffc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b096      	sub	sp, #88	; 0x58
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c2a:	e39c      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002c46:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 815e 	bne.w	8002f0c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c50:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d150      	bne.n	8002cfe <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	81fb      	strh	r3, [r7, #14]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3328      	adds	r3, #40	; 0x28
 8002c84:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f006 f971 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 834a 	beq.w	8003366 <PCD_EP_ISR_Handler+0x744>
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8345 	bne.w	8003366 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b292      	uxth	r2, r2
 8002cf0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cfc:	e333      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d032      	beq.n	8002d82 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f004 fa7b 	bl	8007252 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d68:	4013      	ands	r3, r2
 8002d6a:	823b      	strh	r3, [r7, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	8a3a      	ldrh	r2, [r7, #16]
 8002d72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d76:	b292      	uxth	r2, r2
 8002d78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f006 f8e6 	bl	8008f4c <HAL_PCD_SetupStageCallback>
 8002d80:	e2f1      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d82:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f280 82ed 	bge.w	8003366 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d98:	4013      	ands	r3, r2
 8002d9a:	83fb      	strh	r3, [r7, #30]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	8bfa      	ldrh	r2, [r7, #30]
 8002da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002da6:	b292      	uxth	r2, r2
 8002da8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <PCD_EP_ISR_Handler+0x1ec>
 8002dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de8:	6959      	ldr	r1, [r3, #20]
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f004 fa2d 	bl	8007252 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	441a      	add	r2, r3
 8002e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e06:	2100      	movs	r1, #0
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f006 f8b1 	bl	8008f70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 82a3 	bne.w	8003366 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b3e      	cmp	r3, #62	; 0x3e
 8002e46:	d918      	bls.n	8002e7a <PCD_EP_ISR_Handler+0x258>
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <PCD_EP_ISR_Handler+0x240>
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	029b      	lsls	r3, r3, #10
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	801a      	strh	r2, [r3, #0]
 8002e78:	e029      	b.n	8002ece <PCD_EP_ISR_Handler+0x2ac>
 8002e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d112      	bne.n	8002ea8 <PCD_EP_ISR_Handler+0x286>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	e012      	b.n	8002ece <PCD_EP_ISR_Handler+0x2ac>
 8002ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <PCD_EP_ISR_Handler+0x2a0>
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	029b      	lsls	r3, r3, #10
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	827b      	strh	r3, [r7, #18]
 8002ee0:	8a7b      	ldrh	r3, [r7, #18]
 8002ee2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ee6:	827b      	strh	r3, [r7, #18]
 8002ee8:	8a7b      	ldrh	r3, [r7, #18]
 8002eea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eee:	827b      	strh	r3, [r7, #18]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	8a7b      	ldrh	r3, [r7, #18]
 8002ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8013      	strh	r3, [r2, #0]
 8002f0a:	e22c      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f20:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f280 80f6 	bge.w	8003116 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f40:	4013      	ands	r3, r2
 8002f42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f5c:	b292      	uxth	r2, r2
 8002f5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f60:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	7b1b      	ldrb	r3, [r3, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d123      	bne.n	8002fc6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002fa6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 808e 	beq.w	80030cc <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb6:	6959      	ldr	r1, [r3, #20]
 8002fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fba:	88da      	ldrh	r2, [r3, #6]
 8002fbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fc0:	f004 f947 	bl	8007252 <USB_ReadPMA>
 8002fc4:	e082      	b.n	80030cc <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc8:	78db      	ldrb	r3, [r3, #3]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d10a      	bne.n	8002fe4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002fce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9d3 	bl	8003382 <HAL_PCD_EP_DB_Receive>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002fe2:	e073      	b.n	80030cc <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	441a      	add	r2, r3
 8003010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003024:	b29b      	uxth	r3, r3
 8003026:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d022      	beq.n	8003088 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	4413      	add	r3, r2
 800305c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003066:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800306a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800306e:	2b00      	cmp	r3, #0
 8003070:	d02c      	beq.n	80030cc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	6959      	ldr	r1, [r3, #20]
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	891a      	ldrh	r2, [r3, #8]
 800307e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003082:	f004 f8e6 	bl	8007252 <USB_ReadPMA>
 8003086:	e021      	b.n	80030cc <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80030b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	6959      	ldr	r1, [r3, #20]
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	895a      	ldrh	r2, [r3, #10]
 80030c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030c8:	f004 f8c3 	bl	8007252 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80030cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030d4:	441a      	add	r2, r3
 80030d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80030da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030e2:	441a      	add	r2, r3
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <PCD_EP_ISR_Handler+0x4da>
 80030f0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d206      	bcs.n	800310a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f005 ff34 	bl	8008f70 <HAL_PCD_DataOutStageCallback>
 8003108:	e005      	b.n	8003116 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003110:	4618      	mov	r0, r3
 8003112:	f002 fbec 	bl	80058ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003116:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8121 	beq.w	8003366 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003124:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	b29b      	uxth	r3, r3
 800314a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800316c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003170:	b29b      	uxth	r3, r3
 8003172:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003176:	78db      	ldrb	r3, [r3, #3]
 8003178:	2b02      	cmp	r3, #2
 800317a:	f000 80a2 	beq.w	80032c2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003186:	7b1b      	ldrb	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8093 	beq.w	80032b4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800318e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d046      	beq.n	8003228 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	785b      	ldrb	r3, [r3, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d126      	bne.n	80031f0 <PCD_EP_ISR_Handler+0x5ce>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	4413      	add	r3, r2
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	00da      	lsls	r2, r3, #3
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031c8:	623b      	str	r3, [r7, #32]
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	e061      	b.n	80032b4 <PCD_EP_ISR_Handler+0x692>
 80031f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d15d      	bne.n	80032b4 <PCD_EP_ISR_Handler+0x692>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003206:	b29b      	uxth	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	4413      	add	r3, r2
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	00da      	lsls	r2, r3, #3
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	4413      	add	r3, r2
 800321a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e045      	b.n	80032b4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	785b      	ldrb	r3, [r3, #1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d126      	bne.n	8003284 <PCD_EP_ISR_Handler+0x662>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324a:	4413      	add	r3, r2
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
 800324e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	00da      	lsls	r2, r3, #3
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	4413      	add	r3, r2
 8003258:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003268:	b29a      	uxth	r2, r3
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800327c:	b29a      	uxth	r2, r3
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	801a      	strh	r2, [r3, #0]
 8003282:	e017      	b.n	80032b4 <PCD_EP_ISR_Handler+0x692>
 8003284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d113      	bne.n	80032b4 <PCD_EP_ISR_Handler+0x692>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003294:	b29b      	uxth	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329a:	4413      	add	r3, r2
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800329e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	00da      	lsls	r2, r3, #3
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	4413      	add	r3, r2
 80032a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	2200      	movs	r2, #0
 80032b2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f005 fe73 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
 80032c0:	e051      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80032c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d144      	bne.n	8003358 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80032f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032fe:	429a      	cmp	r2, r3
 8003300:	d907      	bls.n	8003312 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8003302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330e:	619a      	str	r2, [r3, #24]
 8003310:	e002      	b.n	8003318 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8003312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f005 fe3d 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
 800332c:	e01b      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800332e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003336:	441a      	add	r2, r3
 8003338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003344:	441a      	add	r2, r3
 8003346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003348:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003350:	4618      	mov	r0, r3
 8003352:	f002 facc 	bl	80058ee <USB_EPStartXfer>
 8003356:	e006      	b.n	8003366 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003358:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800335c:	461a      	mov	r2, r3
 800335e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f917 	bl	8003594 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800336e:	b29b      	uxth	r3, r3
 8003370:	b21b      	sxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	f6ff ac5a 	blt.w	8002c2c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3758      	adds	r7, #88	; 0x58
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	4613      	mov	r3, r2
 800338e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d07c      	beq.n	8003494 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	8b7b      	ldrh	r3, [r7, #26]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d306      	bcc.n	80033d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	8b7b      	ldrh	r3, [r7, #26]
 80033d0:	1ad2      	subs	r2, r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	619a      	str	r2, [r3, #24]
 80033d6:	e002      	b.n	80033de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d123      	bne.n	800342e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	833b      	strh	r3, [r7, #24]
 8003402:	8b3b      	ldrh	r3, [r7, #24]
 8003404:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003408:	833b      	strh	r3, [r7, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	441a      	add	r2, r3
 8003418:	8b3b      	ldrh	r3, [r7, #24]
 800341a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800341e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342a:	b29b      	uxth	r3, r3
 800342c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01f      	beq.n	8003478 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	82fb      	strh	r3, [r7, #22]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	8afb      	ldrh	r3, [r7, #22]
 8003464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003474:	b29b      	uxth	r3, r3
 8003476:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003478:	8b7b      	ldrh	r3, [r7, #26]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8085 	beq.w	800358a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6959      	ldr	r1, [r3, #20]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	891a      	ldrh	r2, [r3, #8]
 800348c:	8b7b      	ldrh	r3, [r7, #26]
 800348e:	f003 fee0 	bl	8007252 <USB_ReadPMA>
 8003492:	e07a      	b.n	800358a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	8b7b      	ldrh	r3, [r7, #26]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d306      	bcc.n	80034d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	8b7b      	ldrh	r3, [r7, #26]
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	619a      	str	r2, [r3, #24]
 80034d0:	e002      	b.n	80034d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d123      	bne.n	8003528 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	83fb      	strh	r3, [r7, #30]
 80034fc:	8bfb      	ldrh	r3, [r7, #30]
 80034fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003502:	83fb      	strh	r3, [r7, #30]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	8bfb      	ldrh	r3, [r7, #30]
 8003514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	b29b      	uxth	r3, r3
 8003526:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11f      	bne.n	8003572 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354c:	83bb      	strh	r3, [r7, #28]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	441a      	add	r2, r3
 800355c:	8bbb      	ldrh	r3, [r7, #28]
 800355e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003572:	8b7b      	ldrh	r3, [r7, #26]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6959      	ldr	r1, [r3, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	895a      	ldrh	r2, [r3, #10]
 8003584:	8b7b      	ldrh	r3, [r7, #26]
 8003586:	f003 fe64 	bl	8007252 <USB_ReadPMA>
    }
  }

  return count;
 800358a:	8b7b      	ldrh	r3, [r7, #26]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b0a2      	sub	sp, #136	; 0x88
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 81c5 	beq.w	8003938 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035de:	429a      	cmp	r2, r3
 80035e0:	d907      	bls.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ea:	1ad2      	subs	r2, r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	619a      	str	r2, [r3, #24]
 80035f0:	e002      	b.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 80b9 	bne.w	8003774 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d126      	bne.n	8003658 <HAL_PCD_EP_DB_Transmit+0xc4>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003618:	b29b      	uxth	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	4413      	add	r3, r2
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	00da      	lsls	r2, r3, #3
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	4413      	add	r3, r2
 800362c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800363c:	b29a      	uxth	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003650:	b29a      	uxth	r2, r3
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	e01a      	b.n	800368e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d116      	bne.n	800368e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	4413      	add	r3, r2
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	00da      	lsls	r2, r3, #3
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	4413      	add	r3, r2
 8003682:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2200      	movs	r2, #0
 800368c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d126      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x156>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4413      	add	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	00da      	lsls	r2, r3, #3
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4413      	add	r3, r2
 80036be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e017      	b.n	800371a <HAL_PCD_EP_DB_Transmit+0x186>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d113      	bne.n	800371a <HAL_PCD_EP_DB_Transmit+0x186>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	4413      	add	r3, r2
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	00da      	lsls	r2, r3, #3
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	4413      	add	r3, r2
 800370e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2200      	movs	r2, #0
 8003718:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	4619      	mov	r1, r3
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f005 fc40 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 82d2 	beq.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374c:	827b      	strh	r3, [r7, #18]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	441a      	add	r2, r3
 800375c:	8a7b      	ldrh	r3, [r7, #18]
 800375e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	b29b      	uxth	r3, r3
 8003770:	8013      	strh	r3, [r2, #0]
 8003772:	e2b0      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d021      	beq.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003798:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037be:	b29b      	uxth	r3, r3
 80037c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 8284 	bne.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d6:	441a      	add	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037e4:	441a      	add	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d309      	bcc.n	800380a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003802:	1ad2      	subs	r2, r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	621a      	str	r2, [r3, #32]
 8003808:	e015      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003812:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003816:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003820:	e009      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2200      	movs	r2, #0
 8003834:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d155      	bne.n	80038ea <HAL_PCD_EP_DB_Transmit+0x356>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384c:	b29b      	uxth	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003852:	4413      	add	r3, r2
 8003854:	63bb      	str	r3, [r7, #56]	; 0x38
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	00da      	lsls	r2, r3, #3
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	4413      	add	r3, r2
 8003860:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
 8003866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003868:	2b3e      	cmp	r3, #62	; 0x3e
 800386a:	d916      	bls.n	800389a <HAL_PCD_EP_DB_Transmit+0x306>
 800386c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
 8003872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	3b01      	subs	r3, #1
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
 8003882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003884:	b29b      	uxth	r3, r3
 8003886:	029b      	lsls	r3, r3, #10
 8003888:	b29b      	uxth	r3, r3
 800388a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003892:	b29a      	uxth	r2, r3
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	801a      	strh	r2, [r3, #0]
 8003898:	e043      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x38e>
 800389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389c:	2b00      	cmp	r3, #0
 800389e:	d112      	bne.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x332>
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	e02d      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80038cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_PCD_EP_DB_Transmit+0x348>
 80038d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d8:	3301      	adds	r3, #1
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
 80038dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038de:	b29b      	uxth	r3, r3
 80038e0:	029b      	lsls	r3, r3, #10
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	801a      	strh	r2, [r3, #0]
 80038e8:	e01b      	b.n	8003922 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d117      	bne.n	8003922 <HAL_PCD_EP_DB_Transmit+0x38e>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003900:	b29b      	uxth	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003906:	4413      	add	r3, r2
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	00da      	lsls	r2, r3, #3
 8003910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003912:	4413      	add	r3, r2
 8003914:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800391c:	b29a      	uxth	r2, r3
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6959      	ldr	r1, [r3, #20]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	891a      	ldrh	r2, [r3, #8]
 800392e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003930:	b29b      	uxth	r3, r3
 8003932:	f003 fc4c 	bl	80071ce <USB_WritePMA>
 8003936:	e1ce      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003940:	b29b      	uxth	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	4413      	add	r3, r2
 8003952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003968:	429a      	cmp	r2, r3
 800396a:	d307      	bcc.n	800397c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003974:	1ad2      	subs	r2, r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	619a      	str	r2, [r3, #24]
 800397a:	e002      	b.n	8003982 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 80c4 	bne.w	8003b14 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d126      	bne.n	80039e2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	66bb      	str	r3, [r7, #104]	; 0x68
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a8:	4413      	add	r3, r2
 80039aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	00da      	lsls	r2, r3, #3
 80039b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b4:	4413      	add	r3, r2
 80039b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
 80039bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ca:	801a      	strh	r2, [r3, #0]
 80039cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e01a      	b.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x484>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d116      	bne.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x484>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	673b      	str	r3, [r7, #112]	; 0x70
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039fe:	4413      	add	r3, r2
 8003a00:	673b      	str	r3, [r7, #112]	; 0x70
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	00da      	lsls	r2, r3, #3
 8003a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d12f      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a3e:	4413      	add	r3, r2
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	00da      	lsls	r2, r3, #3
 8003a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	e017      	b.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d113      	bne.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x522>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a9c:	4413      	add	r3, r2
 8003a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	00da      	lsls	r2, r3, #3
 8003aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003aae:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f005 fa72 	bl	8008fa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 8104 	bne.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]
 8003b12:	e0e0      	b.n	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d121      	bne.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 80b4 	bne.w	8003cd6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b76:	441a      	add	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b84:	441a      	add	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d309      	bcc.n	8003baa <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	621a      	str	r2, [r3, #32]
 8003ba8:	e015      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bc0:	e009      	b.n	8003bd6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	663b      	str	r3, [r7, #96]	; 0x60
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d155      	bne.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	4413      	add	r3, r2
 8003bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	00da      	lsls	r2, r3, #3
 8003c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c04:	4413      	add	r3, r2
 8003c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c10:	d916      	bls.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	677b      	str	r3, [r7, #116]	; 0x74
 8003c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_PCD_EP_DB_Transmit+0x694>
 8003c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c24:	3b01      	subs	r3, #1
 8003c26:	677b      	str	r3, [r7, #116]	; 0x74
 8003c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e040      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d112      	bne.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c54:	801a      	strh	r2, [r3, #0]
 8003c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	e02a      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74
 8003c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7e:	3301      	adds	r3, #1
 8003c80:	677b      	str	r3, [r7, #116]	; 0x74
 8003c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	029b      	lsls	r3, r3, #10
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	e018      	b.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d114      	bne.n	8003cc2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca6:	4413      	add	r3, r2
 8003ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	00da      	lsls	r2, r3, #3
 8003cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6959      	ldr	r1, [r3, #20]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	895a      	ldrh	r2, [r3, #10]
 8003cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f003 fa7c 	bl	80071ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	823b      	strh	r3, [r7, #16]
 8003cf2:	8a3b      	ldrh	r3, [r7, #16]
 8003cf4:	f083 0310 	eor.w	r3, r3, #16
 8003cf8:	823b      	strh	r3, [r7, #16]
 8003cfa:	8a3b      	ldrh	r3, [r7, #16]
 8003cfc:	f083 0320 	eor.w	r3, r3, #32
 8003d00:	823b      	strh	r3, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	8a3b      	ldrh	r3, [r7, #16]
 8003d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3788      	adds	r7, #136	; 0x88
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e009      	b.n	8003d7a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d66:	897a      	ldrh	r2, [r7, #10]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	80da      	strh	r2, [r3, #6]
 8003d8e:	e00b      	b.n	8003da8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2201      	movs	r2, #1
 8003d94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d141      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d131      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e28:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2e:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e38:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e40:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2232      	movs	r2, #50	; 0x32
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0c9b      	lsrs	r3, r3, #18
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e5e:	e002      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e66:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d102      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f2      	bne.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d158      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e057      	b.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e9c:	e04d      	b.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea4:	d141      	bne.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d131      	bne.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eba:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2232      	movs	r2, #50	; 0x32
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eea:	e002      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d102      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f2      	bne.n	8003eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d112      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e011      	b.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f28:	e007      	b.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	20000000 	.word	0x20000000
 8003f50:	431bde83 	.word	0x431bde83

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e306      	b.n	8004574 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b97      	ldr	r3, [pc, #604]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7c:	4b94      	ldr	r3, [pc, #592]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_OscConfig+0x3e>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_OscConfig+0x44>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b8d      	ldr	r3, [pc, #564]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05b      	beq.n	800405c <HAL_RCC_OscConfig+0x108>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d157      	bne.n	800405c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e2e1      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x74>
 8003fba:	4b85      	ldr	r3, [pc, #532]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a84      	ldr	r2, [pc, #528]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b7f      	ldr	r3, [pc, #508]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7e      	ldr	r2, [pc, #504]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7b      	ldr	r2, [pc, #492]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fec:	4b78      	ldr	r3, [pc, #480]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a77      	ldr	r2, [pc, #476]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b75      	ldr	r3, [pc, #468]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a74      	ldr	r2, [pc, #464]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fc fcae 	bl	800096c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7fc fcaa 	bl	800096c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e2a6      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004026:	4b6a      	ldr	r3, [pc, #424]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xc0>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fc fc9a 	bl	800096c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fc fc96 	bl	800096c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e292      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800404e:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0xe8>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d075      	beq.n	8004156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406a:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004074:	4b56      	ldr	r3, [pc, #344]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d102      	bne.n	800408a <HAL_RCC_OscConfig+0x136>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d002      	beq.n	8004090 <HAL_RCC_OscConfig+0x13c>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11f      	bne.n	80040d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004090:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_OscConfig+0x154>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e265      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b49      	ldr	r3, [pc, #292]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	4946      	ldr	r1, [pc, #280]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fc fc07 	bl	80008d4 <HAL_InitTick>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d043      	beq.n	8004154 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e251      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fc fc42 	bl	800096c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fc fc3e 	bl	800096c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e23a      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fe:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	492d      	ldr	r1, [pc, #180]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	604b      	str	r3, [r1, #4]
 800411e:	e01a      	b.n	8004156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004120:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2a      	ldr	r2, [pc, #168]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fc fc1e 	bl	800096c <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fc fc1a 	bl	800096c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e216      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004146:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1e0>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d041      	beq.n	80041e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 800416c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004170:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fc fbf7 	bl	800096c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004182:	f7fc fbf3 	bl	800096c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e1ef      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0ef      	beq.n	8004182 <HAL_RCC_OscConfig+0x22e>
 80041a2:	e020      	b.n	80041e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fc fbda 	bl	800096c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ba:	e00d      	b.n	80041d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fc fbd6 	bl	800096c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d906      	bls.n	80041d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1d2      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d8:	4b8c      	ldr	r3, [pc, #560]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ea      	bne.n	80041bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a6 	beq.w	8004340 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f8:	4b84      	ldr	r3, [pc, #528]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_OscConfig+0x2b4>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x2b6>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	4b7f      	ldr	r3, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	4a7e      	ldr	r2, [pc, #504]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004218:	6593      	str	r3, [r2, #88]	; 0x58
 800421a:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004226:	2301      	movs	r3, #1
 8004228:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422a:	4b79      	ldr	r3, [pc, #484]	; (8004410 <HAL_RCC_OscConfig+0x4bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d118      	bne.n	8004268 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004236:	4b76      	ldr	r3, [pc, #472]	; (8004410 <HAL_RCC_OscConfig+0x4bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a75      	ldr	r2, [pc, #468]	; (8004410 <HAL_RCC_OscConfig+0x4bc>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fc fb93 	bl	800096c <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fc fb8f 	bl	800096c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e18b      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425c:	4b6c      	ldr	r3, [pc, #432]	; (8004410 <HAL_RCC_OscConfig+0x4bc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d108      	bne.n	8004282 <HAL_RCC_OscConfig+0x32e>
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a65      	ldr	r2, [pc, #404]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004280:	e024      	b.n	80042cc <HAL_RCC_OscConfig+0x378>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b05      	cmp	r3, #5
 8004288:	d110      	bne.n	80042ac <HAL_RCC_OscConfig+0x358>
 800428a:	4b60      	ldr	r3, [pc, #384]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	4a5e      	ldr	r2, [pc, #376]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800429a:	4b5c      	ldr	r3, [pc, #368]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	4a5a      	ldr	r2, [pc, #360]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042aa:	e00f      	b.n	80042cc <HAL_RCC_OscConfig+0x378>
 80042ac:	4b57      	ldr	r3, [pc, #348]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a56      	ldr	r2, [pc, #344]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042bc:	4b53      	ldr	r3, [pc, #332]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d016      	beq.n	8004302 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fc fb4a 	bl	800096c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fc fb46 	bl	800096c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e140      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f2:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ed      	beq.n	80042dc <HAL_RCC_OscConfig+0x388>
 8004300:	e015      	b.n	800432e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fc fb33 	bl	800096c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fc fb2f 	bl	800096c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e129      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004320:	4b3a      	ldr	r3, [pc, #232]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ed      	bne.n	800430a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	4a34      	ldr	r2, [pc, #208]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d03c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01c      	beq.n	800438e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004354:	4b2d      	ldr	r3, [pc, #180]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800435a:	4a2c      	ldr	r2, [pc, #176]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fc fb02 	bl	800096c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436c:	f7fc fafe 	bl	800096c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0fa      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ef      	beq.n	800436c <HAL_RCC_OscConfig+0x418>
 800438c:	e01b      	b.n	80043c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004394:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fc fae5 	bl	800096c <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a6:	f7fc fae1 	bl	800096c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0dd      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b8:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ef      	bne.n	80043a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80d1 	beq.w	8004572 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	f000 808b 	beq.w	80044f4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d15e      	bne.n	80044a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fc fabb 	bl	800096c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f8:	e00c      	b.n	8004414 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fc fab7 	bl	800096c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d905      	bls.n	8004414 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0b3      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ec      	bne.n	80043fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004420:	4b56      	ldr	r3, [pc, #344]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	4b56      	ldr	r3, [pc, #344]	; (8004580 <HAL_RCC_OscConfig+0x62c>)
 8004426:	4013      	ands	r3, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6a11      	ldr	r1, [r2, #32]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004430:	3a01      	subs	r2, #1
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	4311      	orrs	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800443a:	0212      	lsls	r2, r2, #8
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0552      	lsls	r2, r2, #21
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800444e:	0852      	lsrs	r2, r2, #1
 8004450:	3a01      	subs	r2, #1
 8004452:	0652      	lsls	r2, r2, #25
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800445a:	06d2      	lsls	r2, r2, #27
 800445c:	430a      	orrs	r2, r1
 800445e:	4947      	ldr	r1, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004460:	4313      	orrs	r3, r2
 8004462:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a44      	ldr	r2, [pc, #272]	; (800457c <HAL_RCC_OscConfig+0x628>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004470:	4b42      	ldr	r3, [pc, #264]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a41      	ldr	r2, [pc, #260]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fc fa76 	bl	800096c <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fc fa72 	bl	800096c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e06e      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x530>
 80044a2:	e066      	b.n	8004572 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a4:	4b35      	ldr	r3, [pc, #212]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a34      	ldr	r2, [pc, #208]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044b0:	4b32      	ldr	r3, [pc, #200]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a31      	ldr	r2, [pc, #196]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044bc:	4b2f      	ldr	r3, [pc, #188]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fc fa4e 	bl	800096c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fc fa4a 	bl	800096c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e046      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_OscConfig+0x628>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x580>
 80044f2:	e03e      	b.n	8004572 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e039      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <HAL_RCC_OscConfig+0x628>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0203 	and.w	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	429a      	cmp	r2, r3
 8004512:	d12c      	bne.n	800456e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	3b01      	subs	r3, #1
 8004520:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d123      	bne.n	800456e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d11b      	bne.n	800456e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d113      	bne.n	800456e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	3b01      	subs	r3, #1
 8004554:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004556:	429a      	cmp	r2, r3
 8004558:	d109      	bne.n	800456e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004564:	085b      	lsrs	r3, r3, #1
 8004566:	3b01      	subs	r3, #1
 8004568:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	019f800c 	.word	0x019f800c

08004584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e11e      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b91      	ldr	r3, [pc, #580]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d910      	bls.n	80045cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b8e      	ldr	r3, [pc, #568]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 020f 	bic.w	r2, r3, #15
 80045b2:	498c      	ldr	r1, [pc, #560]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b8a      	ldr	r3, [pc, #552]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e106      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d073      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d129      	bne.n	8004634 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e0:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0f4      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045f0:	f000 f972 	bl	80048d8 <RCC_GetSysClockFreqFromPLLSource>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4a7c      	ldr	r2, [pc, #496]	; (80047ec <HAL_RCC_ClockConfig+0x268>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d93f      	bls.n	800467e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045fe:	4b7a      	ldr	r3, [pc, #488]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004612:	2b00      	cmp	r3, #0
 8004614:	d033      	beq.n	800467e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800461a:	2b00      	cmp	r3, #0
 800461c:	d12f      	bne.n	800467e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800461e:	4b72      	ldr	r3, [pc, #456]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004626:	4a70      	ldr	r2, [pc, #448]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e024      	b.n	800467e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d107      	bne.n	800464c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463c:	4b6a      	ldr	r3, [pc, #424]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0c6      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	4b66      	ldr	r3, [pc, #408]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0be      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800465c:	f000 f8ce 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 8004660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4a61      	ldr	r2, [pc, #388]	; (80047ec <HAL_RCC_ClockConfig+0x268>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d909      	bls.n	800467e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800466a:	4b5f      	ldr	r3, [pc, #380]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004672:	4a5d      	ldr	r2, [pc, #372]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b5a      	ldr	r3, [pc, #360]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4957      	ldr	r1, [pc, #348]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fc f96c 	bl	800096c <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fc f968 	bl	800096c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e095      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d023      	beq.n	8004714 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a42      	ldr	r2, [pc, #264]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046f0:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046f8:	4a3b      	ldr	r2, [pc, #236]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4936      	ldr	r1, [pc, #216]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
 8004712:	e008      	b.n	8004726 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d105      	bne.n	8004726 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800471a:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a32      	ldr	r2, [pc, #200]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 8004720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004724:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d21d      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004734:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 020f 	bic.w	r2, r3, #15
 800473c:	4929      	ldr	r1, [pc, #164]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004744:	f7fc f912 	bl	800096c <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800474c:	f7fc f90e 	bl	800096c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e03b      	b.n	80047da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d1ed      	bne.n	800474c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4917      	ldr	r1, [pc, #92]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	490f      	ldr	r1, [pc, #60]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ae:	f000 f825 	bl	80047fc <HAL_RCC_GetSysClockFreq>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <HAL_RCC_ClockConfig+0x264>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	490c      	ldr	r1, [pc, #48]	; (80047f0 <HAL_RCC_ClockConfig+0x26c>)
 80047c0:	5ccb      	ldrb	r3, [r1, r3]
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <HAL_RCC_ClockConfig+0x270>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_ClockConfig+0x274>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc f87e 	bl	80008d4 <HAL_InitTick>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40022000 	.word	0x40022000
 80047e8:	40021000 	.word	0x40021000
 80047ec:	04c4b400 	.word	0x04c4b400
 80047f0:	080095b4 	.word	0x080095b4
 80047f4:	20000000 	.word	0x20000000
 80047f8:	20000004 	.word	0x20000004

080047fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004802:	4b2c      	ldr	r3, [pc, #176]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b04      	cmp	r3, #4
 800480c:	d102      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e047      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004814:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d102      	bne.n	8004826 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e03e      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004826:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b0c      	cmp	r3, #12
 8004830:	d136      	bne.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	3301      	adds	r3, #1
 8004848:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d10c      	bne.n	800486a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004850:	4a1a      	ldr	r2, [pc, #104]	; (80048bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800485a:	68d2      	ldr	r2, [r2, #12]
 800485c:	0a12      	lsrs	r2, r2, #8
 800485e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
      break;
 8004868:	e00c      	b.n	8004884 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004874:	68d2      	ldr	r2, [r2, #12]
 8004876:	0a12      	lsrs	r2, r2, #8
 8004878:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
      break;
 8004882:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	0e5b      	lsrs	r3, r3, #25
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	3301      	adds	r3, #1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	e001      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048a4:	693b      	ldr	r3, [r7, #16]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40021000 	.word	0x40021000
 80048b8:	00f42400 	.word	0x00f42400
 80048bc:	016e3600 	.word	0x016e3600

080048c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000000 	.word	0x20000000

080048d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d10c      	bne.n	8004916 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048fc:	4a17      	ldr	r2, [pc, #92]	; (800495c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004906:	68d2      	ldr	r2, [r2, #12]
 8004908:	0a12      	lsrs	r2, r2, #8
 800490a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	617b      	str	r3, [r7, #20]
    break;
 8004914:	e00c      	b.n	8004930 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	0a12      	lsrs	r2, r2, #8
 8004924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]
    break;
 800492e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0e5b      	lsrs	r3, r3, #25
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800494a:	687b      	ldr	r3, [r7, #4]
}
 800494c:	4618      	mov	r0, r3
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40021000 	.word	0x40021000
 800495c:	016e3600 	.word	0x016e3600
 8004960:	00f42400 	.word	0x00f42400

08004964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800496c:	2300      	movs	r3, #0
 800496e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004970:	2300      	movs	r3, #0
 8004972:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8098 	beq.w	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10d      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	4b40      	ldr	r3, [pc, #256]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004996:	4a3f      	ldr	r2, [pc, #252]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499c:	6593      	str	r3, [r2, #88]	; 0x58
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ae:	4b3a      	ldr	r3, [pc, #232]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a39      	ldr	r2, [pc, #228]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ba:	f7fb ffd7 	bl	800096c <HAL_GetTick>
 80049be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c0:	e009      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7fb ffd3 	bl	800096c <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	74fb      	strb	r3, [r7, #19]
        break;
 80049d4:	e005      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d6:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ef      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d159      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049e8:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01e      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d019      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a1f      	ldr	r2, [pc, #124]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a20:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	4a1b      	ldr	r2, [pc, #108]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fb ff93 	bl	800096c <HAL_GetTick>
 8004a46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a48:	e00b      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fb ff8f 	bl	800096c <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d902      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ec      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	4903      	ldr	r1, [pc, #12]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	74bb      	strb	r3, [r7, #18]
 8004a92:	e005      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa0:	7c7b      	ldrb	r3, [r7, #17]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d105      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa6:	4ba6      	ldr	r3, [pc, #664]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	4aa5      	ldr	r2, [pc, #660]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004abe:	4ba0      	ldr	r3, [pc, #640]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac4:	f023 0203 	bic.w	r2, r3, #3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	499c      	ldr	r1, [pc, #624]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae0:	4b97      	ldr	r3, [pc, #604]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f023 020c 	bic.w	r2, r3, #12
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4994      	ldr	r1, [pc, #592]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b02:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	498b      	ldr	r1, [pc, #556]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b24:	4b86      	ldr	r3, [pc, #536]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	4983      	ldr	r1, [pc, #524]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b46:	4b7e      	ldr	r3, [pc, #504]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	497a      	ldr	r1, [pc, #488]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b68:	4b75      	ldr	r3, [pc, #468]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	4972      	ldr	r1, [pc, #456]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4969      	ldr	r1, [pc, #420]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bac:	4b64      	ldr	r3, [pc, #400]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4961      	ldr	r1, [pc, #388]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	4958      	ldr	r1, [pc, #352]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bf0:	4b53      	ldr	r3, [pc, #332]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	4950      	ldr	r1, [pc, #320]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b4b      	ldr	r3, [pc, #300]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a4a      	ldr	r2, [pc, #296]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c28:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4942      	ldr	r1, [pc, #264]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a3c      	ldr	r2, [pc, #240]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c60:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4934      	ldr	r1, [pc, #208]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c80:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c98:	4b29      	ldr	r3, [pc, #164]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	4926      	ldr	r1, [pc, #152]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb8:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	4918      	ldr	r1, [pc, #96]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cfa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d015      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	490a      	ldr	r1, [pc, #40]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d26:	d105      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d34:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000

08004d44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d54:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d7a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d7e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	4013      	ands	r3, r2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 0014 	add.w	r0, r7, #20
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	b004      	add	sp, #16
 8004de8:	4770      	bx	lr
	...

08004dec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b09d      	sub	sp, #116	; 0x74
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d81f      	bhi.n	8004e5e <USB_ActivateEndpoint+0x72>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <USB_ActivateEndpoint+0x38>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e67 	.word	0x08004e67
 8004e30:	08004e43 	.word	0x08004e43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e40:	e012      	b.n	8004e68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e4e:	e00b      	b.n	8004e68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e5c:	e004      	b.n	8004e68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004e64:	e000      	b.n	8004e68 <USB_ActivateEndpoint+0x7c>
      break;
 8004e66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	441a      	add	r2, r3
 8004e72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	b21a      	sxth	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b21b      	sxth	r3, r3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	7b1b      	ldrb	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f040 8149 	bne.w	8005170 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8084 	beq.w	8004ff0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	4413      	add	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	00da      	lsls	r2, r3, #3
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	88db      	ldrh	r3, [r3, #6]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	827b      	strh	r3, [r7, #18]
 8004f2a:	8a7b      	ldrh	r3, [r7, #18]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01b      	beq.n	8004f6c <USB_ActivateEndpoint+0x180>
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	823b      	strh	r3, [r7, #16]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	8a3b      	ldrh	r3, [r7, #16]
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	78db      	ldrb	r3, [r3, #3]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d020      	beq.n	8004fb6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f8a:	81bb      	strh	r3, [r7, #12]
 8004f8c:	89bb      	ldrh	r3, [r7, #12]
 8004f8e:	f083 0320 	eor.w	r3, r3, #32
 8004f92:	81bb      	strh	r3, [r7, #12]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	89bb      	ldrh	r3, [r7, #12]
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
 8004fb4:	e2a6      	b.n	8005504 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fcc:	81fb      	strh	r3, [r7, #14]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	89fb      	ldrh	r3, [r7, #14]
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
 8004fee:	e289      	b.n	8005504 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	4413      	add	r3, r2
 8005002:	633b      	str	r3, [r7, #48]	; 0x30
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	00da      	lsls	r2, r3, #3
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	4413      	add	r3, r2
 800500e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	88db      	ldrh	r3, [r3, #6]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	b29b      	uxth	r3, r3
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	4413      	add	r3, r2
 8005036:	62bb      	str	r3, [r7, #40]	; 0x28
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	00da      	lsls	r2, r3, #3
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	4413      	add	r3, r2
 8005042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b3e      	cmp	r3, #62	; 0x3e
 800504e:	d918      	bls.n	8005082 <USB_ActivateEndpoint+0x296>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	66bb      	str	r3, [r7, #104]	; 0x68
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <USB_ActivateEndpoint+0x27e>
 8005064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005066:	3b01      	subs	r3, #1
 8005068:	66bb      	str	r3, [r7, #104]	; 0x68
 800506a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800506c:	b29b      	uxth	r3, r3
 800506e:	029b      	lsls	r3, r3, #10
 8005070:	b29b      	uxth	r3, r3
 8005072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507a:	b29a      	uxth	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e029      	b.n	80050d6 <USB_ActivateEndpoint+0x2ea>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d112      	bne.n	80050b0 <USB_ActivateEndpoint+0x2c4>
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005094:	b29a      	uxth	r2, r3
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	e012      	b.n	80050d6 <USB_ActivateEndpoint+0x2ea>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <USB_ActivateEndpoint+0x2de>
 80050c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c6:	3301      	adds	r3, #1
 80050c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	029b      	lsls	r3, r3, #10
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80050e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d01b      	beq.n	8005126 <USB_ActivateEndpoint+0x33a>
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005104:	843b      	strh	r3, [r7, #32]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	8c3b      	ldrh	r3, [r7, #32]
 8005112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800511e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005122:	b29b      	uxth	r3, r3
 8005124:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	83fb      	strh	r3, [r7, #30]
 800513e:	8bfb      	ldrh	r3, [r7, #30]
 8005140:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005144:	83fb      	strh	r3, [r7, #30]
 8005146:	8bfb      	ldrh	r3, [r7, #30]
 8005148:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800514c:	83fb      	strh	r3, [r7, #30]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	441a      	add	r2, r3
 8005158:	8bfb      	ldrh	r3, [r7, #30]
 800515a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516a:	b29b      	uxth	r3, r3
 800516c:	8013      	strh	r3, [r2, #0]
 800516e:	e1c9      	b.n	8005504 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	78db      	ldrb	r3, [r3, #3]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d11e      	bne.n	80051b6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
 80051b4:	e01d      	b.n	80051f2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005202:	4413      	add	r3, r2
 8005204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	00da      	lsls	r2, r3, #3
 800520c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800520e:	4413      	add	r3, r2
 8005210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005214:	65bb      	str	r3, [r7, #88]	; 0x58
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	891b      	ldrh	r3, [r3, #8]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	b29b      	uxth	r3, r3
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	657b      	str	r3, [r7, #84]	; 0x54
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005236:	4413      	add	r3, r2
 8005238:	657b      	str	r3, [r7, #84]	; 0x54
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	00da      	lsls	r2, r3, #3
 8005240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005242:	4413      	add	r3, r2
 8005244:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005248:	653b      	str	r3, [r7, #80]	; 0x50
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	895b      	ldrh	r3, [r3, #10]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	b29b      	uxth	r3, r3
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005258:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 8093 	bne.w	800538a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01b      	beq.n	80052b8 <USB_ActivateEndpoint+0x4cc>
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80052c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <USB_ActivateEndpoint+0x51c>
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005320:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005326:	873b      	strh	r3, [r7, #56]	; 0x38
 8005328:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800532a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800532e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800533c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005366:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	441a      	add	r2, r3
 8005372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	b29b      	uxth	r3, r3
 8005386:	8013      	strh	r3, [r2, #0]
 8005388:	e0bc      	b.n	8005504 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800539a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800539e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <USB_ActivateEndpoint+0x5f6>
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	441a      	add	r2, r3
 80053ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01d      	beq.n	800543a <USB_ActivateEndpoint+0x64e>
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005414:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005432:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005436:	b29b      	uxth	r3, r3
 8005438:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	78db      	ldrb	r3, [r3, #3]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d024      	beq.n	800548c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005458:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800545c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005460:	f083 0320 	eor.w	r3, r3, #32
 8005464:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]
 800548a:	e01d      	b.n	80054c8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80054f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005500:	b29b      	uxth	r3, r3
 8005502:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005504:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005508:	4618      	mov	r0, r3
 800550a:	3774      	adds	r7, #116	; 0x74
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005514:	b480      	push	{r7}
 8005516:	b08d      	sub	sp, #52	; 0x34
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	7b1b      	ldrb	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 808e 	bne.w	8005644 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d044      	beq.n	80055ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	81bb      	strh	r3, [r7, #12]
 800553e:	89bb      	ldrh	r3, [r7, #12]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01b      	beq.n	8005580 <USB_DeactivateEndpoint+0x6c>
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29b      	uxth	r3, r3
 8005556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	817b      	strh	r3, [r7, #10]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005578:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005596:	813b      	strh	r3, [r7, #8]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	893b      	ldrh	r3, [r7, #8]
 80055a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8013      	strh	r3, [r2, #0]
 80055b8:	e192      	b.n	80058e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	827b      	strh	r3, [r7, #18]
 80055c8:	8a7b      	ldrh	r3, [r7, #18]
 80055ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d01b      	beq.n	800560a <USB_DeactivateEndpoint+0xf6>
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	823b      	strh	r3, [r7, #16]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	8a3b      	ldrh	r3, [r7, #16]
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005620:	81fb      	strh	r3, [r7, #14]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	89fb      	ldrh	r3, [r7, #14]
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]
 8005642:	e14d      	b.n	80058e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 80a5 	bne.w	8005798 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	843b      	strh	r3, [r7, #32]
 800565c:	8c3b      	ldrh	r3, [r7, #32]
 800565e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01b      	beq.n	800569e <USB_DeactivateEndpoint+0x18a>
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567c:	83fb      	strh	r3, [r7, #30]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	8bfb      	ldrh	r3, [r7, #30]
 800568a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	83bb      	strh	r3, [r7, #28]
 80056ac:	8bbb      	ldrh	r3, [r7, #28]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <USB_DeactivateEndpoint+0x1da>
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056cc:	837b      	strh	r3, [r7, #26]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	8b7b      	ldrh	r3, [r7, #26]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	833b      	strh	r3, [r7, #24]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	441a      	add	r2, r3
 8005710:	8b3b      	ldrh	r3, [r7, #24]
 8005712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573c:	82fb      	strh	r3, [r7, #22]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	8afb      	ldrh	r3, [r7, #22]
 800574a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575a:	b29b      	uxth	r3, r3
 800575c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	82bb      	strh	r3, [r7, #20]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	8abb      	ldrh	r3, [r7, #20]
 8005782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005792:	b29b      	uxth	r3, r3
 8005794:	8013      	strh	r3, [r2, #0]
 8005796:	e0a3      	b.n	80058e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <USB_DeactivateEndpoint+0x2d4>
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80057f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01b      	beq.n	8005838 <USB_DeactivateEndpoint+0x324>
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	853b      	strh	r3, [r7, #40]	; 0x28
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800585c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800589c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	847b      	strh	r3, [r7, #34]	; 0x22
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3734      	adds	r7, #52	; 0x34
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b0c2      	sub	sp, #264	; 0x108
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058fc:	6018      	str	r0, [r3, #0]
 80058fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005906:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 867b 	bne.w	8006610 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800591a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d908      	bls.n	8005948 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005946:	e007      	b.n	8005958 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	7b1b      	ldrb	r3, [r3, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d13a      	bne.n	80059de <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6959      	ldr	r1, [r3, #20]
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	88da      	ldrh	r2, [r3, #6]
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005984:	b29b      	uxth	r3, r3
 8005986:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800598a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800598e:	6800      	ldr	r0, [r0, #0]
 8005990:	f001 fc1d 	bl	80071ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	00da      	lsls	r2, r3, #3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	f000 bde3 	b.w	80065a4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	78db      	ldrb	r3, [r3, #3]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	f040 843a 	bne.w	8006264 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	f240 83b7 	bls.w	800617c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 81b3 	beq.w	8005e16 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	633b      	str	r3, [r7, #48]	; 0x30
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d16d      	bne.n	8005ba8 <USB_EPStartXfer+0x2ba>
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	4413      	add	r3, r2
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	00da      	lsls	r2, r3, #3
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b0e:	d91c      	bls.n	8005b4a <USB_EPStartXfer+0x25c>
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <USB_EPStartXfer+0x242>
 8005b26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e053      	b.n	8005bf2 <USB_EPStartXfer+0x304>
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d112      	bne.n	8005b78 <USB_EPStartXfer+0x28a>
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	e03c      	b.n	8005bf2 <USB_EPStartXfer+0x304>
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <USB_EPStartXfer+0x2aa>
 8005b8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b92:	3301      	adds	r3, #1
 8005b94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e024      	b.n	8005bf2 <USB_EPStartXfer+0x304>
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d11c      	bne.n	8005bf2 <USB_EPStartXfer+0x304>
 8005bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	4413      	add	r3, r2
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	00da      	lsls	r2, r3, #3
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	895b      	ldrh	r3, [r3, #10]
 8005bfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6959      	ldr	r1, [r3, #20]
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c20:	6800      	ldr	r0, [r0, #0]
 8005c22:	f001 fad4 	bl	80071ce <USB_WritePMA>
            ep->xfer_buff += len;
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c36:	441a      	add	r2, r3
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d90f      	bls.n	8005c80 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c70:	1ad2      	subs	r2, r2, r3
 8005c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	621a      	str	r2, [r3, #32]
 8005c7e:	e00e      	b.n	8005c9e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d16d      	bne.n	8005d8a <USB_EPStartXfer+0x49c>
 8005cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	4413      	add	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00da      	lsls	r2, r3, #3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cee:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf0:	d91c      	bls.n	8005d2c <USB_EPStartXfer+0x43e>
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d00:	f003 031f 	and.w	r3, r3, #31
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d104      	bne.n	8005d12 <USB_EPStartXfer+0x424>
 8005d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	029b      	lsls	r3, r3, #10
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e059      	b.n	8005de0 <USB_EPStartXfer+0x4f2>
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d112      	bne.n	8005d5a <USB_EPStartXfer+0x46c>
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e042      	b.n	8005de0 <USB_EPStartXfer+0x4f2>
 8005d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <USB_EPStartXfer+0x48c>
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d74:	3301      	adds	r3, #1
 8005d76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	e02a      	b.n	8005de0 <USB_EPStartXfer+0x4f2>
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d122      	bne.n	8005de0 <USB_EPStartXfer+0x4f2>
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	623b      	str	r3, [r7, #32]
 8005da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	4413      	add	r3, r2
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	00da      	lsls	r2, r3, #3
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	891b      	ldrh	r3, [r3, #8]
 8005dec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6959      	ldr	r1, [r3, #20]
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e0e:	6800      	ldr	r0, [r0, #0]
 8005e10:	f001 f9dd 	bl	80071ce <USB_WritePMA>
 8005e14:	e3c6      	b.n	80065a4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d16d      	bne.n	8005f02 <USB_EPStartXfer+0x614>
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e46:	4413      	add	r3, r2
 8005e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	00da      	lsls	r2, r3, #3
 8005e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e60:	647b      	str	r3, [r7, #68]	; 0x44
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e66:	2b3e      	cmp	r3, #62	; 0x3e
 8005e68:	d91c      	bls.n	8005ea4 <USB_EPStartXfer+0x5b6>
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <USB_EPStartXfer+0x59c>
 8005e80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e84:	3b01      	subs	r3, #1
 8005e86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	e059      	b.n	8005f58 <USB_EPStartXfer+0x66a>
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d112      	bne.n	8005ed2 <USB_EPStartXfer+0x5e4>
 8005eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e042      	b.n	8005f58 <USB_EPStartXfer+0x66a>
 8005ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <USB_EPStartXfer+0x604>
 8005ee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ef2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	e02a      	b.n	8005f58 <USB_EPStartXfer+0x66a>
 8005f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d122      	bne.n	8005f58 <USB_EPStartXfer+0x66a>
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f32:	4413      	add	r3, r2
 8005f34:	653b      	str	r3, [r7, #80]	; 0x50
 8005f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	00da      	lsls	r2, r3, #3
 8005f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	891b      	ldrh	r3, [r3, #8]
 8005f64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6959      	ldr	r1, [r3, #20]
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f86:	6800      	ldr	r0, [r0, #0]
 8005f88:	f001 f921 	bl	80071ce <USB_WritePMA>
            ep->xfer_buff += len;
 8005f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695a      	ldr	r2, [r3, #20]
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	441a      	add	r2, r3
 8005f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6a1a      	ldr	r2, [r3, #32]
 8005fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d90f      	bls.n	8005fe6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a1a      	ldr	r2, [r3, #32]
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	621a      	str	r2, [r3, #32]
 8005fe4:	e00e      	b.n	8006004 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2200      	movs	r2, #0
 8006002:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	643b      	str	r3, [r7, #64]	; 0x40
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d16d      	bne.n	80060fc <USB_EPStartXfer+0x80e>
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	63bb      	str	r3, [r7, #56]	; 0x38
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	4413      	add	r3, r2
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
 8006044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	00da      	lsls	r2, r3, #3
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	4413      	add	r3, r2
 8006056:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006060:	2b3e      	cmp	r3, #62	; 0x3e
 8006062:	d91c      	bls.n	800609e <USB_EPStartXfer+0x7b0>
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <USB_EPStartXfer+0x796>
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	3b01      	subs	r3, #1
 8006080:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	b29b      	uxth	r3, r3
 800608a:	029b      	lsls	r3, r3, #10
 800608c:	b29b      	uxth	r3, r3
 800608e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006096:	b29a      	uxth	r2, r3
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	e053      	b.n	8006146 <USB_EPStartXfer+0x858>
 800609e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d112      	bne.n	80060cc <USB_EPStartXfer+0x7de>
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e03c      	b.n	8006146 <USB_EPStartXfer+0x858>
 80060cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USB_EPStartXfer+0x7fe>
 80060e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e6:	3301      	adds	r3, #1
 80060e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	e024      	b.n	8006146 <USB_EPStartXfer+0x858>
 80060fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11c      	bne.n	8006146 <USB_EPStartXfer+0x858>
 800610c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006110:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611a:	b29b      	uxth	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006120:	4413      	add	r3, r2
 8006122:	643b      	str	r3, [r7, #64]	; 0x40
 8006124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00da      	lsls	r2, r3, #3
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	4413      	add	r3, r2
 8006136:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006140:	b29a      	uxth	r2, r3
 8006142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006144:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	895b      	ldrh	r3, [r3, #10]
 8006152:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6959      	ldr	r1, [r3, #20]
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	b29b      	uxth	r3, r3
 8006168:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800616c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006170:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006174:	6800      	ldr	r0, [r0, #0]
 8006176:	f001 f82a 	bl	80071ce <USB_WritePMA>
 800617a:	e213      	b.n	80065a4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800617c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800618c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006202:	b29b      	uxth	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006208:	4413      	add	r3, r2
 800620a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800620c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	00da      	lsls	r2, r3, #3
 800621a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621c:	4413      	add	r3, r2
 800621e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006222:	65bb      	str	r3, [r7, #88]	; 0x58
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006228:	b29a      	uxth	r2, r3
 800622a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800622c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	891b      	ldrh	r3, [r3, #8]
 800623a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6959      	ldr	r1, [r3, #20]
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	b29b      	uxth	r3, r3
 8006250:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006254:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006258:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800625c:	6800      	ldr	r0, [r0, #0]
 800625e:	f000 ffb6 	bl	80071ce <USB_WritePMA>
 8006262:	e19f      	b.n	80065a4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6a1a      	ldr	r2, [r3, #32]
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	1ad2      	subs	r2, r2, r3
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80bc 	beq.w	8006422 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	673b      	str	r3, [r7, #112]	; 0x70
 80062b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d16d      	bne.n	80063a2 <USB_EPStartXfer+0xab4>
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062e6:	4413      	add	r3, r2
 80062e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	00da      	lsls	r2, r3, #3
 80062f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006300:	667b      	str	r3, [r7, #100]	; 0x64
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006306:	2b3e      	cmp	r3, #62	; 0x3e
 8006308:	d91c      	bls.n	8006344 <USB_EPStartXfer+0xa56>
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <USB_EPStartXfer+0xa3c>
 8006320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006324:	3b01      	subs	r3, #1
 8006326:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800632a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800632e:	b29b      	uxth	r3, r3
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	b29b      	uxth	r3, r3
 8006334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633c:	b29a      	uxth	r2, r3
 800633e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e053      	b.n	80063ec <USB_EPStartXfer+0xafe>
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006348:	2b00      	cmp	r3, #0
 800634a:	d112      	bne.n	8006372 <USB_EPStartXfer+0xa84>
 800634c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006356:	b29a      	uxth	r2, r3
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636a:	b29a      	uxth	r2, r3
 800636c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e03c      	b.n	80063ec <USB_EPStartXfer+0xafe>
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <USB_EPStartXfer+0xaa4>
 8006388:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800638c:	3301      	adds	r3, #1
 800638e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006392:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006396:	b29b      	uxth	r3, r3
 8006398:	029b      	lsls	r3, r3, #10
 800639a:	b29a      	uxth	r2, r3
 800639c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e024      	b.n	80063ec <USB_EPStartXfer+0xafe>
 80063a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d11c      	bne.n	80063ec <USB_EPStartXfer+0xafe>
 80063b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c6:	4413      	add	r3, r2
 80063c8:	673b      	str	r3, [r7, #112]	; 0x70
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	00da      	lsls	r2, r3, #3
 80063d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063da:	4413      	add	r3, r2
 80063dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	895b      	ldrh	r3, [r3, #10]
 80063f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6959      	ldr	r1, [r3, #20]
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640c:	b29b      	uxth	r3, r3
 800640e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006412:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006416:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	f000 fed7 	bl	80071ce <USB_WritePMA>
 8006420:	e0c0      	b.n	80065a4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d16d      	bne.n	800650e <USB_EPStartXfer+0xc20>
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800643e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006452:	4413      	add	r3, r2
 8006454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	00da      	lsls	r2, r3, #3
 8006464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006466:	4413      	add	r3, r2
 8006468:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800646c:	67bb      	str	r3, [r7, #120]	; 0x78
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	2b3e      	cmp	r3, #62	; 0x3e
 8006474:	d91c      	bls.n	80064b0 <USB_EPStartXfer+0xbc2>
 8006476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <USB_EPStartXfer+0xba8>
 800648c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006490:	3b01      	subs	r3, #1
 8006492:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006496:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800649a:	b29b      	uxth	r3, r3
 800649c:	029b      	lsls	r3, r3, #10
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e05f      	b.n	8006570 <USB_EPStartXfer+0xc82>
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d112      	bne.n	80064de <USB_EPStartXfer+0xbf0>
 80064b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c6:	801a      	strh	r2, [r3, #0]
 80064c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e048      	b.n	8006570 <USB_EPStartXfer+0xc82>
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <USB_EPStartXfer+0xc10>
 80064f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29a      	uxth	r2, r3
 8006508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	e030      	b.n	8006570 <USB_EPStartXfer+0xc82>
 800650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d128      	bne.n	8006570 <USB_EPStartXfer+0xc82>
 800651e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800652c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006542:	4413      	add	r3, r2
 8006544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	00da      	lsls	r2, r3, #3
 8006556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800655a:	4413      	add	r3, r2
 800655c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800656e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	891b      	ldrh	r3, [r3, #8]
 800657c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6959      	ldr	r1, [r3, #20]
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	b29b      	uxth	r3, r3
 8006592:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006596:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800659a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	f000 fe15 	bl	80071ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ca:	817b      	strh	r3, [r7, #10]
 80065cc:	897b      	ldrh	r3, [r7, #10]
 80065ce:	f083 0310 	eor.w	r3, r3, #16
 80065d2:	817b      	strh	r3, [r7, #10]
 80065d4:	897b      	ldrh	r3, [r7, #10]
 80065d6:	f083 0320 	eor.w	r3, r3, #32
 80065da:	817b      	strh	r3, [r7, #10]
 80065dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	897b      	ldrh	r3, [r7, #10]
 80065f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006608:	b29b      	uxth	r3, r3
 800660a:	8013      	strh	r3, [r2, #0]
 800660c:	f000 bc9f 	b.w	8006f4e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	7b1b      	ldrb	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f040 80ae 	bne.w	800677e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	d917      	bls.n	800666e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800663e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	619a      	str	r2, [r3, #24]
 800666c:	e00e      	b.n	800668c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800667e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066b0:	4413      	add	r3, r2
 80066b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	00da      	lsls	r2, r3, #3
 80066c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066c8:	4413      	add	r3, r2
 80066ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d6:	2b3e      	cmp	r3, #62	; 0x3e
 80066d8:	d91d      	bls.n	8006716 <USB_EPStartXfer+0xe28>
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <USB_EPStartXfer+0xe0c>
 80066f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066f4:	3b01      	subs	r3, #1
 80066f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066fe:	b29b      	uxth	r3, r3
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	b29b      	uxth	r3, r3
 8006704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e3e1      	b.n	8006eda <USB_EPStartXfer+0x15ec>
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	2b00      	cmp	r3, #0
 800671c:	d116      	bne.n	800674c <USB_EPStartXfer+0xe5e>
 800671e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800672a:	b29a      	uxth	r2, r3
 800672c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006730:	801a      	strh	r2, [r3, #0]
 8006732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	e3c6      	b.n	8006eda <USB_EPStartXfer+0x15ec>
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	085b      	lsrs	r3, r3, #1
 8006752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <USB_EPStartXfer+0xe7e>
 8006762:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006766:	3301      	adds	r3, #1
 8006768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800676c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006770:	b29b      	uxth	r3, r3
 8006772:	029b      	lsls	r3, r3, #10
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	e3ad      	b.n	8006eda <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	78db      	ldrb	r3, [r3, #3]
 800678a:	2b02      	cmp	r3, #2
 800678c:	f040 8200 	bne.w	8006b90 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	785b      	ldrb	r3, [r3, #1]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f040 8091 	bne.w	80068c4 <USB_EPStartXfer+0xfd6>
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c6:	4413      	add	r3, r2
 80067c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	00da      	lsls	r2, r3, #3
 80067da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067de:	4413      	add	r3, r2
 80067e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b3e      	cmp	r3, #62	; 0x3e
 80067f6:	d925      	bls.n	8006844 <USB_EPStartXfer+0xf56>
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800680a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <USB_EPStartXfer+0xf3a>
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006822:	3b01      	subs	r3, #1
 8006824:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682c:	b29b      	uxth	r3, r3
 800682e:	029b      	lsls	r3, r3, #10
 8006830:	b29b      	uxth	r3, r3
 8006832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683a:	b29a      	uxth	r2, r3
 800683c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006840:	801a      	strh	r2, [r3, #0]
 8006842:	e074      	b.n	800692e <USB_EPStartXfer+0x1040>
 8006844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d116      	bne.n	8006882 <USB_EPStartXfer+0xf94>
 8006854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006878:	b29a      	uxth	r2, r3
 800687a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	e055      	b.n	800692e <USB_EPStartXfer+0x1040>
 8006882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <USB_EPStartXfer+0xfc4>
 80068a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ac:	3301      	adds	r3, #1
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e034      	b.n	800692e <USB_EPStartXfer+0x1040>
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d12c      	bne.n	800692e <USB_EPStartXfer+0x1040>
 80068d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068f8:	4413      	add	r3, r2
 80068fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	00da      	lsls	r2, r3, #3
 800690c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006910:	4413      	add	r3, r2
 8006912:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800691a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	b29a      	uxth	r2, r3
 8006928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f040 8091 	bne.w	8006a70 <USB_EPStartXfer+0x1182>
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006972:	4413      	add	r3, r2
 8006974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	00da      	lsls	r2, r3, #3
 8006986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800698a:	4413      	add	r3, r2
 800698c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b3e      	cmp	r3, #62	; 0x3e
 80069a2:	d925      	bls.n	80069f0 <USB_EPStartXfer+0x1102>
 80069a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d104      	bne.n	80069d4 <USB_EPStartXfer+0x10e6>
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ce:	3b01      	subs	r3, #1
 80069d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d8:	b29b      	uxth	r3, r3
 80069da:	029b      	lsls	r3, r3, #10
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	e06d      	b.n	8006acc <USB_EPStartXfer+0x11de>
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d116      	bne.n	8006a2e <USB_EPStartXfer+0x1140>
 8006a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a2a:	801a      	strh	r2, [r3, #0]
 8006a2c:	e04e      	b.n	8006acc <USB_EPStartXfer+0x11de>
 8006a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	085b      	lsrs	r3, r3, #1
 8006a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d004      	beq.n	8006a5e <USB_EPStartXfer+0x1170>
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a58:	3301      	adds	r3, #1
 8006a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a6c:	801a      	strh	r2, [r3, #0]
 8006a6e:	e02d      	b.n	8006acc <USB_EPStartXfer+0x11de>
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d125      	bne.n	8006acc <USB_EPStartXfer+0x11de>
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a96:	4413      	add	r3, r2
 8006a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	00da      	lsls	r2, r3, #3
 8006aaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aae:	4413      	add	r3, r2
 8006ab0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aca:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 81fe 	beq.w	8006eda <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006afe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <USB_EPStartXfer+0x1228>
 8006b0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10d      	bne.n	8006b32 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 81db 	bne.w	8006eda <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 81d4 	bne.w	8006eda <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
 8006b8e:	e1a4      	b.n	8006eda <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	78db      	ldrb	r3, [r3, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 819a 	bne.w	8006ed6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d917      	bls.n	8006bee <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	619a      	str	r2, [r3, #24]
 8006bec:	e00e      	b.n	8006c0c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d178      	bne.n	8006d0e <USB_EPStartXfer+0x1420>
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c40:	4413      	add	r3, r2
 8006c42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	00da      	lsls	r2, r3, #3
 8006c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c58:	4413      	add	r3, r2
 8006c5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c66:	2b3e      	cmp	r3, #62	; 0x3e
 8006c68:	d91d      	bls.n	8006ca6 <USB_EPStartXfer+0x13b8>
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <USB_EPStartXfer+0x139c>
 8006c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e064      	b.n	8006d70 <USB_EPStartXfer+0x1482>
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d116      	bne.n	8006cdc <USB_EPStartXfer+0x13ee>
 8006cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	e049      	b.n	8006d70 <USB_EPStartXfer+0x1482>
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <USB_EPStartXfer+0x140e>
 8006cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	029b      	lsls	r3, r3, #10
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	e030      	b.n	8006d70 <USB_EPStartXfer+0x1482>
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d128      	bne.n	8006d70 <USB_EPStartXfer+0x1482>
 8006d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d42:	4413      	add	r3, r2
 8006d44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	00da      	lsls	r2, r3, #3
 8006d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d178      	bne.n	8006e80 <USB_EPStartXfer+0x1592>
 8006d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006db2:	4413      	add	r3, r2
 8006db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	00da      	lsls	r2, r3, #3
 8006dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dca:	4413      	add	r3, r2
 8006dcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8006dda:	d91d      	bls.n	8006e18 <USB_EPStartXfer+0x152a>
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <USB_EPStartXfer+0x150e>
 8006df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df6:	3b01      	subs	r3, #1
 8006df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	029b      	lsls	r3, r3, #10
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e060      	b.n	8006eda <USB_EPStartXfer+0x15ec>
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d116      	bne.n	8006e4e <USB_EPStartXfer+0x1560>
 8006e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e045      	b.n	8006eda <USB_EPStartXfer+0x15ec>
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <USB_EPStartXfer+0x1580>
 8006e64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	029b      	lsls	r3, r3, #10
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7c:	801a      	strh	r2, [r3, #0]
 8006e7e:	e02c      	b.n	8006eda <USB_EPStartXfer+0x15ec>
 8006e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d124      	bne.n	8006eda <USB_EPStartXfer+0x15ec>
 8006e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	00da      	lsls	r2, r3, #3
 8006eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e001      	b.n	8006eda <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e03a      	b.n	8006f50 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f82:	81bb      	strh	r3, [r7, #12]
 8006f84:	89bb      	ldrh	r3, [r7, #12]
 8006f86:	f083 0310 	eor.w	r3, r3, #16
 8006f8a:	81bb      	strh	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	89bb      	ldrh	r3, [r7, #12]
 8006f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8013      	strh	r3, [r2, #0]
 8006fac:	e01f      	b.n	8006fee <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	81fb      	strh	r3, [r7, #14]
 8006fc6:	89fb      	ldrh	r3, [r7, #14]
 8006fc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fcc:	81fb      	strh	r3, [r7, #14]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	441a      	add	r2, r3
 8006fd8:	89fb      	ldrh	r3, [r7, #14]
 8006fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	7b1b      	ldrb	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 809d 	bne.w	800714a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d04c      	beq.n	80070b2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	823b      	strh	r3, [r7, #16]
 8007026:	8a3b      	ldrh	r3, [r7, #16]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01b      	beq.n	8007068 <USB_EPClearStall+0x6c>
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	b29b      	uxth	r3, r3
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	81fb      	strh	r3, [r7, #14]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	89fb      	ldrh	r3, [r7, #14]
 8007054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007064:	b29b      	uxth	r3, r3
 8007066:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	78db      	ldrb	r3, [r3, #3]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d06c      	beq.n	800714a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007086:	81bb      	strh	r3, [r7, #12]
 8007088:	89bb      	ldrh	r3, [r7, #12]
 800708a:	f083 0320 	eor.w	r3, r3, #32
 800708e:	81bb      	strh	r3, [r7, #12]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	89bb      	ldrh	r3, [r7, #12]
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]
 80070b0:	e04b      	b.n	800714a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	82fb      	strh	r3, [r7, #22]
 80070c0:	8afb      	ldrh	r3, [r7, #22]
 80070c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01b      	beq.n	8007102 <USB_EPClearStall+0x106>
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e0:	82bb      	strh	r3, [r7, #20]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	8abb      	ldrh	r3, [r7, #20]
 80070ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007118:	827b      	strh	r3, [r7, #18]
 800711a:	8a7b      	ldrh	r3, [r7, #18]
 800711c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007120:	827b      	strh	r3, [r7, #18]
 8007122:	8a7b      	ldrh	r3, [r7, #18]
 8007124:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007128:	827b      	strh	r3, [r7, #18]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	8a7b      	ldrh	r3, [r7, #18]
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	371c      	adds	r7, #28
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d103      	bne.n	8007172 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2280      	movs	r2, #128	; 0x80
 800716e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071bc:	b29b      	uxth	r3, r3
 80071be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b08d      	sub	sp, #52	; 0x34
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	4611      	mov	r1, r2
 80071da:	461a      	mov	r2, r3
 80071dc:	460b      	mov	r3, r1
 80071de:	80fb      	strh	r3, [r7, #6]
 80071e0:	4613      	mov	r3, r2
 80071e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071e4:	88bb      	ldrh	r3, [r7, #4]
 80071e6:	3301      	adds	r3, #1
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007204:	e01b      	b.n	800723e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	3301      	adds	r3, #1
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	b29a      	uxth	r2, r3
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	3302      	adds	r3, #2
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	3301      	adds	r3, #1
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	3b01      	subs	r3, #1
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e0      	bne.n	8007206 <USB_WritePMA+0x38>
  }
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	3734      	adds	r7, #52	; 0x34
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007252:	b480      	push	{r7}
 8007254:	b08b      	sub	sp, #44	; 0x2c
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	4611      	mov	r1, r2
 800725e:	461a      	mov	r2, r3
 8007260:	460b      	mov	r3, r1
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	4613      	mov	r3, r2
 8007266:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007268:	88bb      	ldrh	r3, [r7, #4]
 800726a:	085b      	lsrs	r3, r3, #1
 800726c:	b29b      	uxth	r3, r3
 800726e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007278:	88fa      	ldrh	r2, [r7, #6]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007282:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
 8007288:	e018      	b.n	80072bc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	3302      	adds	r3, #2
 8007296:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	3301      	adds	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	0a1b      	lsrs	r3, r3, #8
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	3b01      	subs	r3, #1
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e3      	bne.n	800728a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80072c2:	88bb      	ldrh	r3, [r7, #4]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	701a      	strb	r2, [r3, #0]
  }
}
 80072de:	bf00      	nop
 80072e0:	372c      	adds	r7, #44	; 0x2c
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072f6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072fa:	f002 f8a7 	bl	800944c <USBD_static_malloc>
 80072fe:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d105      	bne.n	8007312 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800730e:	2302      	movs	r3, #2
 8007310:	e066      	b.n	80073e0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7c1b      	ldrb	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d119      	bne.n	8007356 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007326:	2202      	movs	r2, #2
 8007328:	2181      	movs	r1, #129	; 0x81
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 ff33 	bl	8009196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800733a:	2202      	movs	r2, #2
 800733c:	2101      	movs	r1, #1
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 ff29 	bl	8009196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2210      	movs	r2, #16
 8007350:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007354:	e016      	b.n	8007384 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007356:	2340      	movs	r3, #64	; 0x40
 8007358:	2202      	movs	r2, #2
 800735a:	2181      	movs	r1, #129	; 0x81
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 ff1a 	bl	8009196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	2202      	movs	r2, #2
 800736c:	2101      	movs	r1, #1
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 ff11 	bl	8009196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2210      	movs	r2, #16
 8007380:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007384:	2308      	movs	r3, #8
 8007386:	2203      	movs	r2, #3
 8007388:	2182      	movs	r1, #130	; 0x82
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 ff03 	bl	8009196 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	7c1b      	ldrb	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c4:	2101      	movs	r1, #1
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 ffd5 	bl	8009376 <USBD_LL_PrepareReceive>
 80073cc:	e007      	b.n	80073de <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d4:	2340      	movs	r3, #64	; 0x40
 80073d6:	2101      	movs	r1, #1
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 ffcc 	bl	8009376 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073f4:	2181      	movs	r1, #129	; 0x81
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fef3 	bl	80091e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007402:	2101      	movs	r1, #1
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 feec 	bl	80091e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007412:	2182      	movs	r1, #130	; 0x82
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fee4 	bl	80091e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00e      	beq.n	8007452 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007444:	4618      	mov	r0, r3
 8007446:	f002 f80f 	bl	8009468 <USBD_static_free>
    pdev->pClassData = NULL;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800746c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	e0af      	b.n	80075e4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748c:	2b00      	cmp	r3, #0
 800748e:	d03f      	beq.n	8007510 <USBD_CDC_Setup+0xb4>
 8007490:	2b20      	cmp	r3, #32
 8007492:	f040 809f 	bne.w	80075d4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88db      	ldrh	r3, [r3, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d02e      	beq.n	80074fc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b25b      	sxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da16      	bge.n	80074d6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80074b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	88d2      	ldrh	r2, [r2, #6]
 80074ba:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	88db      	ldrh	r3, [r3, #6]
 80074c0:	2b07      	cmp	r3, #7
 80074c2:	bf28      	it	cs
 80074c4:	2307      	movcs	r3, #7
 80074c6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	89fa      	ldrh	r2, [r7, #14]
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fa9f 	bl	8008a12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80074d4:	e085      	b.n	80075e2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	785a      	ldrb	r2, [r3, #1]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	88db      	ldrh	r3, [r3, #6]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074ec:	6939      	ldr	r1, [r7, #16]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	88db      	ldrh	r3, [r3, #6]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 fab8 	bl	8008a6a <USBD_CtlPrepareRx>
      break;
 80074fa:	e072      	b.n	80075e2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	7850      	ldrb	r0, [r2, #1]
 8007508:	2200      	movs	r2, #0
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	4798      	blx	r3
      break;
 800750e:	e068      	b.n	80075e2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b0b      	cmp	r3, #11
 8007516:	d852      	bhi.n	80075be <USBD_CDC_Setup+0x162>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <USBD_CDC_Setup+0xc4>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007551 	.word	0x08007551
 8007524:	080075cd 	.word	0x080075cd
 8007528:	080075bf 	.word	0x080075bf
 800752c:	080075bf 	.word	0x080075bf
 8007530:	080075bf 	.word	0x080075bf
 8007534:	080075bf 	.word	0x080075bf
 8007538:	080075bf 	.word	0x080075bf
 800753c:	080075bf 	.word	0x080075bf
 8007540:	080075bf 	.word	0x080075bf
 8007544:	080075bf 	.word	0x080075bf
 8007548:	0800757b 	.word	0x0800757b
 800754c:	080075a5 	.word	0x080075a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b03      	cmp	r3, #3
 800755a:	d107      	bne.n	800756c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800755c:	f107 030a 	add.w	r3, r7, #10
 8007560:	2202      	movs	r2, #2
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 fa54 	bl	8008a12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800756a:	e032      	b.n	80075d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f9de 	bl	8008930 <USBD_CtlError>
            ret = USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	75fb      	strb	r3, [r7, #23]
          break;
 8007578:	e02b      	b.n	80075d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b03      	cmp	r3, #3
 8007584:	d107      	bne.n	8007596 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007586:	f107 030d 	add.w	r3, r7, #13
 800758a:	2201      	movs	r2, #1
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fa3f 	bl	8008a12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007594:	e01d      	b.n	80075d2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f001 f9c9 	bl	8008930 <USBD_CtlError>
            ret = USBD_FAIL;
 800759e:	2303      	movs	r3, #3
 80075a0:	75fb      	strb	r3, [r7, #23]
          break;
 80075a2:	e016      	b.n	80075d2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d00f      	beq.n	80075d0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 f9bc 	bl	8008930 <USBD_CtlError>
            ret = USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075bc:	e008      	b.n	80075d0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f9b5 	bl	8008930 <USBD_CtlError>
          ret = USBD_FAIL;
 80075c6:	2303      	movs	r3, #3
 80075c8:	75fb      	strb	r3, [r7, #23]
          break;
 80075ca:	e002      	b.n	80075d2 <USBD_CDC_Setup+0x176>
          break;
 80075cc:	bf00      	nop
 80075ce:	e008      	b.n	80075e2 <USBD_CDC_Setup+0x186>
          break;
 80075d0:	bf00      	nop
      }
      break;
 80075d2:	e006      	b.n	80075e2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f9aa 	bl	8008930 <USBD_CtlError>
      ret = USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	75fb      	strb	r3, [r7, #23]
      break;
 80075e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800760a:	2303      	movs	r3, #3
 800760c:	e04f      	b.n	80076ae <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007614:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	3318      	adds	r3, #24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d029      	beq.n	8007680 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	3318      	adds	r3, #24
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	78f9      	ldrb	r1, [r7, #3]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	460b      	mov	r3, r1
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	4403      	add	r3, r0
 800764c:	3338      	adds	r3, #56	; 0x38
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	fbb2 f1f3 	udiv	r1, r2, r3
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800765a:	2b00      	cmp	r3, #0
 800765c:	d110      	bne.n	8007680 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	3318      	adds	r3, #24
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007672:	78f9      	ldrb	r1, [r7, #3]
 8007674:	2300      	movs	r3, #0
 8007676:	2200      	movs	r2, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 fe5b 	bl	8009334 <USBD_LL_Transmit>
 800767e:	e015      	b.n	80076ac <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e015      	b.n	8007704 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fe6b 	bl	80093b8 <USBD_LL_GetRxDataSize>
 80076e2:	4602      	mov	r2, r0
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076fe:	4611      	mov	r1, r2
 8007700:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007722:	2303      	movs	r3, #3
 8007724:	e01b      	b.n	800775e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d015      	beq.n	800775c <USBD_CDC_EP0_RxReady+0x50>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007736:	2bff      	cmp	r3, #255	; 0xff
 8007738:	d010      	beq.n	800775c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007748:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007750:	b292      	uxth	r2, r2
 8007752:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	22ff      	movs	r2, #255	; 0xff
 8007758:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2243      	movs	r2, #67	; 0x43
 8007774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20000094 	.word	0x20000094

08007788 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2243      	movs	r2, #67	; 0x43
 8007794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007796:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	20000050 	.word	0x20000050

080077a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2243      	movs	r2, #67	; 0x43
 80077b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80077b6:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	200000d8 	.word	0x200000d8

080077c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	220a      	movs	r2, #10
 80077d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80077d6:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	2000000c 	.word	0x2000000c

080077e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e004      	b.n	8007806 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007812:	b480      	push	{r7}
 8007814:	b087      	sub	sp, #28
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007824:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	e008      	b.n	8007842 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007866:	2303      	movs	r3, #3
 8007868:	e004      	b.n	8007874 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800788e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	e016      	b.n	80078cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7c1b      	ldrb	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b0:	2101      	movs	r1, #1
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 fd5f 	bl	8009376 <USBD_LL_PrepareReceive>
 80078b8:	e007      	b.n	80078ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c0:	2340      	movs	r3, #64	; 0x40
 80078c2:	2101      	movs	r1, #1
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fd56 	bl	8009376 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e01f      	b.n	800792c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	79fa      	ldrb	r2, [r7, #7]
 800791e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f001 fbbd 	bl	80090a0 <USBD_LL_Init>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800792a:	7dfb      	ldrb	r3, [r7, #23]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	e016      	b.n	800797a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	f107 020e 	add.w	r2, r7, #14
 800796c:	4610      	mov	r0, r2
 800796e:	4798      	blx	r3
 8007970:	4602      	mov	r2, r0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fbe8 	bl	8009160 <USBD_LL_Start>
 8007990:	4603      	mov	r3, r0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	4611      	mov	r1, r2
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
  }

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 ff46 	bl	80088bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d01a      	beq.n	8007a8a <USBD_LL_SetupStage+0x72>
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d822      	bhi.n	8007a9e <USBD_LL_SetupStage+0x86>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <USBD_LL_SetupStage+0x4a>
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d00a      	beq.n	8007a76 <USBD_LL_SetupStage+0x5e>
 8007a60:	e01d      	b.n	8007a9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9ee 	bl	8007e4c <USBD_StdDevReq>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
      break;
 8007a74:	e020      	b.n	8007ab8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa52 	bl	8007f28 <USBD_StdItfReq>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	e016      	b.n	8007ab8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa91 	bl	8007fba <USBD_StdEPReq>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9c:	e00c      	b.n	8007ab8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fbb7 	bl	8009220 <USBD_LL_StallEP>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab6:	bf00      	nop
  }

  return ret;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b086      	sub	sp, #24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	460b      	mov	r3, r1
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d138      	bne.n	8007b48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007adc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d14a      	bne.n	8007b7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d913      	bls.n	8007b1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	1ad2      	subs	r2, r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	bf28      	it	cs
 8007b0e:	4613      	movcs	r3, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 ffc5 	bl	8008aa4 <USBD_CtlContinueRx>
 8007b1a:	e030      	b.n	8007b7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d10b      	bne.n	8007b40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 ffc0 	bl	8008ac6 <USBD_CtlSendStatus>
 8007b46:	e01a      	b.n	8007b7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d114      	bne.n	8007b7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	7afa      	ldrb	r2, [r7, #11]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	4798      	blx	r3
 8007b70:	4603      	mov	r3, r0
 8007b72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	e000      	b.n	8007b80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	460b      	mov	r3, r1
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d16b      	bne.n	8007c74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3314      	adds	r3, #20
 8007ba0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d156      	bne.n	8007c5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d914      	bls.n	8007be2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	1ad2      	subs	r2, r2, r3
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 ff3a 	bl	8008a48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2100      	movs	r1, #0
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f001 fbcb 	bl	8009376 <USBD_LL_PrepareReceive>
 8007be0:	e03b      	b.n	8007c5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d11c      	bne.n	8007c28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d316      	bcc.n	8007c28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d20f      	bcs.n	8007c28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 ff1b 	bl	8008a48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2100      	movs	r1, #0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f001 fba8 	bl	8009376 <USBD_LL_PrepareReceive>
 8007c26:	e018      	b.n	8007c5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d10b      	bne.n	8007c4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c4c:	2180      	movs	r1, #128	; 0x80
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f001 fae6 	bl	8009220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 ff49 	bl	8008aec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d122      	bne.n	8007caa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff fe98 	bl	800799a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c72:	e01a      	b.n	8007caa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d114      	bne.n	8007caa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00e      	beq.n	8007caa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	7afa      	ldrb	r2, [r7, #11]
 8007c96:	4611      	mov	r1, r2
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	4798      	blx	r3
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	e000      	b.n	8007cac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e02f      	b.n	8007d48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00f      	beq.n	8007d12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6852      	ldr	r2, [r2, #4]
 8007d0a:	b2d2      	uxtb	r2, r2
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d12:	2340      	movs	r3, #64	; 0x40
 8007d14:	2200      	movs	r2, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fa3c 	bl	8009196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2240      	movs	r2, #64	; 0x40
 8007d2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d2e:	2340      	movs	r3, #64	; 0x40
 8007d30:	2200      	movs	r2, #0
 8007d32:	2180      	movs	r1, #128	; 0x80
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fa2e 	bl	8009196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2240      	movs	r2, #64	; 0x40
 8007d44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	78fa      	ldrb	r2, [r7, #3]
 8007d60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2204      	movs	r2, #4
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d106      	bne.n	8007dbe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e012      	b.n	8007e08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d10b      	bne.n	8007e06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	3301      	adds	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e2e:	8a3b      	ldrh	r3, [r7, #16]
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	b21a      	sxth	r2, r3
 8007e34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b21b      	sxth	r3, r3
 8007e3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d005      	beq.n	8007e72 <USBD_StdDevReq+0x26>
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d853      	bhi.n	8007f12 <USBD_StdDevReq+0xc6>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <USBD_StdDevReq+0x3a>
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d14f      	bne.n	8007f12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]
      break;
 8007e84:	e04a      	b.n	8007f1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d83b      	bhi.n	8007f06 <USBD_StdDevReq+0xba>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USBD_StdDevReq+0x48>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ee9 	.word	0x08007ee9
 8007e98:	08007efd 	.word	0x08007efd
 8007e9c:	08007f07 	.word	0x08007f07
 8007ea0:	08007ef3 	.word	0x08007ef3
 8007ea4:	08007f07 	.word	0x08007f07
 8007ea8:	08007ec7 	.word	0x08007ec7
 8007eac:	08007ebd 	.word	0x08007ebd
 8007eb0:	08007f07 	.word	0x08007f07
 8007eb4:	08007edf 	.word	0x08007edf
 8007eb8:	08007ed1 	.word	0x08007ed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f9de 	bl	8008280 <USBD_GetDescriptor>
          break;
 8007ec4:	e024      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fb6d 	bl	80085a8 <USBD_SetAddress>
          break;
 8007ece:	e01f      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fbac 	bl	8008630 <USBD_SetConfig>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
          break;
 8007edc:	e018      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc4b 	bl	800877c <USBD_GetConfig>
          break;
 8007ee6:	e013      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fc7c 	bl	80087e8 <USBD_GetStatus>
          break;
 8007ef0:	e00e      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fcab 	bl	8008850 <USBD_SetFeature>
          break;
 8007efa:	e009      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fcba 	bl	8008878 <USBD_ClrFeature>
          break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fd11 	bl	8008930 <USBD_CtlError>
          break;
 8007f0e:	bf00      	nop
      }
      break;
 8007f10:	e004      	b.n	8007f1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fd0b 	bl	8008930 <USBD_CtlError>
      break;
 8007f1a:	bf00      	nop
  }

  return ret;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop

08007f28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d005      	beq.n	8007f4e <USBD_StdItfReq+0x26>
 8007f42:	2b40      	cmp	r3, #64	; 0x40
 8007f44:	d82f      	bhi.n	8007fa6 <USBD_StdItfReq+0x7e>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <USBD_StdItfReq+0x26>
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d12b      	bne.n	8007fa6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d81d      	bhi.n	8007f98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	889b      	ldrh	r3, [r3, #4]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d813      	bhi.n	8007f8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	88db      	ldrh	r3, [r3, #6]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d110      	bne.n	8007fa2 <USBD_StdItfReq+0x7a>
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10d      	bne.n	8007fa2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fd9d 	bl	8008ac6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f8c:	e009      	b.n	8007fa2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fccd 	bl	8008930 <USBD_CtlError>
          break;
 8007f96:	e004      	b.n	8007fa2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fcc8 	bl	8008930 <USBD_CtlError>
          break;
 8007fa0:	e000      	b.n	8007fa4 <USBD_StdItfReq+0x7c>
          break;
 8007fa2:	bf00      	nop
      }
      break;
 8007fa4:	e004      	b.n	8007fb0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fcc1 	bl	8008930 <USBD_CtlError>
      break;
 8007fae:	bf00      	nop
  }

  return ret;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	889b      	ldrh	r3, [r3, #4]
 8007fcc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d007      	beq.n	8007fea <USBD_StdEPReq+0x30>
 8007fda:	2b40      	cmp	r3, #64	; 0x40
 8007fdc:	f200 8145 	bhi.w	800826a <USBD_StdEPReq+0x2b0>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00c      	beq.n	8007ffe <USBD_StdEPReq+0x44>
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	f040 8140 	bne.w	800826a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffc:	e13a      	b.n	8008274 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b03      	cmp	r3, #3
 8008004:	d007      	beq.n	8008016 <USBD_StdEPReq+0x5c>
 8008006:	2b03      	cmp	r3, #3
 8008008:	f300 8129 	bgt.w	800825e <USBD_StdEPReq+0x2a4>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d07f      	beq.n	8008110 <USBD_StdEPReq+0x156>
 8008010:	2b01      	cmp	r3, #1
 8008012:	d03c      	beq.n	800808e <USBD_StdEPReq+0xd4>
 8008014:	e123      	b.n	800825e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d002      	beq.n	8008028 <USBD_StdEPReq+0x6e>
 8008022:	2b03      	cmp	r3, #3
 8008024:	d016      	beq.n	8008054 <USBD_StdEPReq+0x9a>
 8008026:	e02c      	b.n	8008082 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00d      	beq.n	800804a <USBD_StdEPReq+0x90>
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d00a      	beq.n	800804a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f8f1 	bl	8009220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f8ed 	bl	8009220 <USBD_LL_StallEP>
 8008046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008048:	e020      	b.n	800808c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fc6f 	bl	8008930 <USBD_CtlError>
              break;
 8008052:	e01b      	b.n	800808c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	885b      	ldrh	r3, [r3, #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10e      	bne.n	800807a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <USBD_StdEPReq+0xc0>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d008      	beq.n	800807a <USBD_StdEPReq+0xc0>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f8d3 	bl	8009220 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fd23 	bl	8008ac6 <USBD_CtlSendStatus>

              break;
 8008080:	e004      	b.n	800808c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fc53 	bl	8008930 <USBD_CtlError>
              break;
 800808a:	bf00      	nop
          }
          break;
 800808c:	e0ec      	b.n	8008268 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d002      	beq.n	80080a0 <USBD_StdEPReq+0xe6>
 800809a:	2b03      	cmp	r3, #3
 800809c:	d016      	beq.n	80080cc <USBD_StdEPReq+0x112>
 800809e:	e030      	b.n	8008102 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00d      	beq.n	80080c2 <USBD_StdEPReq+0x108>
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d00a      	beq.n	80080c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f8b5 	bl	8009220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 f8b1 	bl	8009220 <USBD_LL_StallEP>
 80080be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c0:	e025      	b.n	800810e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fc33 	bl	8008930 <USBD_CtlError>
              break;
 80080ca:	e020      	b.n	800810e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	885b      	ldrh	r3, [r3, #2]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11b      	bne.n	800810c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 f8bb 	bl	800925e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fcec 	bl	8008ac6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008100:	e004      	b.n	800810c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc13 	bl	8008930 <USBD_CtlError>
              break;
 800810a:	e000      	b.n	800810e <USBD_StdEPReq+0x154>
              break;
 800810c:	bf00      	nop
          }
          break;
 800810e:	e0ab      	b.n	8008268 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d002      	beq.n	8008122 <USBD_StdEPReq+0x168>
 800811c:	2b03      	cmp	r3, #3
 800811e:	d032      	beq.n	8008186 <USBD_StdEPReq+0x1cc>
 8008120:	e097      	b.n	8008252 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d007      	beq.n	8008138 <USBD_StdEPReq+0x17e>
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b80      	cmp	r3, #128	; 0x80
 800812c:	d004      	beq.n	8008138 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fbfd 	bl	8008930 <USBD_CtlError>
                break;
 8008136:	e091      	b.n	800825c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	da0b      	bge.n	8008158 <USBD_StdEPReq+0x19e>
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	3310      	adds	r3, #16
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	4413      	add	r3, r2
 8008154:	3304      	adds	r3, #4
 8008156:	e00b      	b.n	8008170 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	4413      	add	r3, r2
 800816e:	3304      	adds	r3, #4
 8008170:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2202      	movs	r2, #2
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fc47 	bl	8008a12 <USBD_CtlSendData>
              break;
 8008184:	e06a      	b.n	800825c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800818a:	2b00      	cmp	r3, #0
 800818c:	da11      	bge.n	80081b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	f003 020f 	and.w	r2, r3, #15
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	4613      	mov	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	3324      	adds	r3, #36	; 0x24
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d117      	bne.n	80081d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fbc0 	bl	8008930 <USBD_CtlError>
                  break;
 80081b0:	e054      	b.n	800825c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	f003 020f 	and.w	r2, r3, #15
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fbad 	bl	8008930 <USBD_CtlError>
                  break;
 80081d6:	e041      	b.n	800825c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	da0b      	bge.n	80081f8 <USBD_StdEPReq+0x23e>
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	3310      	adds	r3, #16
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4413      	add	r3, r2
 80081f4:	3304      	adds	r3, #4
 80081f6:	e00b      	b.n	8008210 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081fe:	4613      	mov	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	4413      	add	r3, r2
 800820e:	3304      	adds	r3, #4
 8008210:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <USBD_StdEPReq+0x264>
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b80      	cmp	r3, #128	; 0x80
 800821c:	d103      	bne.n	8008226 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	e00e      	b.n	8008244 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 f836 	bl	800929c <USBD_LL_IsStallEP>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2201      	movs	r2, #1
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	e002      	b.n	8008244 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2202      	movs	r2, #2
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fbe1 	bl	8008a12 <USBD_CtlSendData>
              break;
 8008250:	e004      	b.n	800825c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fb6b 	bl	8008930 <USBD_CtlError>
              break;
 800825a:	bf00      	nop
          }
          break;
 800825c:	e004      	b.n	8008268 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fb65 	bl	8008930 <USBD_CtlError>
          break;
 8008266:	bf00      	nop
      }
      break;
 8008268:	e004      	b.n	8008274 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fb5f 	bl	8008930 <USBD_CtlError>
      break;
 8008272:	bf00      	nop
  }

  return ret;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b0e      	cmp	r3, #14
 80082a2:	f200 8152 	bhi.w	800854a <USBD_GetDescriptor+0x2ca>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <USBD_GetDescriptor+0x2c>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	0800831d 	.word	0x0800831d
 80082b0:	08008335 	.word	0x08008335
 80082b4:	08008375 	.word	0x08008375
 80082b8:	0800854b 	.word	0x0800854b
 80082bc:	0800854b 	.word	0x0800854b
 80082c0:	080084eb 	.word	0x080084eb
 80082c4:	08008517 	.word	0x08008517
 80082c8:	0800854b 	.word	0x0800854b
 80082cc:	0800854b 	.word	0x0800854b
 80082d0:	0800854b 	.word	0x0800854b
 80082d4:	0800854b 	.word	0x0800854b
 80082d8:	0800854b 	.word	0x0800854b
 80082dc:	0800854b 	.word	0x0800854b
 80082e0:	0800854b 	.word	0x0800854b
 80082e4:	080082e9 	.word	0x080082e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800830a:	e126      	b.n	800855a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb0e 	bl	8008930 <USBD_CtlError>
        err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
      break;
 800831a:	e11e      	b.n	800855a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
      break;
 8008332:	e112      	b.n	800855a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7c1b      	ldrb	r3, [r3, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	f107 0208 	add.w	r2, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008356:	e100      	b.n	800855a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	f107 0208 	add.w	r2, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	2202      	movs	r2, #2
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e0f2      	b.n	800855a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b05      	cmp	r3, #5
 800837c:	f200 80ac 	bhi.w	80084d8 <USBD_GetDescriptor+0x258>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBD_GetDescriptor+0x108>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083d5 	.word	0x080083d5
 8008390:	08008409 	.word	0x08008409
 8008394:	0800843d 	.word	0x0800843d
 8008398:	08008471 	.word	0x08008471
 800839c:	080084a5 	.word	0x080084a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c2:	e091      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fab2 	bl	8008930 <USBD_CtlError>
            err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
          break;
 80083d2:	e089      	b.n	80084e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f6:	e077      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa98 	bl	8008930 <USBD_CtlError>
            err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
          break;
 8008406:	e06f      	b.n	80084e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7c12      	ldrb	r2, [r2, #16]
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842a:	e05d      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa7e 	bl	8008930 <USBD_CtlError>
            err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
          break;
 800843a:	e055      	b.n	80084e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	7c12      	ldrb	r2, [r2, #16]
 8008454:	f107 0108 	add.w	r1, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845e:	e043      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa64 	bl	8008930 <USBD_CtlError>
            err++;
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	3301      	adds	r3, #1
 800846c:	72fb      	strb	r3, [r7, #11]
          break;
 800846e:	e03b      	b.n	80084e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7c12      	ldrb	r2, [r2, #16]
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008492:	e029      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa4a 	bl	8008930 <USBD_CtlError>
            err++;
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	3301      	adds	r3, #1
 80084a0:	72fb      	strb	r3, [r7, #11]
          break;
 80084a2:	e021      	b.n	80084e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	7c12      	ldrb	r2, [r2, #16]
 80084bc:	f107 0108 	add.w	r1, r7, #8
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
 80084c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c6:	e00f      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fa30 	bl	8008930 <USBD_CtlError>
            err++;
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	3301      	adds	r3, #1
 80084d4:	72fb      	strb	r3, [r7, #11]
          break;
 80084d6:	e007      	b.n	80084e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa28 	bl	8008930 <USBD_CtlError>
          err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80084e6:	bf00      	nop
      }
      break;
 80084e8:	e037      	b.n	800855a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	7c1b      	ldrb	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d109      	bne.n	8008506 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f107 0208 	add.w	r2, r7, #8
 80084fe:	4610      	mov	r0, r2
 8008500:	4798      	blx	r3
 8008502:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008504:	e029      	b.n	800855a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fa11 	bl	8008930 <USBD_CtlError>
        err++;
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	3301      	adds	r3, #1
 8008512:	72fb      	strb	r3, [r7, #11]
      break;
 8008514:	e021      	b.n	800855a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	7c1b      	ldrb	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10d      	bne.n	800853a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f107 0208 	add.w	r2, r7, #8
 800852a:	4610      	mov	r0, r2
 800852c:	4798      	blx	r3
 800852e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	2207      	movs	r2, #7
 8008536:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008538:	e00f      	b.n	800855a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f9f7 	bl	8008930 <USBD_CtlError>
        err++;
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	3301      	adds	r3, #1
 8008546:	72fb      	strb	r3, [r7, #11]
      break;
 8008548:	e007      	b.n	800855a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f9ef 	bl	8008930 <USBD_CtlError>
      err++;
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	3301      	adds	r3, #1
 8008556:	72fb      	strb	r3, [r7, #11]
      break;
 8008558:	bf00      	nop
  }

  if (err != 0U)
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11e      	bne.n	800859e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	88db      	ldrh	r3, [r3, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d016      	beq.n	8008596 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008568:	893b      	ldrh	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00e      	beq.n	800858c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	88da      	ldrh	r2, [r3, #6]
 8008572:	893b      	ldrh	r3, [r7, #8]
 8008574:	4293      	cmp	r3, r2
 8008576:	bf28      	it	cs
 8008578:	4613      	movcs	r3, r2
 800857a:	b29b      	uxth	r3, r3
 800857c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800857e:	893b      	ldrh	r3, [r7, #8]
 8008580:	461a      	mov	r2, r3
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa44 	bl	8008a12 <USBD_CtlSendData>
 800858a:	e009      	b.n	80085a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f9ce 	bl	8008930 <USBD_CtlError>
 8008594:	e004      	b.n	80085a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa95 	bl	8008ac6 <USBD_CtlSendStatus>
 800859c:	e000      	b.n	80085a0 <USBD_GetDescriptor+0x320>
    return;
 800859e:	bf00      	nop
  }
}
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop

080085a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	889b      	ldrh	r3, [r3, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d131      	bne.n	800861e <USBD_SetAddress+0x76>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	88db      	ldrh	r3, [r3, #6]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d12d      	bne.n	800861e <USBD_SetAddress+0x76>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	885b      	ldrh	r3, [r3, #2]
 80085c6:	2b7f      	cmp	r3, #127	; 0x7f
 80085c8:	d829      	bhi.n	800861e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d104      	bne.n	80085ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f9a3 	bl	8008930 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	e01d      	b.n	8008628 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7bfa      	ldrb	r2, [r7, #15]
 80085f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fe7c 	bl	80092f6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa61 	bl	8008ac6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008612:	e009      	b.n	8008628 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861c:	e004      	b.n	8008628 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f985 	bl	8008930 <USBD_CtlError>
  }
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	b2da      	uxtb	r2, r3
 8008644:	4b4c      	ldr	r3, [pc, #304]	; (8008778 <USBD_SetConfig+0x148>)
 8008646:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008648:	4b4b      	ldr	r3, [pc, #300]	; (8008778 <USBD_SetConfig+0x148>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d905      	bls.n	800865c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f96c 	bl	8008930 <USBD_CtlError>
    return USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e088      	b.n	800876e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d002      	beq.n	800866e <USBD_SetConfig+0x3e>
 8008668:	2b03      	cmp	r3, #3
 800866a:	d025      	beq.n	80086b8 <USBD_SetConfig+0x88>
 800866c:	e071      	b.n	8008752 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800866e:	4b42      	ldr	r3, [pc, #264]	; (8008778 <USBD_SetConfig+0x148>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d01c      	beq.n	80086b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008676:	4b40      	ldr	r3, [pc, #256]	; (8008778 <USBD_SetConfig+0x148>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008680:	4b3d      	ldr	r3, [pc, #244]	; (8008778 <USBD_SetConfig+0x148>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff f992 	bl	80079b0 <USBD_SetClassConfig>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f949 	bl	8008930 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800869e:	e065      	b.n	800876c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fa10 	bl	8008ac6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2203      	movs	r2, #3
 80086aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086ae:	e05d      	b.n	800876c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa08 	bl	8008ac6 <USBD_CtlSendStatus>
      break;
 80086b6:	e059      	b.n	800876c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086b8:	4b2f      	ldr	r3, [pc, #188]	; (8008778 <USBD_SetConfig+0x148>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d112      	bne.n	80086e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086c8:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <USBD_SetConfig+0x148>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086d2:	4b29      	ldr	r3, [pc, #164]	; (8008778 <USBD_SetConfig+0x148>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff f985 	bl	80079e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f9f1 	bl	8008ac6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086e4:	e042      	b.n	800876c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <USBD_SetConfig+0x148>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d02a      	beq.n	800874a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff f973 	bl	80079e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008702:	4b1d      	ldr	r3, [pc, #116]	; (8008778 <USBD_SetConfig+0x148>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800870c:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <USBD_SetConfig+0x148>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f94c 	bl	80079b0 <USBD_SetClassConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f903 	bl	8008930 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff f958 	bl	80079e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008740:	e014      	b.n	800876c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f9bf 	bl	8008ac6 <USBD_CtlSendStatus>
      break;
 8008748:	e010      	b.n	800876c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9bb 	bl	8008ac6 <USBD_CtlSendStatus>
      break;
 8008750:	e00c      	b.n	800876c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f8eb 	bl	8008930 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <USBD_SetConfig+0x148>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff f941 	bl	80079e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008766:	2303      	movs	r3, #3
 8008768:	73fb      	strb	r3, [r7, #15]
      break;
 800876a:	bf00      	nop
  }

  return ret;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	200002c4 	.word	0x200002c4

0800877c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88db      	ldrh	r3, [r3, #6]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d004      	beq.n	8008798 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8cd 	bl	8008930 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008796:	e023      	b.n	80087e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	dc02      	bgt.n	80087aa <USBD_GetConfig+0x2e>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc03      	bgt.n	80087b0 <USBD_GetConfig+0x34>
 80087a8:	e015      	b.n	80087d6 <USBD_GetConfig+0x5a>
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d00b      	beq.n	80087c6 <USBD_GetConfig+0x4a>
 80087ae:	e012      	b.n	80087d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3308      	adds	r3, #8
 80087ba:	2201      	movs	r2, #1
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f927 	bl	8008a12 <USBD_CtlSendData>
        break;
 80087c4:	e00c      	b.n	80087e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	3304      	adds	r3, #4
 80087ca:	2201      	movs	r2, #1
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f91f 	bl	8008a12 <USBD_CtlSendData>
        break;
 80087d4:	e004      	b.n	80087e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8a9 	bl	8008930 <USBD_CtlError>
        break;
 80087de:	bf00      	nop
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	3b01      	subs	r3, #1
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d81e      	bhi.n	800883e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	88db      	ldrh	r3, [r3, #6]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d004      	beq.n	8008812 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f890 	bl	8008930 <USBD_CtlError>
        break;
 8008810:	e01a      	b.n	8008848 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f043 0202 	orr.w	r2, r3, #2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	330c      	adds	r3, #12
 8008832:	2202      	movs	r2, #2
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f8eb 	bl	8008a12 <USBD_CtlSendData>
      break;
 800883c:	e004      	b.n	8008848 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f875 	bl	8008930 <USBD_CtlError>
      break;
 8008846:	bf00      	nop
  }
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	885b      	ldrh	r3, [r3, #2]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d106      	bne.n	8008870 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f92b 	bl	8008ac6 <USBD_CtlSendStatus>
  }
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	2b02      	cmp	r3, #2
 800888e:	d80b      	bhi.n	80088a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	885b      	ldrh	r3, [r3, #2]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d10c      	bne.n	80088b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f910 	bl	8008ac6 <USBD_CtlSendStatus>
      }
      break;
 80088a6:	e004      	b.n	80088b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f840 	bl	8008930 <USBD_CtlError>
      break;
 80088b0:	e000      	b.n	80088b4 <USBD_ClrFeature+0x3c>
      break;
 80088b2:	bf00      	nop
  }
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff fa92 	bl	8007e10 <SWAPBYTE>
 80088ec:	4603      	mov	r3, r0
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3301      	adds	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff fa85 	bl	8007e10 <SWAPBYTE>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff fa78 	bl	8007e10 <SWAPBYTE>
 8008920:	4603      	mov	r3, r0
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	80da      	strh	r2, [r3, #6]
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800893a:	2180      	movs	r1, #128	; 0x80
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc6f 	bl	8009220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008942:	2100      	movs	r1, #0
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc6b 	bl	8009220 <USBD_LL_StallEP>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b086      	sub	sp, #24
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d036      	beq.n	80089d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800896c:	6938      	ldr	r0, [r7, #16]
 800896e:	f000 f836 	bl	80089de <USBD_GetLen>
 8008972:	4603      	mov	r3, r0
 8008974:	3301      	adds	r3, #1
 8008976:	b29b      	uxth	r3, r3
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	4413      	add	r3, r2
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	7812      	ldrb	r2, [r2, #0]
 800898a:	701a      	strb	r2, [r3, #0]
  idx++;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	3301      	adds	r3, #1
 8008990:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	4413      	add	r3, r2
 8008998:	2203      	movs	r2, #3
 800899a:	701a      	strb	r2, [r3, #0]
  idx++;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	3301      	adds	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089a2:	e013      	b.n	80089cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	4413      	add	r3, r2
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	7812      	ldrb	r2, [r2, #0]
 80089ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	3301      	adds	r3, #1
 80089b4:	613b      	str	r3, [r7, #16]
    idx++;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	3301      	adds	r3, #1
 80089ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	2200      	movs	r2, #0
 80089c4:	701a      	strb	r2, [r3, #0]
    idx++;
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	3301      	adds	r3, #1
 80089ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e7      	bne.n	80089a4 <USBD_GetString+0x52>
 80089d4:	e000      	b.n	80089d8 <USBD_GetString+0x86>
    return;
 80089d6:	bf00      	nop
  }
}
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089ee:	e005      	b.n	80089fc <USBD_GetLen+0x1e>
  {
    len++;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	3301      	adds	r3, #1
 80089f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f5      	bne.n	80089f0 <USBD_GetLen+0x12>
  }

  return len;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	2100      	movs	r1, #0
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fc7b 	bl	8009334 <USBD_LL_Transmit>

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fc6a 	bl	8009334 <USBD_LL_Transmit>

  return USBD_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2203      	movs	r2, #3
 8008a7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fc6e 	bl	8009376 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fc5d 	bl	8009376 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2204      	movs	r2, #4
 8008ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fc29 	bl	8009334 <USBD_LL_Transmit>

  return USBD_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2205      	movs	r2, #5
 8008af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008afc:	2300      	movs	r3, #0
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fc37 	bl	8009376 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4912      	ldr	r1, [pc, #72]	; (8008b64 <MX_USB_Device_Init+0x50>)
 8008b1c:	4812      	ldr	r0, [pc, #72]	; (8008b68 <MX_USB_Device_Init+0x54>)
 8008b1e:	f7fe fed9 	bl	80078d4 <USBD_Init>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008b28:	f7f7 fd36 	bl	8000598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008b2c:	490f      	ldr	r1, [pc, #60]	; (8008b6c <MX_USB_Device_Init+0x58>)
 8008b2e:	480e      	ldr	r0, [pc, #56]	; (8008b68 <MX_USB_Device_Init+0x54>)
 8008b30:	f7fe ff00 	bl	8007934 <USBD_RegisterClass>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008b3a:	f7f7 fd2d 	bl	8000598 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008b3e:	490c      	ldr	r1, [pc, #48]	; (8008b70 <MX_USB_Device_Init+0x5c>)
 8008b40:	4809      	ldr	r0, [pc, #36]	; (8008b68 <MX_USB_Device_Init+0x54>)
 8008b42:	f7fe fe51 	bl	80077e8 <USBD_CDC_RegisterInterface>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008b4c:	f7f7 fd24 	bl	8000598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008b50:	4805      	ldr	r0, [pc, #20]	; (8008b68 <MX_USB_Device_Init+0x54>)
 8008b52:	f7fe ff16 	bl	8007982 <USBD_Start>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008b5c:	f7f7 fd1c 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008b60:	bf00      	nop
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000130 	.word	0x20000130
 8008b68:	200002c8 	.word	0x200002c8
 8008b6c:	20000018 	.word	0x20000018
 8008b70:	2000011c 	.word	0x2000011c

08008b74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4905      	ldr	r1, [pc, #20]	; (8008b90 <CDC_Init_FS+0x1c>)
 8008b7c:	4805      	ldr	r0, [pc, #20]	; (8008b94 <CDC_Init_FS+0x20>)
 8008b7e:	f7fe fe48 	bl	8007812 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b82:	4905      	ldr	r1, [pc, #20]	; (8008b98 <CDC_Init_FS+0x24>)
 8008b84:	4803      	ldr	r0, [pc, #12]	; (8008b94 <CDC_Init_FS+0x20>)
 8008b86:	f7fe fe62 	bl	800784e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000998 	.word	0x20000998
 8008b94:	200002c8 	.word	0x200002c8
 8008b98:	20000598 	.word	0x20000598

08008b9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	6039      	str	r1, [r7, #0]
 8008bb6:	71fb      	strb	r3, [r7, #7]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b23      	cmp	r3, #35	; 0x23
 8008bc0:	d84a      	bhi.n	8008c58 <CDC_Control_FS+0xac>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <CDC_Control_FS+0x1c>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008c59 	.word	0x08008c59
 8008bcc:	08008c59 	.word	0x08008c59
 8008bd0:	08008c59 	.word	0x08008c59
 8008bd4:	08008c59 	.word	0x08008c59
 8008bd8:	08008c59 	.word	0x08008c59
 8008bdc:	08008c59 	.word	0x08008c59
 8008be0:	08008c59 	.word	0x08008c59
 8008be4:	08008c59 	.word	0x08008c59
 8008be8:	08008c59 	.word	0x08008c59
 8008bec:	08008c59 	.word	0x08008c59
 8008bf0:	08008c59 	.word	0x08008c59
 8008bf4:	08008c59 	.word	0x08008c59
 8008bf8:	08008c59 	.word	0x08008c59
 8008bfc:	08008c59 	.word	0x08008c59
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008c59 	.word	0x08008c59
 8008c0c:	08008c59 	.word	0x08008c59
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c59 	.word	0x08008c59
 8008c18:	08008c59 	.word	0x08008c59
 8008c1c:	08008c59 	.word	0x08008c59
 8008c20:	08008c59 	.word	0x08008c59
 8008c24:	08008c59 	.word	0x08008c59
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008c59 	.word	0x08008c59
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c59 	.word	0x08008c59
 8008c48:	08008c59 	.word	0x08008c59
 8008c4c:	08008c59 	.word	0x08008c59
 8008c50:	08008c59 	.word	0x08008c59
 8008c54:	08008c59 	.word	0x08008c59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c58:	bf00      	nop
  }

  return (USBD_OK);
 8008c5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4805      	ldr	r0, [pc, #20]	; (8008c8c <CDC_Receive_FS+0x24>)
 8008c76:	f7fe fdea 	bl	800784e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c7a:	4804      	ldr	r0, [pc, #16]	; (8008c8c <CDC_Receive_FS+0x24>)
 8008c7c:	f7fe fe00 	bl	8007880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200002c8 	.word	0x200002c8

08008c90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2212      	movs	r2, #18
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000150 	.word	0x20000150

08008cd8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	20000164 	.word	0x20000164

08008cfc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	; (8008d30 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008d12:	4808      	ldr	r0, [pc, #32]	; (8008d34 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008d14:	f7ff fe1d 	bl	8008952 <USBD_GetString>
 8008d18:	e004      	b.n	8008d24 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008d20:	f7ff fe17 	bl	8008952 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000d98 	.word	0x20000d98
 8008d34:	0800956c 	.word	0x0800956c

08008d38 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	4904      	ldr	r1, [pc, #16]	; (8008d58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008d48:	4804      	ldr	r0, [pc, #16]	; (8008d5c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008d4a:	f7ff fe02 	bl	8008952 <USBD_GetString>
  return USBD_StrDesc;
 8008d4e:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000d98 	.word	0x20000d98
 8008d5c:	08009584 	.word	0x08009584

08008d60 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	221a      	movs	r2, #26
 8008d70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d72:	f000 f843 	bl	8008dfc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d76:	4b02      	ldr	r3, [pc, #8]	; (8008d80 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20000168 	.word	0x20000168

08008d84 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4907      	ldr	r1, [pc, #28]	; (8008db8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d9a:	4808      	ldr	r0, [pc, #32]	; (8008dbc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d9c:	f7ff fdd9 	bl	8008952 <USBD_GetString>
 8008da0:	e004      	b.n	8008dac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	4904      	ldr	r1, [pc, #16]	; (8008db8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008da6:	4805      	ldr	r0, [pc, #20]	; (8008dbc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008da8:	f7ff fdd3 	bl	8008952 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000d98 	.word	0x20000d98
 8008dbc:	08009598 	.word	0x08009598

08008dc0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4907      	ldr	r1, [pc, #28]	; (8008df4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008dd6:	4808      	ldr	r0, [pc, #32]	; (8008df8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008dd8:	f7ff fdbb 	bl	8008952 <USBD_GetString>
 8008ddc:	e004      	b.n	8008de8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4904      	ldr	r1, [pc, #16]	; (8008df4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008de2:	4805      	ldr	r0, [pc, #20]	; (8008df8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008de4:	f7ff fdb5 	bl	8008952 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000d98 	.word	0x20000d98
 8008df8:	080095a4 	.word	0x080095a4

08008dfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <Get_SerialNum+0x44>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	; (8008e44 <Get_SerialNum+0x48>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <Get_SerialNum+0x4c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e22:	2208      	movs	r2, #8
 8008e24:	4909      	ldr	r1, [pc, #36]	; (8008e4c <Get_SerialNum+0x50>)
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f814 	bl	8008e54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	4908      	ldr	r1, [pc, #32]	; (8008e50 <Get_SerialNum+0x54>)
 8008e30:	68b8      	ldr	r0, [r7, #8]
 8008e32:	f000 f80f 	bl	8008e54 <IntToUnicode>
  }
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	1fff7590 	.word	0x1fff7590
 8008e44:	1fff7594 	.word	0x1fff7594
 8008e48:	1fff7598 	.word	0x1fff7598
 8008e4c:	2000016a 	.word	0x2000016a
 8008e50:	2000017a 	.word	0x2000017a

08008e54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e027      	b.n	8008ebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d80b      	bhi.n	8008e8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0f1b      	lsrs	r3, r3, #28
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	440b      	add	r3, r1
 8008e84:	3230      	adds	r2, #48	; 0x30
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	e00a      	b.n	8008ea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4619      	mov	r1, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3237      	adds	r2, #55	; 0x37
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	3301      	adds	r3, #1
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
 8008ebc:	7dfa      	ldrb	r2, [r7, #23]
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3d3      	bcc.n	8008e6c <IntToUnicode+0x18>
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b094      	sub	sp, #80	; 0x50
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008edc:	f107 030c 	add.w	r3, r7, #12
 8008ee0:	2244      	movs	r2, #68	; 0x44
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fafb 	bl	80094e0 <memset>
  if(pcdHandle->Instance==USB)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a15      	ldr	r2, [pc, #84]	; (8008f44 <HAL_PCD_MspInit+0x70>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d122      	bne.n	8008f3a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ef8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008efa:	2300      	movs	r3, #0
 8008efc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008efe:	f107 030c 	add.w	r3, r7, #12
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fb fd2e 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008f0e:	f7f7 fb43 	bl	8000598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f12:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <HAL_PCD_MspInit+0x74>)
 8008f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f16:	4a0c      	ldr	r2, [pc, #48]	; (8008f48 <HAL_PCD_MspInit+0x74>)
 8008f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <HAL_PCD_MspInit+0x74>)
 8008f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f26:	60bb      	str	r3, [r7, #8]
 8008f28:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	2014      	movs	r0, #20
 8008f30:	f7f8 fd79 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008f34:	2014      	movs	r0, #20
 8008f36:	f7f8 fd90 	bl	8001a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3750      	adds	r7, #80	; 0x50
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40005c00 	.word	0x40005c00
 8008f48:	40021000 	.word	0x40021000

08008f4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7fe fd58 	bl	8007a18 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f82:	78fa      	ldrb	r2, [r7, #3]
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	4613      	mov	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	440b      	add	r3, r1
 8008f90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f7fe fd92 	bl	8007ac2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	440b      	add	r3, r1
 8008fc6:	333c      	adds	r3, #60	; 0x3c
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f7fe fddb 	bl	8007b88 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fe feef 	bl	8007dcc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ffe:	2301      	movs	r3, #1
 8009000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b02      	cmp	r3, #2
 8009008:	d001      	beq.n	800900e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800900a:	f7f7 fac5 	bl	8000598 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009014:	7bfa      	ldrb	r2, [r7, #15]
 8009016:	4611      	mov	r1, r2
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fe99 	bl	8007d50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fe45 	bl	8007cb4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe fe94 	bl	8007d70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <HAL_PCD_SuspendCallback+0x30>)
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	4a03      	ldr	r2, [pc, #12]	; (8009064 <HAL_PCD_SuspendCallback+0x30>)
 8009056:	f043 0306 	orr.w	r3, r3, #6
 800905a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	e000ed00 	.word	0xe000ed00

08009068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009078:	4b08      	ldr	r3, [pc, #32]	; (800909c <HAL_PCD_ResumeCallback+0x34>)
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	4a07      	ldr	r2, [pc, #28]	; (800909c <HAL_PCD_ResumeCallback+0x34>)
 800907e:	f023 0306 	bic.w	r3, r3, #6
 8009082:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009084:	f000 f9fa 	bl	800947c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fe84 	bl	8007d9c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	e000ed00 	.word	0xe000ed00

080090a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80090a8:	4a2b      	ldr	r2, [pc, #172]	; (8009158 <USBD_LL_Init+0xb8>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a29      	ldr	r2, [pc, #164]	; (8009158 <USBD_LL_Init+0xb8>)
 80090b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80090b8:	4b27      	ldr	r3, [pc, #156]	; (8009158 <USBD_LL_Init+0xb8>)
 80090ba:	4a28      	ldr	r2, [pc, #160]	; (800915c <USBD_LL_Init+0xbc>)
 80090bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80090be:	4b26      	ldr	r3, [pc, #152]	; (8009158 <USBD_LL_Init+0xb8>)
 80090c0:	2208      	movs	r2, #8
 80090c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80090c4:	4b24      	ldr	r3, [pc, #144]	; (8009158 <USBD_LL_Init+0xb8>)
 80090c6:	2202      	movs	r2, #2
 80090c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090ca:	4b23      	ldr	r3, [pc, #140]	; (8009158 <USBD_LL_Init+0xb8>)
 80090cc:	2202      	movs	r2, #2
 80090ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80090d0:	4b21      	ldr	r3, [pc, #132]	; (8009158 <USBD_LL_Init+0xb8>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80090d6:	4b20      	ldr	r3, [pc, #128]	; (8009158 <USBD_LL_Init+0xb8>)
 80090d8:	2200      	movs	r2, #0
 80090da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80090dc:	4b1e      	ldr	r3, [pc, #120]	; (8009158 <USBD_LL_Init+0xb8>)
 80090de:	2200      	movs	r2, #0
 80090e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80090e2:	4b1d      	ldr	r3, [pc, #116]	; (8009158 <USBD_LL_Init+0xb8>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80090e8:	481b      	ldr	r0, [pc, #108]	; (8009158 <USBD_LL_Init+0xb8>)
 80090ea:	f7f9 f95b 	bl	80023a4 <HAL_PCD_Init>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80090f4:	f7f7 fa50 	bl	8000598 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090fe:	2318      	movs	r3, #24
 8009100:	2200      	movs	r2, #0
 8009102:	2100      	movs	r1, #0
 8009104:	f7fa fe14 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800910e:	2358      	movs	r3, #88	; 0x58
 8009110:	2200      	movs	r2, #0
 8009112:	2180      	movs	r1, #128	; 0x80
 8009114:	f7fa fe0c 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800911e:	23c0      	movs	r3, #192	; 0xc0
 8009120:	2200      	movs	r2, #0
 8009122:	2181      	movs	r1, #129	; 0x81
 8009124:	f7fa fe04 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800912e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009132:	2200      	movs	r2, #0
 8009134:	2101      	movs	r1, #1
 8009136:	f7fa fdfb 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009144:	2200      	movs	r2, #0
 8009146:	2182      	movs	r1, #130	; 0x82
 8009148:	f7fa fdf2 	bl	8003d30 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000f98 	.word	0x20000f98
 800915c:	40005c00 	.word	0x40005c00

08009160 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009176:	4618      	mov	r0, r3
 8009178:	f7f9 f9f9 	bl	800256e <HAL_PCD_Start>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f980 	bl	8009488 <USBD_Get_USB_Status>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800918c:	7bbb      	ldrb	r3, [r7, #14]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	461a      	mov	r2, r3
 80091a4:	4603      	mov	r3, r0
 80091a6:	70fb      	strb	r3, [r7, #3]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70bb      	strb	r3, [r7, #2]
 80091ac:	4613      	mov	r3, r2
 80091ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091be:	78bb      	ldrb	r3, [r7, #2]
 80091c0:	883a      	ldrh	r2, [r7, #0]
 80091c2:	78f9      	ldrb	r1, [r7, #3]
 80091c4:	f7f9 fb41 	bl	800284a <HAL_PCD_EP_Open>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f95a 	bl	8009488 <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f7f9 fb88 	bl	8002916 <HAL_PCD_EP_Close>
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f93b 	bl	8009488 <USBD_Get_USB_Status>
 8009212:	4603      	mov	r3, r0
 8009214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009216:	7bbb      	ldrb	r3, [r7, #14]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7f9 fc49 	bl	8002ad6 <HAL_PCD_EP_SetStall>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f91c 	bl	8009488 <USBD_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009254:	7bbb      	ldrb	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7f9 fc7c 	bl	8002b7a <HAL_PCD_EP_ClrStall>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 f8fd 	bl	8009488 <USBD_Get_USB_Status>
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009292:	7bbb      	ldrb	r3, [r7, #14]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da0c      	bge.n	80092d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	440b      	add	r3, r1
 80092cc:	3302      	adds	r3, #2
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	e00b      	b.n	80092ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	440b      	add	r3, r1
 80092e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f7f9 fa73 	bl	8002800 <HAL_PCD_SetAddress>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f8b1 	bl	8009488 <USBD_Get_USB_Status>
 8009326:	4603      	mov	r3, r0
 8009328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932a:	7bbb      	ldrb	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	607a      	str	r2, [r7, #4]
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	460b      	mov	r3, r1
 8009342:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009352:	7af9      	ldrb	r1, [r7, #11]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	f7f9 fb7a 	bl	8002a50 <HAL_PCD_EP_Transmit>
 800935c:	4603      	mov	r3, r0
 800935e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f890 	bl	8009488 <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800936c:	7dbb      	ldrb	r3, [r7, #22]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b086      	sub	sp, #24
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	460b      	mov	r3, r1
 8009384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009394:	7af9      	ldrb	r1, [r7, #11]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	f7f9 fb04 	bl	80029a6 <HAL_PCD_EP_Receive>
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f86f 	bl	8009488 <USBD_Get_USB_Status>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f9 fb26 	bl	8002a20 <HAL_PCD_EP_GetRxCount>
 80093d4:	4603      	mov	r3, r0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <HAL_PCDEx_LPM_Callback+0x18>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d013      	beq.n	800941e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80093f6:	e023      	b.n	8009440 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009400:	f000 f83c 	bl	800947c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <HAL_PCDEx_LPM_Callback+0x68>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	4a0f      	ldr	r2, [pc, #60]	; (8009448 <HAL_PCDEx_LPM_Callback+0x68>)
 800940a:	f023 0306 	bic.w	r3, r3, #6
 800940e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fcc0 	bl	8007d9c <USBD_LL_Resume>
    break;
 800941c:	e010      	b.n	8009440 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe fca3 	bl	8007d70 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <HAL_PCDEx_LPM_Callback+0x68>)
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	4a04      	ldr	r2, [pc, #16]	; (8009448 <HAL_PCDEx_LPM_Callback+0x68>)
 8009438:	f043 0306 	orr.w	r3, r3, #6
 800943c:	6113      	str	r3, [r2, #16]
    break;
 800943e:	bf00      	nop
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	e000ed00 	.word	0xe000ed00

0800944c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <USBD_static_malloc+0x18>)
}
 8009456:	4618      	mov	r0, r3
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	2000128c 	.word	0x2000128c

08009468 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]

}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009480:	f7f6 ff00 	bl	8000284 <SystemClock_Config>
}
 8009484:	bf00      	nop
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	2b03      	cmp	r3, #3
 800949a:	d817      	bhi.n	80094cc <USBD_Get_USB_Status+0x44>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <USBD_Get_USB_Status+0x1c>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094bb 	.word	0x080094bb
 80094ac:	080094c1 	.word	0x080094c1
 80094b0:	080094c7 	.word	0x080094c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73fb      	strb	r3, [r7, #15]
    break;
 80094b8:	e00b      	b.n	80094d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	73fb      	strb	r3, [r7, #15]
    break;
 80094be:	e008      	b.n	80094d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
    break;
 80094c4:	e005      	b.n	80094d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ca:	e002      	b.n	80094d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094cc:	2303      	movs	r3, #3
 80094ce:	73fb      	strb	r3, [r7, #15]
    break;
 80094d0:	bf00      	nop
  }
  return usb_status;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <memset>:
 80094e0:	4402      	add	r2, r0
 80094e2:	4603      	mov	r3, r0
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d100      	bne.n	80094ea <memset+0xa>
 80094e8:	4770      	bx	lr
 80094ea:	f803 1b01 	strb.w	r1, [r3], #1
 80094ee:	e7f9      	b.n	80094e4 <memset+0x4>

080094f0 <__libc_init_array>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	4d0d      	ldr	r5, [pc, #52]	; (8009528 <__libc_init_array+0x38>)
 80094f4:	4c0d      	ldr	r4, [pc, #52]	; (800952c <__libc_init_array+0x3c>)
 80094f6:	1b64      	subs	r4, r4, r5
 80094f8:	10a4      	asrs	r4, r4, #2
 80094fa:	2600      	movs	r6, #0
 80094fc:	42a6      	cmp	r6, r4
 80094fe:	d109      	bne.n	8009514 <__libc_init_array+0x24>
 8009500:	4d0b      	ldr	r5, [pc, #44]	; (8009530 <__libc_init_array+0x40>)
 8009502:	4c0c      	ldr	r4, [pc, #48]	; (8009534 <__libc_init_array+0x44>)
 8009504:	f000 f826 	bl	8009554 <_init>
 8009508:	1b64      	subs	r4, r4, r5
 800950a:	10a4      	asrs	r4, r4, #2
 800950c:	2600      	movs	r6, #0
 800950e:	42a6      	cmp	r6, r4
 8009510:	d105      	bne.n	800951e <__libc_init_array+0x2e>
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	f855 3b04 	ldr.w	r3, [r5], #4
 8009518:	4798      	blx	r3
 800951a:	3601      	adds	r6, #1
 800951c:	e7ee      	b.n	80094fc <__libc_init_array+0xc>
 800951e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009522:	4798      	blx	r3
 8009524:	3601      	adds	r6, #1
 8009526:	e7f2      	b.n	800950e <__libc_init_array+0x1e>
 8009528:	080095c4 	.word	0x080095c4
 800952c:	080095c4 	.word	0x080095c4
 8009530:	080095c4 	.word	0x080095c4
 8009534:	080095c8 	.word	0x080095c8

08009538 <memcpy>:
 8009538:	440a      	add	r2, r1
 800953a:	4291      	cmp	r1, r2
 800953c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009540:	d100      	bne.n	8009544 <memcpy+0xc>
 8009542:	4770      	bx	lr
 8009544:	b510      	push	{r4, lr}
 8009546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800954a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800954e:	4291      	cmp	r1, r2
 8009550:	d1f9      	bne.n	8009546 <memcpy+0xe>
 8009552:	bd10      	pop	{r4, pc}

08009554 <_init>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	bf00      	nop
 8009558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955a:	bc08      	pop	{r3}
 800955c:	469e      	mov	lr, r3
 800955e:	4770      	bx	lr

08009560 <_fini>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr
