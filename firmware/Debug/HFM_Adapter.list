
HFM_Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d934  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800db0c  0800db0c  0001db0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbbc  0800dbbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbbc  0800dbbc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbbc  0800dbbc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbbc  0800dbbc  0001dbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbc0  0800dbc0  0001dbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800dbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  200001dc  0800dda0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b0  0800dda0  000217b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a27  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b81  00000000  00000000  00040c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  000457f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000161c  00000000  00000000  000474d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024746  00000000  00000000  00048af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024795  00000000  00000000  0006d23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e02e2  00000000  00000000  000919cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f30  00000000  00000000  00171cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00179be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001dc 	.word	0x200001dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800daf4 	.word	0x0800daf4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e0 	.word	0x200001e0
 8000214:	0800daf4 	.word	0x0800daf4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <bytestowrite>:
  *	@param	size bytes count to write
  *	@param	offset offset in the page
  * @retval uint16_t remain bytes
  */
uint16_t bytestowrite (uint16_t page_size, uint16_t size, uint16_t offset)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
 8000bea:	460b      	mov	r3, r1
 8000bec:	80bb      	strh	r3, [r7, #4]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	807b      	strh	r3, [r7, #2]
	if ((size+offset) < page_size) return size;
 8000bf2:	88ba      	ldrh	r2, [r7, #4]
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	441a      	add	r2, r3
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	da01      	bge.n	8000c02 <bytestowrite+0x22>
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	e003      	b.n	8000c0a <bytestowrite+0x2a>
	else return (page_size - offset);
 8000c02:	88fa      	ldrh	r2, [r7, #6]
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29b      	uxth	r3, r3
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <at24cxx_connected>:
  * @param  eeprom_device Pointer to a AT24CXX_HandleTypeDef structure that contains
  *                		  the configuration information for the specified eeprom device.
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef at24cxx_connected(AT24CXX_HandleTypeDef eeprom_device)
{
 8000c16:	b084      	sub	sp, #16
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	f107 0c08 	add.w	ip, r7, #8
 8000c20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_IsDeviceReady(&eeprom_device.i2c_device, eeprom_device.at24cxx_address, 2, 100);
 8000c24:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	f107 0008 	add.w	r0, r7, #8
 8000c30:	f004 fc24 	bl	800547c <HAL_I2C_IsDeviceReady>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c3e:	b004      	add	sp, #16
 8000c40:	4770      	bx	lr
 8000c42:	0000      	movs	r0, r0
 8000c44:	0000      	movs	r0, r0
	...

08000c48 <at24cxx_erase_page>:
  *                		  the configuration information for the specified eeprom device.
  * @param	page page number to be erased
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef at24cxx_erase_page(AT24CXX_HandleTypeDef eeprom_device, uint16_t page)
{
 8000c48:	b084      	sub	sp, #16
 8000c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c4e:	b08b      	sub	sp, #44	; 0x2c
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8000c56:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000c5a:	466b      	mov	r3, sp
 8000c5c:	461e      	mov	r6, r3
	HAL_StatusTypeDef retVal;

	if (page > eeprom_device.at24cxx_page_number)
 8000c5e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000c62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d901      	bls.n	8000c6e <at24cxx_erase_page+0x26>
	{
		return false;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e067      	b.n	8000d3e <at24cxx_erase_page+0xf6>
	}

	// calculate the memory address based on the page number
	int paddrposition = log(eeprom_device.at24cxx_page_size)/log(2);
 8000c6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc12 	bl	800049c <__aeabi_ui2d>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	ec43 2b10 	vmov	d0, r2, r3
 8000c80:	f00c fd12 	bl	800d6a8 <log>
 8000c84:	ec51 0b10 	vmov	r0, r1, d0
 8000c88:	a331      	add	r3, pc, #196	; (adr r3, 8000d50 <at24cxx_erase_page+0x108>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fda9 	bl	80007e4 <__aeabi_ddiv>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff ff29 	bl	8000af0 <__aeabi_d2iz>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	617b      	str	r3, [r7, #20]
	uint16_t MemAddress = page << paddrposition;
 8000ca2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	827b      	strh	r3, [r7, #18]

	uint8_t page_data[eeprom_device.at24cxx_page_size];
 8000cae:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	b28b      	uxth	r3, r1
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	4691      	mov	r9, r2
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ccc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cd4:	b28b      	uxth	r3, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	461c      	mov	r4, r3
 8000cda:	4615      	mov	r5, r2
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	00eb      	lsls	r3, r5, #3
 8000ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cea:	00e2      	lsls	r2, r4, #3
 8000cec:	460b      	mov	r3, r1
 8000cee:	3307      	adds	r3, #7
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	ebad 0d03 	sub.w	sp, sp, r3
 8000cf8:	ab04      	add	r3, sp, #16
 8000cfa:	3300      	adds	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
	memset(page_data,0xff,eeprom_device.at24cxx_page_size);
 8000cfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d02:	461a      	mov	r2, r3
 8000d04:	21ff      	movs	r1, #255	; 0xff
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f00c fc8c 	bl	800d624 <memset>

	retVal = HAL_I2C_Mem_Write(&eeprom_device.i2c_device, eeprom_device.at24cxx_address, MemAddress, 2, page_data, eeprom_device.at24cxx_page_size, 1000);
 8000d0c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8000d10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000d14:	8a7a      	ldrh	r2, [r7, #18]
 8000d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1a:	9002      	str	r0, [sp, #8]
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2302      	movs	r3, #2
 8000d24:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000d28:	f004 f97a 	bl	8005020 <HAL_I2C_Mem_Write>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]

	if (retVal == HAL_OK)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <at24cxx_erase_page+0xf4>
	{
		HAL_Delay(5);
 8000d36:	2005      	movs	r0, #5
 8000d38:	f001 fd06 	bl	8002748 <HAL_Delay>
	}

	return retVal;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	46b5      	mov	sp, r6
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d4a:	b004      	add	sp, #16
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	fefa39ef 	.word	0xfefa39ef
 8000d54:	3fe62e42 	.word	0x3fe62e42

08000d58 <at24cxx_erase_chip>:
  * @param  eeprom_device Pointer to a AT24CXX_HandleTypeDef structure that contains
  *                		  the configuration information for the specified eeprom device.
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef at24cxx_erase_chip(AT24CXX_HandleTypeDef eeprom_device)
{
 8000d58:	b084      	sub	sp, #16
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b094      	sub	sp, #80	; 0x50
 8000d5e:	af12      	add	r7, sp, #72	; 0x48
 8000d60:	f107 0c10 	add.w	ip, r7, #16
 8000d64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef retVal = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]

	uint16_t current_page = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	80bb      	strh	r3, [r7, #4]

	while (current_page < eeprom_device.at24cxx_page_number && retVal == HAL_OK)
 8000d70:	e012      	b.n	8000d98 <at24cxx_erase_chip+0x40>
	{
		retVal = at24cxx_erase_page(eeprom_device, current_page);
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	9311      	str	r3, [sp, #68]	; 0x44
 8000d76:	4668      	mov	r0, sp
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	2244      	movs	r2, #68	; 0x44
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f00c fc82 	bl	800d688 <memcpy>
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d8a:	f7ff ff5d 	bl	8000c48 <at24cxx_erase_page>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
		current_page++;
 8000d92:	88bb      	ldrh	r3, [r7, #4]
 8000d94:	3301      	adds	r3, #1
 8000d96:	80bb      	strh	r3, [r7, #4]
	while (current_page < eeprom_device.at24cxx_page_number && retVal == HAL_OK)
 8000d98:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000d9c:	88ba      	ldrh	r2, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d202      	bcs.n	8000da8 <at24cxx_erase_chip+0x50>
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e4      	beq.n	8000d72 <at24cxx_erase_chip+0x1a>
	}

	return retVal;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <at24cxx_write>:
  * @param	data is the pointer to the data to write in bytes
  * @param	size is size of data
  * @retval bool status
  */
HAL_StatusTypeDef at24cxx_write(AT24CXX_HandleTypeDef eeprom_device, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000db8:	b084      	sub	sp, #16
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b08a      	sub	sp, #40	; 0x28
 8000dbe:	af04      	add	r7, sp, #16
 8000dc0:	f107 0c20 	add.w	ip, r7, #32
 8000dc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t pos = 0, current_page = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	82fb      	strh	r3, [r7, #22]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef retVal = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	74fb      	strb	r3, [r7, #19]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(eeprom_device.at24cxx_page_size)/log(2);
 8000dd4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fb5f 	bl	800049c <__aeabi_ui2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	ec43 2b10 	vmov	d0, r2, r3
 8000de6:	f00c fc5f 	bl	800d6a8 <log>
 8000dea:	ec51 0b10 	vmov	r0, r1, d0
 8000dee:	a33c      	add	r3, pc, #240	; (adr r3, 8000ee0 <at24cxx_write+0x128>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff fcf6 	bl	80007e4 <__aeabi_ddiv>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fe76 	bl	8000af0 <__aeabi_d2iz>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000e08:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e0c:	823b      	strh	r3, [r7, #16]
	uint16_t endPage = page + ((size+offset)/eeprom_device.at24cxx_page_size);
 8000e0e:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8000e12:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000e16:	4413      	add	r3, r2
 8000e18:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e26:	4413      	add	r3, r2
 8000e28:	817b      	strh	r3, [r7, #10]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000e2a:	897a      	ldrh	r2, [r7, #10]
 8000e2c:	8a3b      	ldrh	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	813b      	strh	r3, [r7, #8]


	while (current_page < numofpages && retVal == HAL_OK)
 8000e36:	e041      	b.n	8000ebc <at24cxx_write+0x104>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000e38:	8a3a      	ldrh	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	80fb      	strh	r3, [r7, #6]
		uint16_t bytesremaining = bytestowrite(eeprom_device.at24cxx_page_size, size, offset);  // calculate the remaining bytes to be written
 8000e4c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000e50:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000e54:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fec1 	bl	8000be0 <bytestowrite>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]

		retVal = HAL_I2C_Mem_Write(&eeprom_device.i2c_device, eeprom_device.at24cxx_address, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000e62:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000e66:	8afb      	ldrh	r3, [r7, #22]
 8000e68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000e6a:	4413      	add	r3, r2
 8000e6c:	88f8      	ldrh	r0, [r7, #6]
 8000e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e72:	9202      	str	r2, [sp, #8]
 8000e74:	88ba      	ldrh	r2, [r7, #4]
 8000e76:	9201      	str	r2, [sp, #4]
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f107 0020 	add.w	r0, r7, #32
 8000e82:	f004 f8cd 	bl	8005020 <HAL_I2C_Mem_Write>
 8000e86:	4603      	mov	r3, r0
 8000e88:	74fb      	strb	r3, [r7, #19]
		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000e8a:	8a3b      	ldrh	r3, [r7, #16]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	823b      	strh	r3, [r7, #16]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		size = size-bytesremaining;  // reduce the size of the bytes
 8000e96:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		pos += bytesremaining;  // update the position for the data buffer
 8000ea2:	8afa      	ldrh	r2, [r7, #22]
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	82fb      	strh	r3, [r7, #22]

		current_page++;
 8000eaa:	8abb      	ldrh	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	82bb      	strh	r3, [r7, #20]

		if (retVal == HAL_OK)
 8000eb0:	7cfb      	ldrb	r3, [r7, #19]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <at24cxx_write+0x104>
		{
			HAL_Delay(5);
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f001 fc46 	bl	8002748 <HAL_Delay>
	while (current_page < numofpages && retVal == HAL_OK)
 8000ebc:	8aba      	ldrh	r2, [r7, #20]
 8000ebe:	893b      	ldrh	r3, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d202      	bcs.n	8000eca <at24cxx_write+0x112>
 8000ec4:	7cfb      	ldrb	r3, [r7, #19]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0b6      	beq.n	8000e38 <at24cxx_write+0x80>
		}
	}
	return retVal;
 8000eca:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed6:	b004      	add	sp, #16
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	fefa39ef 	.word	0xfefa39ef
 8000ee4:	3fe62e42 	.word	0x3fe62e42

08000ee8 <at24cxx_read>:
  * @param	data is the pointer to the data to write in bytes
  * @param	size is size of data
  * @retval bool status
  */
HAL_StatusTypeDef at24cxx_read(AT24CXX_HandleTypeDef eeprom_device, uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000ee8:	b084      	sub	sp, #16
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b08a      	sub	sp, #40	; 0x28
 8000eee:	af04      	add	r7, sp, #16
 8000ef0:	f107 0c20 	add.w	ip, r7, #32
 8000ef4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t pos = 0, current_page = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	82fb      	strh	r3, [r7, #22]
 8000efc:	2300      	movs	r3, #0
 8000efe:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef retVal = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	74fb      	strb	r3, [r7, #19]
	uint16_t startPage = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	823b      	strh	r3, [r7, #16]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(eeprom_device.at24cxx_page_size)/log(2);
 8000f08:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fac5 	bl	800049c <__aeabi_ui2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	ec43 2b10 	vmov	d0, r2, r3
 8000f1a:	f00c fbc5 	bl	800d6a8 <log>
 8000f1e:	ec51 0b10 	vmov	r0, r1, d0
 8000f22:	a341      	add	r3, pc, #260	; (adr r3, 8001028 <at24cxx_read+0x140>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fc5c 	bl	80007e4 <__aeabi_ddiv>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fddc 	bl	8000af0 <__aeabi_d2iz>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60fb      	str	r3, [r7, #12]

	// calculate the start page and the end page

	if (offset >= eeprom_device.at24cxx_page_size)
 8000f3c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000f40:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d30b      	bcc.n	8000f60 <at24cxx_read+0x78>
	{
		startPage = page + 1;
 8000f48:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	823b      	strh	r3, [r7, #16]
		offset = offset - eeprom_device.at24cxx_page_size;
 8000f50:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000f54:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8000f5e:	e002      	b.n	8000f66 <at24cxx_read+0x7e>
	}
	else
	{
		startPage = page;
 8000f60:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000f64:	823b      	strh	r3, [r7, #16]
	}

	uint16_t endPage = startPage + ((size+offset)/eeprom_device.at24cxx_page_size);
 8000f66:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8000f6a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000f6e:	4413      	add	r3, r2
 8000f70:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	8a3b      	ldrh	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	817b      	strh	r3, [r7, #10]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8000f80:	897a      	ldrh	r2, [r7, #10]
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	813b      	strh	r3, [r7, #8]


	while (current_page < numofpages && retVal == HAL_OK)
 8000f8c:	e03b      	b.n	8001006 <at24cxx_read+0x11e>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000f8e:	8a3a      	ldrh	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	80fb      	strh	r3, [r7, #6]
		uint16_t bytesremaining = bytestowrite(eeprom_device.at24cxx_page_size, size, offset);  // calculate the remaining bytes to be written
 8000fa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000fa6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8000faa:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe16 	bl	8000be0 <bytestowrite>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	80bb      	strh	r3, [r7, #4]

		retVal = HAL_I2C_Mem_Read(&eeprom_device.i2c_device, eeprom_device.at24cxx_address, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8000fb8:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000fc0:	4413      	add	r3, r2
 8000fc2:	88f8      	ldrh	r0, [r7, #6]
 8000fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc8:	9202      	str	r2, [sp, #8]
 8000fca:	88ba      	ldrh	r2, [r7, #4]
 8000fcc:	9201      	str	r2, [sp, #4]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f107 0020 	add.w	r0, r7, #32
 8000fd8:	f004 f936 	bl	8005248 <HAL_I2C_Mem_Read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	74fb      	strb	r3, [r7, #19]
		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000fe0:	8a3b      	ldrh	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	823b      	strh	r3, [r7, #16]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		size = size-bytesremaining;  // reduce the size of the bytes
 8000fec:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		pos += bytesremaining;  // update the position for the data buffer
 8000ff8:	8afa      	ldrh	r2, [r7, #22]
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	82fb      	strh	r3, [r7, #22]

		current_page++;
 8001000:	8abb      	ldrh	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	82bb      	strh	r3, [r7, #20]
	while (current_page < numofpages && retVal == HAL_OK)
 8001006:	8aba      	ldrh	r2, [r7, #20]
 8001008:	893b      	ldrh	r3, [r7, #8]
 800100a:	429a      	cmp	r2, r3
 800100c:	d202      	bcs.n	8001014 <at24cxx_read+0x12c>
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0bc      	beq.n	8000f8e <at24cxx_read+0xa6>
	}
	return retVal;
 8001014:	7cfb      	ldrb	r3, [r7, #19]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001020:	b004      	add	sp, #16
 8001022:	4770      	bx	lr
 8001024:	f3af 8000 	nop.w
 8001028:	fefa39ef 	.word	0xfefa39ef
 800102c:	3fe62e42 	.word	0x3fe62e42

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	b0a5      	sub	sp, #148	; 0x94
 8001036:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 fb16 	bl	8002668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 faa4 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 fca0 	bl	8001984 <MX_GPIO_Init>
  MX_DMA_Init();
 8001044:	f000 fc74 	bl	8001930 <MX_DMA_Init>
  MX_DAC1_Init();
 8001048:	f000 fbb0 	bl	80017ac <MX_DAC1_Init>
  MX_I2C2_Init();
 800104c:	f000 fc08 	bl	8001860 <MX_I2C2_Init>
  MX_USB_Device_Init();
 8001050:	f00b fd80 	bl	800cb54 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8001054:	f000 fae4 	bl	8001620 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001058:	f000 fc42 	bl	80018e0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 5);
 800105c:	2205      	movs	r2, #5
 800105e:	49a9      	ldr	r1, [pc, #676]	; (8001304 <main+0x2d4>)
 8001060:	48a9      	ldr	r0, [pc, #676]	; (8001308 <main+0x2d8>)
 8001062:	f001 ff65 	bl	8002f30 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8001066:	2100      	movs	r1, #0
 8001068:	48a8      	ldr	r0, [pc, #672]	; (800130c <main+0x2dc>)
 800106a:	f003 f802 	bl	8004072 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800106e:	2110      	movs	r1, #16
 8001070:	48a6      	ldr	r0, [pc, #664]	; (800130c <main+0x2dc>)
 8001072:	f002 fffe 	bl	8004072 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim17);
 8001076:	48a6      	ldr	r0, [pc, #664]	; (8001310 <main+0x2e0>)
 8001078:	f007 fb6c 	bl	8008754 <HAL_TIM_Base_Start_IT>

  AT24CXX_Init();
 800107c:	f000 fcce 	bl	8001a1c <AT24CXX_Init>


  uint8_t configCheck;

  if (at24cxx_connected(eeprom_chip) == HAL_OK)
 8001080:	4ca4      	ldr	r4, [pc, #656]	; (8001314 <main+0x2e4>)
 8001082:	4668      	mov	r0, sp
 8001084:	f104 0310 	add.w	r3, r4, #16
 8001088:	2244      	movs	r2, #68	; 0x44
 800108a:	4619      	mov	r1, r3
 800108c:	f00c fafc 	bl	800d688 <memcpy>
 8001090:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001094:	f7ff fdbf 	bl	8000c16 <at24cxx_connected>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d16c      	bne.n	8001178 <main+0x148>
  {
	  at24cxx_read(eeprom_chip, 0, 0, (uint8_t*)&configCheck, sizeof (configCheck));
 800109e:	4c9d      	ldr	r4, [pc, #628]	; (8001314 <main+0x2e4>)
 80010a0:	2301      	movs	r3, #1
 80010a2:	9314      	str	r3, [sp, #80]	; 0x50
 80010a4:	f107 0315 	add.w	r3, r7, #21
 80010a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80010aa:	2300      	movs	r3, #0
 80010ac:	9312      	str	r3, [sp, #72]	; 0x48
 80010ae:	2300      	movs	r3, #0
 80010b0:	9311      	str	r3, [sp, #68]	; 0x44
 80010b2:	4668      	mov	r0, sp
 80010b4:	f104 0310 	add.w	r3, r4, #16
 80010b8:	2244      	movs	r2, #68	; 0x44
 80010ba:	4619      	mov	r1, r3
 80010bc:	f00c fae4 	bl	800d688 <memcpy>
 80010c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010c4:	f7ff ff10 	bl	8000ee8 <at24cxx_read>

	  if (configCheck == 0xff)
 80010c8:	7d7b      	ldrb	r3, [r7, #21]
 80010ca:	2bff      	cmp	r3, #255	; 0xff
 80010cc:	d12c      	bne.n	8001128 <main+0xf8>
	  {
		  // chip is not initialised, so write a default configuration...
		  create_initial_config(&ts_config, &ts_signature);
 80010ce:	4992      	ldr	r1, [pc, #584]	; (8001318 <main+0x2e8>)
 80010d0:	4892      	ldr	r0, [pc, #584]	; (800131c <main+0x2ec>)
 80010d2:	f001 f80f 	bl	80020f4 <create_initial_config>

		  at24cxx_write(eeprom_chip, TS_SIGNATURE_PAGE, 0, (uint8_t*)&ts_signature, sizeof(ts_signature));
 80010d6:	4c8f      	ldr	r4, [pc, #572]	; (8001314 <main+0x2e4>)
 80010d8:	2340      	movs	r3, #64	; 0x40
 80010da:	9314      	str	r3, [sp, #80]	; 0x50
 80010dc:	4b8e      	ldr	r3, [pc, #568]	; (8001318 <main+0x2e8>)
 80010de:	9313      	str	r3, [sp, #76]	; 0x4c
 80010e0:	2300      	movs	r3, #0
 80010e2:	9312      	str	r3, [sp, #72]	; 0x48
 80010e4:	2300      	movs	r3, #0
 80010e6:	9311      	str	r3, [sp, #68]	; 0x44
 80010e8:	4668      	mov	r0, sp
 80010ea:	f104 0310 	add.w	r3, r4, #16
 80010ee:	2244      	movs	r2, #68	; 0x44
 80010f0:	4619      	mov	r1, r3
 80010f2:	f00c fac9 	bl	800d688 <memcpy>
 80010f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010fa:	f7ff fe5d 	bl	8000db8 <at24cxx_write>
		  at24cxx_write(eeprom_chip, TS_CONFIG_PAGE, 0, (uint8_t*)&ts_config, sizeof(ts_config));
 80010fe:	4c85      	ldr	r4, [pc, #532]	; (8001314 <main+0x2e4>)
 8001100:	2352      	movs	r3, #82	; 0x52
 8001102:	9314      	str	r3, [sp, #80]	; 0x50
 8001104:	4b85      	ldr	r3, [pc, #532]	; (800131c <main+0x2ec>)
 8001106:	9313      	str	r3, [sp, #76]	; 0x4c
 8001108:	2300      	movs	r3, #0
 800110a:	9312      	str	r3, [sp, #72]	; 0x48
 800110c:	2305      	movs	r3, #5
 800110e:	9311      	str	r3, [sp, #68]	; 0x44
 8001110:	4668      	mov	r0, sp
 8001112:	f104 0310 	add.w	r3, r4, #16
 8001116:	2244      	movs	r2, #68	; 0x44
 8001118:	4619      	mov	r1, r3
 800111a:	f00c fab5 	bl	800d688 <memcpy>
 800111e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001122:	f7ff fe49 	bl	8000db8 <at24cxx_write>
 8001126:	e027      	b.n	8001178 <main+0x148>
	  }
	  else
	  {
		  at24cxx_read(eeprom_chip, TS_SIGNATURE_PAGE, 0, (uint8_t*)&ts_signature, sizeof(ts_signature));
 8001128:	4c7a      	ldr	r4, [pc, #488]	; (8001314 <main+0x2e4>)
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	9314      	str	r3, [sp, #80]	; 0x50
 800112e:	4b7a      	ldr	r3, [pc, #488]	; (8001318 <main+0x2e8>)
 8001130:	9313      	str	r3, [sp, #76]	; 0x4c
 8001132:	2300      	movs	r3, #0
 8001134:	9312      	str	r3, [sp, #72]	; 0x48
 8001136:	2300      	movs	r3, #0
 8001138:	9311      	str	r3, [sp, #68]	; 0x44
 800113a:	4668      	mov	r0, sp
 800113c:	f104 0310 	add.w	r3, r4, #16
 8001140:	2244      	movs	r2, #68	; 0x44
 8001142:	4619      	mov	r1, r3
 8001144:	f00c faa0 	bl	800d688 <memcpy>
 8001148:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800114c:	f7ff fecc 	bl	8000ee8 <at24cxx_read>
		  at24cxx_read(eeprom_chip, TS_CONFIG_PAGE, 0, (uint8_t*)&ts_config, sizeof(ts_config));
 8001150:	4c70      	ldr	r4, [pc, #448]	; (8001314 <main+0x2e4>)
 8001152:	2352      	movs	r3, #82	; 0x52
 8001154:	9314      	str	r3, [sp, #80]	; 0x50
 8001156:	4b71      	ldr	r3, [pc, #452]	; (800131c <main+0x2ec>)
 8001158:	9313      	str	r3, [sp, #76]	; 0x4c
 800115a:	2300      	movs	r3, #0
 800115c:	9312      	str	r3, [sp, #72]	; 0x48
 800115e:	2305      	movs	r3, #5
 8001160:	9311      	str	r3, [sp, #68]	; 0x44
 8001162:	4668      	mov	r0, sp
 8001164:	f104 0310 	add.w	r3, r4, #16
 8001168:	2244      	movs	r2, #68	; 0x44
 800116a:	4619      	mov	r1, r3
 800116c:	f00c fa8c 	bl	800d688 <memcpy>
 8001170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001174:	f7ff feb8 	bl	8000ee8 <at24cxx_read>
	  at24cxx_write_16(eeprom_chip, 0, 0, data16_w);
	  data16_r = at24cxx_read_16(eeprom_chip, 0, 0);
	  */
  }

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2284);
 8001178:	f640 03ec 	movw	r3, #2284	; 0x8ec
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	4862      	ldr	r0, [pc, #392]	; (800130c <main+0x2dc>)
 8001182:	f002 ffc9 	bl	8004118 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3999);
 8001186:	f640 739f 	movw	r3, #3999	; 0xf9f
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	485f      	ldr	r0, [pc, #380]	; (800130c <main+0x2dc>)
 8001190:	f002 ffc2 	bl	8004118 <HAL_DAC_SetValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (received_data)
 8001194:	4b62      	ldr	r3, [pc, #392]	; (8001320 <main+0x2f0>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0fb      	beq.n	8001194 <main+0x164>
	  {
		  // do stuff with new received data....

		  if (received_data_length == 1)
 800119c:	4b61      	ldr	r3, [pc, #388]	; (8001324 <main+0x2f4>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	f040 80de 	bne.w	8001362 <main+0x332>
		  {
			  // we have got a single byte command...

			  switch (UserRxBufferFS[0])
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <main+0x2f8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3b41      	subs	r3, #65	; 0x41
 80011ac:	2b19      	cmp	r3, #25
 80011ae:	f200 80d3 	bhi.w	8001358 <main+0x328>
 80011b2:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <main+0x188>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	080012b1 	.word	0x080012b1
 80011bc:	08001359 	.word	0x08001359
 80011c0:	08001359 	.word	0x08001359
 80011c4:	08001359 	.word	0x08001359
 80011c8:	08001359 	.word	0x08001359
 80011cc:	08001293 	.word	0x08001293
 80011d0:	08001359 	.word	0x08001359
 80011d4:	08001359 	.word	0x08001359
 80011d8:	08001359 	.word	0x08001359
 80011dc:	08001359 	.word	0x08001359
 80011e0:	08001359 	.word	0x08001359
 80011e4:	08001359 	.word	0x08001359
 80011e8:	08001359 	.word	0x08001359
 80011ec:	08001359 	.word	0x08001359
 80011f0:	08001359 	.word	0x08001359
 80011f4:	08001359 	.word	0x08001359
 80011f8:	0800129d 	.word	0x0800129d
 80011fc:	08001359 	.word	0x08001359
 8001200:	080012a7 	.word	0x080012a7
 8001204:	08001359 	.word	0x08001359
 8001208:	08001359 	.word	0x08001359
 800120c:	08001359 	.word	0x08001359
 8001210:	08001359 	.word	0x08001359
 8001214:	08001359 	.word	0x08001359
 8001218:	08001359 	.word	0x08001359
 800121c:	08001221 	.word	0x08001221
			  {
				  case 'Z':
					  at24cxx_erase_chip(eeprom_chip);
 8001220:	4c3c      	ldr	r4, [pc, #240]	; (8001314 <main+0x2e4>)
 8001222:	4668      	mov	r0, sp
 8001224:	f104 0310 	add.w	r3, r4, #16
 8001228:	2244      	movs	r2, #68	; 0x44
 800122a:	4619      	mov	r1, r3
 800122c:	f00c fa2c 	bl	800d688 <memcpy>
 8001230:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001234:	f7ff fd90 	bl	8000d58 <at24cxx_erase_chip>

					  create_initial_config(&ts_config, &ts_signature);
 8001238:	4937      	ldr	r1, [pc, #220]	; (8001318 <main+0x2e8>)
 800123a:	4838      	ldr	r0, [pc, #224]	; (800131c <main+0x2ec>)
 800123c:	f000 ff5a 	bl	80020f4 <create_initial_config>

					  at24cxx_write(eeprom_chip, TS_SIGNATURE_PAGE, 0, (uint8_t*)&ts_signature, sizeof(ts_signature));
 8001240:	4c34      	ldr	r4, [pc, #208]	; (8001314 <main+0x2e4>)
 8001242:	2340      	movs	r3, #64	; 0x40
 8001244:	9314      	str	r3, [sp, #80]	; 0x50
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <main+0x2e8>)
 8001248:	9313      	str	r3, [sp, #76]	; 0x4c
 800124a:	2300      	movs	r3, #0
 800124c:	9312      	str	r3, [sp, #72]	; 0x48
 800124e:	2300      	movs	r3, #0
 8001250:	9311      	str	r3, [sp, #68]	; 0x44
 8001252:	4668      	mov	r0, sp
 8001254:	f104 0310 	add.w	r3, r4, #16
 8001258:	2244      	movs	r2, #68	; 0x44
 800125a:	4619      	mov	r1, r3
 800125c:	f00c fa14 	bl	800d688 <memcpy>
 8001260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001264:	f7ff fda8 	bl	8000db8 <at24cxx_write>
					  at24cxx_write(eeprom_chip, TS_CONFIG_PAGE, 0, (uint8_t*)&ts_config, sizeof(ts_config));
 8001268:	4c2a      	ldr	r4, [pc, #168]	; (8001314 <main+0x2e4>)
 800126a:	2352      	movs	r3, #82	; 0x52
 800126c:	9314      	str	r3, [sp, #80]	; 0x50
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <main+0x2ec>)
 8001270:	9313      	str	r3, [sp, #76]	; 0x4c
 8001272:	2300      	movs	r3, #0
 8001274:	9312      	str	r3, [sp, #72]	; 0x48
 8001276:	2305      	movs	r3, #5
 8001278:	9311      	str	r3, [sp, #68]	; 0x44
 800127a:	4668      	mov	r0, sp
 800127c:	f104 0310 	add.w	r3, r4, #16
 8001280:	2244      	movs	r2, #68	; 0x44
 8001282:	4619      	mov	r1, r3
 8001284:	f00c fa00 	bl	800d688 <memcpy>
 8001288:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800128c:	f7ff fd94 	bl	8000db8 <at24cxx_write>
					  break;
 8001290:	e067      	b.n	8001362 <main+0x332>
				  case 'F':
					  CDC_Transmit_FS((uint8_t*) ts_signature.version, sizeof(ts_signature.version));
 8001292:	2103      	movs	r1, #3
 8001294:	4825      	ldr	r0, [pc, #148]	; (800132c <main+0x2fc>)
 8001296:	f00b fd77 	bl	800cd88 <CDC_Transmit_FS>
					  break;
 800129a:	e062      	b.n	8001362 <main+0x332>
				  case 'Q':
					  CDC_Transmit_FS((uint8_t*) ts_signature.signature, sizeof(ts_signature.signature));
 800129c:	211b      	movs	r1, #27
 800129e:	481e      	ldr	r0, [pc, #120]	; (8001318 <main+0x2e8>)
 80012a0:	f00b fd72 	bl	800cd88 <CDC_Transmit_FS>
					  break;
 80012a4:	e05d      	b.n	8001362 <main+0x332>
				  case 'S':
					  CDC_Transmit_FS((uint8_t*) ts_signature.version_info, sizeof(ts_signature.version_info));
 80012a6:	2122      	movs	r1, #34	; 0x22
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <main+0x300>)
 80012aa:	f00b fd6d 	bl	800cd88 <CDC_Transmit_FS>
					  break;
 80012ae:	e058      	b.n	8001362 <main+0x332>
				  case 'A':
					  livedata[0] = hfm1_in_v;
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <main+0x304>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	4b20      	ldr	r3, [pc, #128]	; (8001338 <main+0x308>)
 80012b6:	801a      	strh	r2, [r3, #0]
					  livedata[1] = hfm2_in_v;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <main+0x30c>)
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <main+0x308>)
 80012be:	805a      	strh	r2, [r3, #2]
					  livedata[2] = hfm1_air;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <main+0x310>)
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <main+0x308>)
 80012c6:	809a      	strh	r2, [r3, #4]
					  livedata[3] = hfm2_air;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <main+0x314>)
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <main+0x308>)
 80012ce:	80da      	strh	r2, [r3, #6]
					  livedata[4] = hfm1_out_v;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <main+0x318>)
 80012d2:	881a      	ldrh	r2, [r3, #0]
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <main+0x308>)
 80012d6:	811a      	strh	r2, [r3, #8]
					  livedata[5] = hfm2_out_v;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <main+0x31c>)
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <main+0x308>)
 80012de:	815a      	strh	r2, [r3, #10]
					  livedata[6] = mcu_temp;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <main+0x320>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <main+0x308>)
 80012ea:	819a      	strh	r2, [r3, #12]
					  livedata[7] = vref;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <main+0x324>)
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <main+0x308>)
 80012f6:	81da      	strh	r2, [r3, #14]
					  CDC_Transmit_FS((uint8_t*) livedata, sizeof(livedata));
 80012f8:	2110      	movs	r1, #16
 80012fa:	480f      	ldr	r0, [pc, #60]	; (8001338 <main+0x308>)
 80012fc:	f00b fd44 	bl	800cd88 <CDC_Transmit_FS>
					  break;
 8001300:	e02f      	b.n	8001362 <main+0x332>
 8001302:	bf00      	nop
 8001304:	200003e8 	.word	0x200003e8
 8001308:	200001f8 	.word	0x200001f8
 800130c:	200002c4 	.word	0x200002c4
 8001310:	20000324 	.word	0x20000324
 8001314:	20000370 	.word	0x20000370
 8001318:	20000448 	.word	0x20000448
 800131c:	200003f4 	.word	0x200003f4
 8001320:	20000f62 	.word	0x20000f62
 8001324:	20000f60 	.word	0x20000f60
 8001328:	20000760 	.word	0x20000760
 800132c:	20000463 	.word	0x20000463
 8001330:	20000466 	.word	0x20000466
 8001334:	200003d8 	.word	0x200003d8
 8001338:	200003c4 	.word	0x200003c4
 800133c:	200003da 	.word	0x200003da
 8001340:	200003dc 	.word	0x200003dc
 8001344:	200003de 	.word	0x200003de
 8001348:	200003e0 	.word	0x200003e0
 800134c:	200003e2 	.word	0x200003e2
 8001350:	200003d4 	.word	0x200003d4
 8001354:	200003d6 	.word	0x200003d6

				  default:
					  CDC_Transmit_FS((uint8_t*) "Not implemented", 15);
 8001358:	210f      	movs	r1, #15
 800135a:	4885      	ldr	r0, [pc, #532]	; (8001570 <main+0x540>)
 800135c:	f00b fd14 	bl	800cd88 <CDC_Transmit_FS>
					  break;
 8001360:	bf00      	nop
			  }
		  }

		  if (received_data_length > 1)
 8001362:	4b84      	ldr	r3, [pc, #528]	; (8001574 <main+0x544>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	f240 80fe 	bls.w	8001568 <main+0x538>
		  {
 800136c:	466b      	mov	r3, sp
 800136e:	607b      	str	r3, [r7, #4]
			  // we have got a multibyte command...
			  uint8_t cmd[received_data_length];
 8001370:	4b80      	ldr	r3, [pc, #512]	; (8001574 <main+0x544>)
 8001372:	8819      	ldrh	r1, [r3, #0]
 8001374:	460b      	mov	r3, r1
 8001376:	3b01      	subs	r3, #1
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
 800137a:	b28b      	uxth	r3, r1
 800137c:	2200      	movs	r2, #0
 800137e:	4698      	mov	r8, r3
 8001380:	4691      	mov	r9, r2
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800138e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001396:	b28b      	uxth	r3, r1
 8001398:	2200      	movs	r2, #0
 800139a:	469a      	mov	sl, r3
 800139c:	4693      	mov	fp, r2
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013b2:	460b      	mov	r3, r1
 80013b4:	3307      	adds	r3, #7
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	ebad 0d03 	sub.w	sp, sp, r3
 80013be:	ab16      	add	r3, sp, #88	; 0x58
 80013c0:	3300      	adds	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			  memcpy(cmd, UserRxBufferFS, received_data_length);
 80013c4:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <main+0x544>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	496b      	ldr	r1, [pc, #428]	; (8001578 <main+0x548>)
 80013cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013ce:	f00c f95b 	bl	800d688 <memcpy>

			  switch(cmd[0])
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b57      	cmp	r3, #87	; 0x57
 80013d8:	f000 808b 	beq.w	80014f2 <main+0x4c2>
 80013dc:	2b57      	cmp	r3, #87	; 0x57
 80013de:	f300 80c1 	bgt.w	8001564 <main+0x534>
 80013e2:	2b42      	cmp	r3, #66	; 0x42
 80013e4:	d002      	beq.n	80013ec <main+0x3bc>
 80013e6:	2b52      	cmp	r3, #82	; 0x52
 80013e8:	d01f      	beq.n	800142a <main+0x3fa>
 80013ea:	e0bb      	b.n	8001564 <main+0x534>
			  {
			  	  case 'B':
					  {
						  uint16_t page_indentifier = word(cmd[2], cmd[1]);
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	789b      	ldrb	r3, [r3, #2]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	82fb      	strh	r3, [r7, #22]
						  at24cxx_write(eeprom_chip, page_indentifier, 0, (uint8_t*)&ts_config, sizeof(ts_config));
 8001400:	4c5e      	ldr	r4, [pc, #376]	; (800157c <main+0x54c>)
 8001402:	2352      	movs	r3, #82	; 0x52
 8001404:	9314      	str	r3, [sp, #80]	; 0x50
 8001406:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <main+0x550>)
 8001408:	9313      	str	r3, [sp, #76]	; 0x4c
 800140a:	2300      	movs	r3, #0
 800140c:	9312      	str	r3, [sp, #72]	; 0x48
 800140e:	8afb      	ldrh	r3, [r7, #22]
 8001410:	9311      	str	r3, [sp, #68]	; 0x44
 8001412:	4668      	mov	r0, sp
 8001414:	f104 0310 	add.w	r3, r4, #16
 8001418:	2244      	movs	r2, #68	; 0x44
 800141a:	4619      	mov	r1, r3
 800141c:	f00c f934 	bl	800d688 <memcpy>
 8001420:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001424:	f7ff fcc8 	bl	8000db8 <at24cxx_write>
					  }
					  break;
 8001428:	e09c      	b.n	8001564 <main+0x534>
			  	  case 'R':
					  {
 800142a:	466b      	mov	r3, sp
 800142c:	603b      	str	r3, [r7, #0]
					  /* reading page data, 6 bytes expected
					   * 2 bytes: page identifier
					   * 2 bytes: offset
					   * 2 bytes: length
					  */
						  uint16_t page_indentifier = word(cmd[2], cmd[1]);
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	789b      	ldrb	r3, [r3, #2]
 8001432:	021b      	lsls	r3, r3, #8
 8001434:	b21a      	sxth	r2, r3
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	84bb      	strh	r3, [r7, #36]	; 0x24
						  uint16_t offset = word(cmd[4], cmd[3]);
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	791b      	ldrb	r3, [r3, #4]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	78db      	ldrb	r3, [r3, #3]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	847b      	strh	r3, [r7, #34]	; 0x22
						  uint16_t lenght = word(cmd[6], cmd[5]);
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001458:	799b      	ldrb	r3, [r3, #6]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	b21a      	sxth	r2, r3
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	795b      	ldrb	r3, [r3, #5]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	843b      	strh	r3, [r7, #32]
						  uint8_t config[lenght];
 800146a:	8c39      	ldrh	r1, [r7, #32]
 800146c:	460b      	mov	r3, r1
 800146e:	3b01      	subs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	b28b      	uxth	r3, r1
 8001474:	2200      	movs	r2, #0
 8001476:	461d      	mov	r5, r3
 8001478:	4616      	mov	r6, r2
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	00f3      	lsls	r3, r6, #3
 8001484:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001488:	00ea      	lsls	r2, r5, #3
 800148a:	b28b      	uxth	r3, r1
 800148c:	2200      	movs	r2, #0
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	60fa      	str	r2, [r7, #12]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	00c3      	lsls	r3, r0, #3
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	00c2      	lsls	r2, r0, #3
 80014a8:	460b      	mov	r3, r1
 80014aa:	3307      	adds	r3, #7
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	ebad 0d03 	sub.w	sp, sp, r3
 80014b4:	ab16      	add	r3, sp, #88	; 0x58
 80014b6:	3300      	adds	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]

						  at24cxx_read(eeprom_chip, page_indentifier, offset, (uint8_t*)&config, lenght);
 80014ba:	4c30      	ldr	r4, [pc, #192]	; (800157c <main+0x54c>)
 80014bc:	8c3b      	ldrh	r3, [r7, #32]
 80014be:	9314      	str	r3, [sp, #80]	; 0x50
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80014c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014c6:	9312      	str	r3, [sp, #72]	; 0x48
 80014c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ca:	9311      	str	r3, [sp, #68]	; 0x44
 80014cc:	4668      	mov	r0, sp
 80014ce:	f104 0110 	add.w	r1, r4, #16
 80014d2:	2344      	movs	r3, #68	; 0x44
 80014d4:	461a      	mov	r2, r3
 80014d6:	f00c f8d7 	bl	800d688 <memcpy>
 80014da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014de:	f7ff fd03 	bl	8000ee8 <at24cxx_read>
						  CDC_Transmit_FS((uint8_t*) &config, lenght);
 80014e2:	8c3b      	ldrh	r3, [r7, #32]
 80014e4:	4619      	mov	r1, r3
 80014e6:	69b8      	ldr	r0, [r7, #24]
 80014e8:	f00b fc4e 	bl	800cd88 <CDC_Transmit_FS>
 80014ec:	f8d7 d000 	ldr.w	sp, [r7]
					  }
					  break;
 80014f0:	e038      	b.n	8001564 <main+0x534>
						   * 2 bytes: byte array
						   */

						  // the real config is starts at offset 64, 0-63 is signature...

						  uint16_t page_indentifier = word(cmd[2], cmd[1]);
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	857b      	strh	r3, [r7, #42]	; 0x2a
						  uint16_t offset = word(cmd[4], cmd[3]);
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	78db      	ldrb	r3, [r3, #3]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21b      	sxth	r3, r3
 8001518:	853b      	strh	r3, [r7, #40]	; 0x28
						  uint16_t lenght = word(cmd[6], cmd[5]);
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21a      	sxth	r2, r3
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	795b      	ldrb	r3, [r3, #5]
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21b      	sxth	r3, r3
 800152c:	84fb      	strh	r3, [r7, #38]	; 0x26
						  uint16_t value = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	86fb      	strh	r3, [r7, #54]	; 0x36

						  if (offset == lenght)
 8001532:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001536:	429a      	cmp	r2, r3
 8001538:	d103      	bne.n	8001542 <main+0x512>
						  {
							  // single byte value
							  value = cmd[7];
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	79db      	ldrb	r3, [r3, #7]
 800153e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001540:	e009      	b.n	8001556 <main+0x526>
						  }
						  else
						  {
							  // two byte value
							  value = word(cmd[8], cmd[7]);
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	7a1b      	ldrb	r3, [r3, #8]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	79db      	ldrb	r3, [r3, #7]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	86fb      	strh	r3, [r7, #54]	; 0x36
						  }

						  set_page_value(offset, value, &ts_config);
 8001556:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8001558:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <main+0x550>)
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fe87 	bl	8002270 <set_page_value>
					  }
			  		  break;
 8001562:	bf00      	nop
 8001564:	f8d7 d004 	ldr.w	sp, [r7, #4]
			  }

		  }

		  received_data = false;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <main+0x554>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
	  if (received_data)
 800156e:	e611      	b.n	8001194 <main+0x164>
 8001570:	0800db0c 	.word	0x0800db0c
 8001574:	20000f60 	.word	0x20000f60
 8001578:	20000760 	.word	0x20000760
 800157c:	20000370 	.word	0x20000370
 8001580:	200003f4 	.word	0x200003f4
 8001584:	20000f62 	.word	0x20000f62

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	2238      	movs	r2, #56	; 0x38
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f00c f844 	bl	800d624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ae:	f006 f8dd 	bl	800776c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80015b2:	2321      	movs	r3, #33	; 0x21
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c4:	2303      	movs	r3, #3
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80015cc:	2318      	movs	r3, #24
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f006 f967 	bl	80078b4 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80015ec:	f000 fbc0 	bl	8001d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2303      	movs	r3, #3
 80015f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2104      	movs	r1, #4
 8001608:	4618      	mov	r0, r3
 800160a:	f006 fc6b 	bl	8007ee4 <HAL_RCC_ClockConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001614:	f000 fbac 	bl	8001d70 <Error_Handler>
  }
}
 8001618:	bf00      	nop
 800161a:	3750      	adds	r7, #80	; 0x50
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2220      	movs	r2, #32
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f00b fff3 	bl	800d624 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800163e:	4b55      	ldr	r3, [pc, #340]	; (8001794 <MX_ADC1_Init+0x174>)
 8001640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001644:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001646:	4b53      	ldr	r3, [pc, #332]	; (8001794 <MX_ADC1_Init+0x174>)
 8001648:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800164c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164e:	4b51      	ldr	r3, [pc, #324]	; (8001794 <MX_ADC1_Init+0x174>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001654:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <MX_ADC1_Init+0x174>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800165a:	4b4e      	ldr	r3, [pc, #312]	; (8001794 <MX_ADC1_Init+0x174>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <MX_ADC1_Init+0x174>)
 8001662:	2201      	movs	r2, #1
 8001664:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <MX_ADC1_Init+0x174>)
 8001668:	2204      	movs	r2, #4
 800166a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <MX_ADC1_Init+0x174>)
 800166e:	2200      	movs	r2, #0
 8001670:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001672:	4b48      	ldr	r3, [pc, #288]	; (8001794 <MX_ADC1_Init+0x174>)
 8001674:	2201      	movs	r2, #1
 8001676:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 5;
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <MX_ADC1_Init+0x174>)
 800167a:	2205      	movs	r2, #5
 800167c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167e:	4b45      	ldr	r3, [pc, #276]	; (8001794 <MX_ADC1_Init+0x174>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <MX_ADC1_Init+0x174>)
 8001688:	2200      	movs	r2, #0
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <MX_ADC1_Init+0x174>)
 800168e:	2200      	movs	r2, #0
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <MX_ADC1_Init+0x174>)
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800169a:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <MX_ADC1_Init+0x174>)
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80016a0:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <MX_ADC1_Init+0x174>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a8:	483a      	ldr	r0, [pc, #232]	; (8001794 <MX_ADC1_Init+0x174>)
 80016aa:	f001 fab7 	bl	8002c1c <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80016b4:	f000 fb5c 	bl	8001d70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	4834      	ldr	r0, [pc, #208]	; (8001794 <MX_ADC1_Init+0x174>)
 80016c4:	f002 fb00 	bl	8003cc8 <HAL_ADCEx_MultiModeConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80016ce:	f000 fb4f 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <MX_ADC1_Init+0x178>)
 80016d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d6:	2306      	movs	r3, #6
 80016d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80016da:	2303      	movs	r3, #3
 80016dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016de:	237f      	movs	r3, #127	; 0x7f
 80016e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016e2:	2304      	movs	r3, #4
 80016e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4829      	ldr	r0, [pc, #164]	; (8001794 <MX_ADC1_Init+0x174>)
 80016f0:	f001 fcf0 	bl	80030d4 <HAL_ADC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016fa:	f000 fb39 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <MX_ADC1_Init+0x17c>)
 8001700:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001702:	230c      	movs	r3, #12
 8001704:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	4619      	mov	r1, r3
 800170a:	4822      	ldr	r0, [pc, #136]	; (8001794 <MX_ADC1_Init+0x174>)
 800170c:	f001 fce2 	bl	80030d4 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001716:	f000 fb2b 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_ADC1_Init+0x180>)
 800171c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800171e:	2312      	movs	r3, #18
 8001720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	481b      	ldr	r0, [pc, #108]	; (8001794 <MX_ADC1_Init+0x174>)
 8001728:	f001 fcd4 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001732:	f000 fb1d 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_ADC1_Init+0x184>)
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800173a:	2318      	movs	r3, #24
 800173c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800173e:	2306      	movs	r3, #6
 8001740:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <MX_ADC1_Init+0x174>)
 8001748:	f001 fcc4 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001752:	f000 fb0d 	bl	8001d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_ADC1_Init+0x188>)
 8001758:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800175a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001760:	2305      	movs	r3, #5
 8001762:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	4619      	mov	r1, r3
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <MX_ADC1_Init+0x174>)
 800176a:	f001 fcb3 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8001774:	f000 fafc 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001778:	217f      	movs	r1, #127	; 0x7f
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_ADC1_Init+0x174>)
 800177c:	f002 fa42 	bl	8003c04 <HAL_ADCEx_Calibration_Start>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x16a>
  {
	  Error_Handler();
 8001786:	f000 faf3 	bl	8001d70 <Error_Handler>
  }

  /* USER CODE END ADC1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	; 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001f8 	.word	0x200001f8
 8001798:	04300002 	.word	0x04300002
 800179c:	08600004 	.word	0x08600004
 80017a0:	0c900008 	.word	0x0c900008
 80017a4:	c3210000 	.word	0xc3210000
 80017a8:	cb840000 	.word	0xcb840000

080017ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	; 0x30
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2230      	movs	r2, #48	; 0x30
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00b ff33 	bl	800d624 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_DAC1_Init+0xac>)
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <MX_DAC1_Init+0xb0>)
 80017c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017c4:	4824      	ldr	r0, [pc, #144]	; (8001858 <MX_DAC1_Init+0xac>)
 80017c6:	f002 fc32 	bl	800402e <HAL_DAC_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017d0:	f000 face 	bl	8001d70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80017d4:	2302      	movs	r3, #2
 80017d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4816      	ldr	r0, [pc, #88]	; (8001858 <MX_DAC1_Init+0xac>)
 8001800:	f002 fcb2 	bl	8004168 <HAL_DAC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800180a:	f000 fab1 	bl	8001d70 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	2210      	movs	r2, #16
 8001812:	4619      	mov	r1, r3
 8001814:	4810      	ldr	r0, [pc, #64]	; (8001858 <MX_DAC1_Init+0xac>)
 8001816:	f002 fca7 	bl	8004168 <HAL_DAC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001820:	f000 faa6 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <MX_DAC1_Init+0xac>)
 800182c:	f002 fe44 	bl	80044b8 <HAL_DACEx_SelfCalibrate>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_DAC1_Init+0x8e>
   {
     Error_Handler();
 8001836:	f000 fa9b 	bl	8001d70 <Error_Handler>
   }

  if (HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800183a:	463b      	mov	r3, r7
 800183c:	2210      	movs	r2, #16
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_DAC1_Init+0xac>)
 8001842:	f002 fe39 	bl	80044b8 <HAL_DACEx_SelfCalibrate>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_DAC1_Init+0xa4>
   {
     Error_Handler();
 800184c:	f000 fa90 	bl	8001d70 <Error_Handler>
   }

  /* USER CODE END DAC1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200002c4 	.word	0x200002c4
 800185c:	50000800 	.word	0x50000800

08001860 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <MX_I2C2_Init+0x78>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_I2C2_Init+0x74>)
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <MX_I2C2_Init+0x7c>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001878:	2201      	movs	r2, #1
 800187a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_I2C2_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C2_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C2_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <MX_I2C2_Init+0x74>)
 800189c:	f003 fb30 	bl	8004f00 <HAL_I2C_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018a6:	f000 fa63 	bl	8001d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018aa:	2100      	movs	r1, #0
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <MX_I2C2_Init+0x74>)
 80018ae:	f004 f993 	bl	8005bd8 <HAL_I2CEx_ConfigAnalogFilter>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f000 fa5a 	bl	8001d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018bc:	2100      	movs	r1, #0
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_I2C2_Init+0x74>)
 80018c0:	f004 f9d5 	bl	8005c6e <HAL_I2CEx_ConfigDigitalFilter>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018ca:	f000 fa51 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200002d8 	.word	0x200002d8
 80018d8:	40005800 	.word	0x40005800
 80018dc:	00e057fd 	.word	0x00e057fd

080018e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_TIM17_Init+0x48>)
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <MX_TIM17_Init+0x4c>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 14400-1;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_TIM17_Init+0x48>)
 80018ec:	f643 023f 	movw	r2, #14399	; 0x383f
 80018f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <MX_TIM17_Init+0x48>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1999;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_TIM17_Init+0x48>)
 80018fa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80018fe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_TIM17_Init+0x48>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_TIM17_Init+0x48>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_TIM17_Init+0x48>)
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_TIM17_Init+0x48>)
 8001914:	f006 fec6 	bl	80086a4 <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 800191e:	f000 fa27 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000324 	.word	0x20000324
 800192c:	40014800 	.word	0x40014800

08001930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_DMA_Init+0x50>)
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <MX_DMA_Init+0x50>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6493      	str	r3, [r2, #72]	; 0x48
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_DMA_Init+0x50>)
 8001944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_DMA_Init+0x50>)
 8001950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <MX_DMA_Init+0x50>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6493      	str	r3, [r2, #72]	; 0x48
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_DMA_Init+0x50>)
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	200b      	movs	r0, #11
 800196c:	f002 fb2b 	bl	8003fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001970:	200b      	movs	r0, #11
 8001972:	f002 fb42 	bl	8003ffa <HAL_NVIC_EnableIRQ>

}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_GPIO_Init+0x90>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_GPIO_Init+0x90>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <MX_GPIO_Init+0x94>)
 80019ea:	f003 fa71 	bl	8004ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_Pin LD2_Pin */
  GPIO_InitStruct.Pin = USER_Pin|LD2_Pin;
 80019ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_GPIO_Init+0x94>)
 8001a08:	f003 f8e0 	bl	8004bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000400 	.word	0x48000400

08001a1c <AT24CXX_Init>:

/* USER CODE BEGIN 4 */

static void AT24CXX_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	eeprom_chip.at24cxx_address = 0xA0;
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <AT24CXX_Init+0x34>)
 8001a22:	22a0      	movs	r2, #160	; 0xa0
 8001a24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	eeprom_chip.at24cxx_page_number = 512;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <AT24CXX_Init+0x34>)
 8001a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	eeprom_chip.at24cxx_page_size = 64;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <AT24CXX_Init+0x34>)
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	eeprom_chip.i2c_device = hi2c2;
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <AT24CXX_Init+0x34>)
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <AT24CXX_Init+0x38>)
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	234c      	movs	r3, #76	; 0x4c
 8001a44:	461a      	mov	r2, r3
 8001a46:	f00b fe1f 	bl	800d688 <memcpy>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000370 	.word	0x20000370
 8001a54:	200002d8 	.word	0x200002d8

08001a58 <calc_temperature>:

static int16_t calc_temperature (uint16_t data)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
	 *
	 * TS_DATA is value from ADC
	 *
	 */

	float pre = ((float) data / 3) * 3.3;	// rescale from 3.0 volt to 3.3 volts, since the reference values are taken at 3.0volts
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a6c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001a70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a74:	ee16 0a90 	vmov	r0, s13
 8001a78:	f7fe fd32 	bl	80004e0 <__aeabi_f2d>
 8001a7c:	a325      	add	r3, pc, #148	; (adr r3, 8001b14 <calc_temperature+0xbc>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fd85 	bl	8000590 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f857 	bl	8000b40 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	617b      	str	r3, [r7, #20]
	float first = (float)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)/(float)(*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR);
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <calc_temperature+0xb0>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <calc_temperature+0xb4>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aaa:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001b10 <calc_temperature+0xb8>
 8001aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab2:	edc7 7a04 	vstr	s15, [r7, #16]
	float second = (float)(pre - *TEMPSENSOR_CAL1_ADDR);
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <calc_temperature+0xb4>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	edc7 7a03 	vstr	s15, [r7, #12]
	float third = first * second + 30.0;
 8001ace:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ade:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae2:	edc7 7a02 	vstr	s15, [r7, #8]

	return (int16_t)(third * 100);
 8001ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001b10 <calc_temperature+0xb8>
 8001aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af6:	ee17 3a90 	vmov	r3, s15
 8001afa:	b21b      	sxth	r3, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	1fff75ca 	.word	0x1fff75ca
 8001b0c:	1fff75a8 	.word	0x1fff75a8
 8001b10:	42c80000 	.word	0x42c80000
 8001b14:	66666666 	.word	0x66666666
 8001b18:	400a6666 	.word	0x400a6666

08001b1c <calc_vref>:

static int16_t calc_vref (uint16_t data)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
	/*
	 * Formula:
	 * Vref = Vref_char * VREFINT_CAL / VREFINT_DATA
	 */

	float first = (float)(VREFINT_CAL_VREF * *VREFINT_CAL_ADDR);
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <calc_vref+0x74>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3c:	edc7 7a05 	vstr	s15, [r7, #20]
	float second = first / (float)(data);	// vdda...
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b4a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	edc7 7a04 	vstr	s15, [r7, #16]
	float third = second / (float) 4096 * (float)(data);	// vref
 8001b56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b5a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001b94 <calc_vref+0x78>
 8001b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	edc7 7a03 	vstr	s15, [r7, #12]


	return (int16_t)(third);
 8001b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	b21b      	sxth	r3, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	1fff75aa 	.word	0x1fff75aa
 8001b94:	45800000 	.word	0x45800000

08001b98 <calc_voltage>:

static uint16_t calc_voltage (uint16_t data)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
	float first = 3.3 / (float) 4096;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <calc_voltage+0x88>)
 8001ba4:	613b      	str	r3, [r7, #16]
	float second = first * (float) data;
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb8:	edc7 7a03 	vstr	s15, [r7, #12]
	float third = 0;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]

	if (ts_config.showRealADCVoltages)
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <calc_voltage+0x8c>)
 8001bc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <calc_voltage+0x40>
	{
		third = second;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e00f      	b.n	8001bf8 <calc_voltage+0x60>
	}
	else
	{
		third = second * 1.5151515151;
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7fe fc81 	bl	80004e0 <__aeabi_f2d>
 8001bde:	a30e      	add	r3, pc, #56	; (adr r3, 8001c18 <calc_voltage+0x80>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fcd4 	bl	8000590 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ffa6 	bl	8000b40 <__aeabi_d2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]
	}

	return (uint16_t)(third*1000);
 8001bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bfc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001c28 <calc_voltage+0x90>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	b29b      	uxth	r3, r3
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	83dd6dfa 	.word	0x83dd6dfa
 8001c1c:	3ff83e0f 	.word	0x3ff83e0f
 8001c20:	3a533333 	.word	0x3a533333
 8001c24:	200003f4 	.word	0x200003f4
 8001c28:	447a0000 	.word	0x447a0000

08001c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if (htim == &htim17) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a40      	ldr	r2, [pc, #256]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d179      	bne.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x104>
		mcu_temp = calc_temperature(adc_values[3]);
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c3e:	88db      	ldrh	r3, [r3, #6]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff09 	bl	8001a58 <calc_temperature>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c4c:	801a      	strh	r2, [r3, #0]
		vref = calc_vref(adc_values[4]);
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c50:	891b      	ldrh	r3, [r3, #8]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff62 	bl	8001b1c <calc_vref>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c5e:	801a      	strh	r2, [r3, #0]

		if (ts_config.isChannel1Enabled)
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02a      	beq.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x9a>
		{
			hfm1_in_v = calc_voltage(adc_values[0]);
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff8f 	bl	8001b98 <calc_voltage>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c80:	801a      	strh	r2, [r3, #0]
			hfm1_air = interpolate_voltage2airMass(hfm1_in_v);
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fb3e 	bl	8002308 <interpolate_voltage2airMass>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c92:	801a      	strh	r2, [r3, #0]
			hfm1_out_v = interpolate_airMass2voltage(hfm1_air);
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fbdd 	bl	8002458 <interpolate_airMass2voltage>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001ca4:	801a      	strh	r2, [r3, #0]
			hfm1_out_dac = calculate_dac_value_for_voltage(hfm1_out_v);
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fc88 	bl	80025c0 <calculate_dac_value_for_voltage>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001cb6:	801a      	strh	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, hfm1_out_dac);
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4826      	ldr	r0, [pc, #152]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cc2:	f002 fa29 	bl	8004118 <HAL_DAC_SetValue>
		}

		if (ts_config.isChannel2Enabled)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d02a      	beq.n	8001d2c <HAL_TIM_PeriodElapsedCallback+0x100>
		{
			hfm2_in_v = calc_voltage(adc_values[1]);
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001cd8:	885b      	ldrh	r3, [r3, #2]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff5c 	bl	8001b98 <calc_voltage>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001ce6:	801a      	strh	r2, [r3, #0]
			hfm2_air = interpolate_voltage2airMass(hfm2_in_v);
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fb0b 	bl	8002308 <interpolate_voltage2airMass>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001cf8:	801a      	strh	r2, [r3, #0]
			hfm2_out_v = interpolate_airMass2voltage(hfm2_air);
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fbaa 	bl	8002458 <interpolate_airMass2voltage>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d0a:	801a      	strh	r2, [r3, #0]
			hfm2_out_dac = calculate_dac_value_for_voltage(hfm2_out_v);
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fc55 	bl	80025c0 <calculate_dac_value_for_voltage>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d1c:	801a      	strh	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, hfm2_out_dac);
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2110      	movs	r1, #16
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001d28:	f002 f9f6 	bl	8004118 <HAL_DAC_SetValue>
		}

		int i = 10;
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	60fb      	str	r3, [r7, #12]

	}
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000324 	.word	0x20000324
 8001d3c:	200003e8 	.word	0x200003e8
 8001d40:	200003d4 	.word	0x200003d4
 8001d44:	200003d6 	.word	0x200003d6
 8001d48:	200003f4 	.word	0x200003f4
 8001d4c:	200003d8 	.word	0x200003d8
 8001d50:	200003dc 	.word	0x200003dc
 8001d54:	200003e0 	.word	0x200003e0
 8001d58:	200003e4 	.word	0x200003e4
 8001d5c:	200002c4 	.word	0x200002c4
 8001d60:	200003da 	.word	0x200003da
 8001d64:	200003de 	.word	0x200003de
 8001d68:	200003e2 	.word	0x200003e2
 8001d6c:	200003e6 	.word	0x200003e6

08001d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d74:	b672      	cpsid	i
}
 8001d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <Error_Handler+0x8>
	...

08001d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_MspInit+0x44>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x44>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b09a      	sub	sp, #104	; 0x68
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	2244      	movs	r2, #68	; 0x44
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00b fc1d 	bl	800d624 <memset>
  if(hadc->Instance==ADC1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df2:	d15f      	bne.n	8001eb4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001dfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 fa5d 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e10:	f7ff ffae 	bl	8001d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_ADC_MspInit+0xf8>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <HAL_ADC_MspInit+0xf8>)
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_ADC_MspInit+0xf8>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_ADC_MspInit+0xf8>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_ADC_MspInit+0xf8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_ADC_MspInit+0xf8>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e44:	2307      	movs	r3, #7
 8001e46:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f002 feb7 	bl	8004bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e60:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_ADC_MspInit+0x100>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e66:	2205      	movs	r2, #5
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e8e:	2220      	movs	r2, #32
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001e9a:	f002 fc25 	bl	80046e8 <HAL_DMA_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001ea4:	f7ff ff64 	bl	8001d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_ADC_MspInit+0xfc>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3768      	adds	r7, #104	; 0x68
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	20000264 	.word	0x20000264
 8001ec4:	40020008 	.word	0x40020008

08001ec8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_DAC_MspInit+0x74>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d124      	bne.n	8001f34 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_DAC_MspInit+0x78>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_DAC_MspInit+0x78>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_DAC_MspInit+0x78>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_DAC_MspInit+0x78>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <HAL_DAC_MspInit+0x78>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_DAC_MspInit+0x78>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f1a:	2330      	movs	r3, #48	; 0x30
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f30:	f002 fe4c 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	50000800 	.word	0x50000800
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b09a      	sub	sp, #104	; 0x68
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2244      	movs	r2, #68	; 0x44
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f00b fb5d 	bl	800d624 <memset>
  if(hi2c->Instance==I2C2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <HAL_I2C_MspInit+0xa8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d137      	bne.n	8001fe4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	4618      	mov	r0, r3
 8001f82:	f006 f99f 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f8c:	f7ff fef0 	bl	8001d70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_I2C_MspInit+0xac>)
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_I2C_MspInit+0xac>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_I2C_MspInit+0xac>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fae:	2312      	movs	r3, #18
 8001fb0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc8:	f002 fe00 	bl	8004bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_I2C_MspInit+0xac>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_I2C_MspInit+0xac>)
 8001fd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_I2C_MspInit+0xac>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3768      	adds	r7, #104	; 0x68
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005800 	.word	0x40005800
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_TIM_Base_MspInit+0x44>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d113      	bne.n	800202e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6613      	str	r3, [r2, #96]	; 0x60
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_TIM_Base_MspInit+0x48>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	201a      	movs	r0, #26
 8002024:	f001 ffcf 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002028:	201a      	movs	r0, #26
 800202a:	f001 ffe6 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40014800 	.word	0x40014800
 800203c:	40021000 	.word	0x40021000

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <NMI_Handler+0x4>

08002046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler+0x4>

08002052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <BusFault_Handler+0x4>

08002058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <UsageFault_Handler+0x4>

0800205e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f000 fb3e 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA1_Channel1_IRQHandler+0x10>)
 800209a:	f002 fc48 	bl	800492e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000264 	.word	0x20000264

080020a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <USB_LP_IRQHandler+0x10>)
 80020ae:	f003 ff31 	bl	8005f14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20001164 	.word	0x20001164

080020bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80020c2:	f006 fbb1 	bl	8008828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000324 	.word	0x20000324

080020d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <SystemInit+0x20>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <SystemInit+0x20>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <create_initial_config>:
  * @param  config Pointer to a TS_Config structure that contains
  *                		  the configuration information
  * @retval void
  */
void create_initial_config (TS_Config *config, TS_Signature *signature)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
	// memset(page_data,0xff,eeprom_device.at24cxx_page_size);
	memcpy(signature->version, "001", sizeof(signature->version));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	331b      	adds	r3, #27
 8002102:	2203      	movs	r2, #3
 8002104:	4957      	ldr	r1, [pc, #348]	; (8002264 <create_initial_config+0x170>)
 8002106:	4618      	mov	r0, r3
 8002108:	f00b fabe 	bl	800d688 <memcpy>
	memcpy(signature->signature, "Speeduino Dual MAF Adapter", sizeof(signature->signature));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	221b      	movs	r2, #27
 8002110:	4955      	ldr	r1, [pc, #340]	; (8002268 <create_initial_config+0x174>)
 8002112:	4618      	mov	r0, r3
 8002114:	f00b fab8 	bl	800d688 <memcpy>
	memcpy(signature->version_info, "Speeduino Dual MAF Adapter v0.0.1", sizeof(signature->version_info));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	331e      	adds	r3, #30
 800211c:	2222      	movs	r2, #34	; 0x22
 800211e:	4953      	ldr	r1, [pc, #332]	; (800226c <create_initial_config+0x178>)
 8002120:	4618      	mov	r0, r3
 8002122:	f00b fab1 	bl	800d688 <memcpy>

	config->hfmIN_voltage[0] = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]
	config->hfmIN_voltage[1] = 1239;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f240 42d7 	movw	r2, #1239	; 0x4d7
 8002132:	805a      	strh	r2, [r3, #2]
	config->hfmIN_voltage[2] = 1364;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f240 5254 	movw	r2, #1364	; 0x554
 800213a:	809a      	strh	r2, [r3, #4]
	config->hfmIN_voltage[3] = 1524;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002142:	80da      	strh	r2, [r3, #6]
	config->hfmIN_voltage[4] = 1874;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f240 7252 	movw	r2, #1874	; 0x752
 800214a:	811a      	strh	r2, [r3, #8]
	config->hfmIN_voltage[5] = 2371;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f640 1243 	movw	r2, #2371	; 0x943
 8002152:	815a      	strh	r2, [r3, #10]
	config->hfmIN_voltage[6] = 2999;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800215a:	819a      	strh	r2, [r3, #12]
	config->hfmIN_voltage[7] = 3749;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f640 62a5 	movw	r2, #3749	; 0xea5
 8002162:	81da      	strh	r2, [r3, #14]
	config->hfmIN_voltage[8] = 4169;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f241 0249 	movw	r2, #4169	; 0x1049
 800216a:	821a      	strh	r2, [r3, #16]
	config->hfmIN_voltage[9] = 4457;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f241 1269 	movw	r2, #4457	; 0x1169
 8002172:	825a      	strh	r2, [r3, #18]

	config->hfmIN_airmass[0] = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	829a      	strh	r2, [r3, #20]
	config->hfmIN_airmass[1] = 80;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2250      	movs	r2, #80	; 0x50
 800217e:	82da      	strh	r2, [r3, #22]
	config->hfmIN_airmass[2] = 100;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2264      	movs	r2, #100	; 0x64
 8002184:	831a      	strh	r2, [r3, #24]
	config->hfmIN_airmass[3] = 150;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2296      	movs	r2, #150	; 0x96
 800218a:	835a      	strh	r2, [r3, #26]
	config->hfmIN_airmass[4] = 300;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002192:	839a      	strh	r2, [r3, #28]
	config->hfmIN_airmass[5] = 600;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f44f 7216 	mov.w	r2, #600	; 0x258
 800219a:	83da      	strh	r2, [r3, #30]
	config->hfmIN_airmass[6] = 1200;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80021a2:	841a      	strh	r2, [r3, #32]
	config->hfmIN_airmass[7] = 2500;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80021aa:	845a      	strh	r2, [r3, #34]	; 0x22
	config->hfmIN_airmass[8] = 3700;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f640 6274 	movw	r2, #3700	; 0xe74
 80021b2:	849a      	strh	r2, [r3, #36]	; 0x24
	config->hfmIN_airmass[9] = 4800;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80021ba:	84da      	strh	r2, [r3, #38]	; 0x26

	config->hfmOUT_voltage[0] = 1400;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->hfmOUT_voltage[1] = 2367;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f640 123f 	movw	r2, #2367	; 0x93f
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->hfmOUT_voltage[2] = 2662;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f640 2266 	movw	r2, #2662	; 0xa66
 80021d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	config->hfmOUT_voltage[3] = 3009;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f640 32c1 	movw	r2, #3009	; 0xbc1
 80021da:	85da      	strh	r2, [r3, #46]	; 0x2e
	config->hfmOUT_voltage[4] = 3442;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f640 5272 	movw	r2, #3442	; 0xd72
 80021e2:	861a      	strh	r2, [r3, #48]	; 0x30
	config->hfmOUT_voltage[5] = 4224;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f44f 5284 	mov.w	r2, #4224	; 0x1080
 80021ea:	865a      	strh	r2, [r3, #50]	; 0x32
	config->hfmOUT_voltage[6] = 4773;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f241 22a5 	movw	r2, #4773	; 0x12a5
 80021f2:	869a      	strh	r2, [r3, #52]	; 0x34
	config->hfmOUT_voltage[7] = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	86da      	strh	r2, [r3, #54]	; 0x36
	config->hfmOUT_voltage[8] = 0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	871a      	strh	r2, [r3, #56]	; 0x38
	config->hfmOUT_voltage[9] = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	875a      	strh	r2, [r3, #58]	; 0x3a

	config->hfmOUT_airmass[0] = 0;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	879a      	strh	r2, [r3, #60]	; 0x3c
	config->hfmOUT_airmass[1] = 150;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2296      	movs	r2, #150	; 0x96
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e
	config->hfmOUT_airmass[2] = 300;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	config->hfmOUT_airmass[3] = 600;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002222:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	config->hfmOUT_airmass[4] = 1200;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800222c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	config->hfmOUT_airmass[5] = 2800;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8002236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	config->hfmOUT_airmass[6] = 4800;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002240:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	config->hfmOUT_airmass[7] = 0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	config->hfmOUT_airmass[8] = 0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	config->hfmOUT_airmass[9] = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	0800db1c 	.word	0x0800db1c
 8002268:	0800db20 	.word	0x0800db20
 800226c:	0800db3c 	.word	0x0800db3c

08002270 <set_page_value>:

void set_page_value (uint16_t offset, uint16_t value, TS_Config* config)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	603a      	str	r2, [r7, #0]
 800227a:	80fb      	strh	r3, [r7, #6]
 800227c:	460b      	mov	r3, r1
 800227e:	80bb      	strh	r3, [r7, #4]
	uint8_t* tmp_config = (uint8_t*)config;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	60fb      	str	r3, [r7, #12]

	tmp_config[offset] = (value & 0xff);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	88ba      	ldrh	r2, [r7, #4]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
	tmp_config[offset+1] = (value >> 8);
 8002290:	88bb      	ldrh	r3, [r7, #4]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b299      	uxth	r1, r3
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	3301      	adds	r3, #1
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4413      	add	r3, r2
 800229e:	b2ca      	uxtb	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]

	config = (TS_Config*)tmp_config;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	603b      	str	r3, [r7, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ba:	490e      	ldr	r1, [pc, #56]	; (80022f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <LoopForever+0xe>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d0:	4c0b      	ldr	r4, [pc, #44]	; (8002300 <LoopForever+0x16>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022de:	f7ff fef7 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e2:	f00b f9ad 	bl	800d640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022e6:	f7fe fea3 	bl	8001030 <main>

080022ea <LoopForever>:

LoopForever:
    b LoopForever
 80022ea:	e7fe      	b.n	80022ea <LoopForever>
  ldr   r0, =_estack
 80022ec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022f8:	0800dbc4 	.word	0x0800dbc4
  ldr r2, =_sbss
 80022fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002300:	200017b0 	.word	0x200017b0

08002304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <ADC1_2_IRQHandler>
	...

08002308 <interpolate_voltage2airMass>:
#include "ts_config.h"

extern TS_Config ts_config;

uint16_t interpolate_voltage2airMass (uint16_t inputValue)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
	uint16_t retVal = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	82fb      	strh	r3, [r7, #22]
	uint8_t counter = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	757b      	strb	r3, [r7, #21]
	uint8_t lastIndex = sizeof(ts_config.hfmIN_airmass)/2 - 1;
 800231a:	2309      	movs	r3, #9
 800231c:	753b      	strb	r3, [r7, #20]
	float gain, offset;

	// check agains both ends

	if (inputValue <= ts_config.hfmIN_voltage[0])
 800231e:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	429a      	cmp	r2, r3
 8002326:	d802      	bhi.n	800232e <interpolate_voltage2airMass+0x26>
	{
		retVal = ts_config.hfmIN_airmass[0];
 8002328:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 800232a:	8a9b      	ldrh	r3, [r3, #20]
 800232c:	82fb      	strh	r3, [r7, #22]
	}

	if (inputValue >= ts_config.hfmIN_voltage[lastIndex])
 800232e:	7d3b      	ldrb	r3, [r7, #20]
 8002330:	4a48      	ldr	r2, [pc, #288]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 8002332:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	429a      	cmp	r2, r3
 800233a:	d37c      	bcc.n	8002436 <interpolate_voltage2airMass+0x12e>
	{
		retVal = ts_config.hfmIN_airmass[lastIndex];
 800233c:	7d3b      	ldrb	r3, [r7, #20]
 800233e:	4a45      	ldr	r2, [pc, #276]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 8002340:	3308      	adds	r3, #8
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	889b      	ldrh	r3, [r3, #4]
 8002348:	82fb      	strh	r3, [r7, #22]
	}

	while (retVal == 0 && counter < lastIndex)
 800234a:	e074      	b.n	8002436 <interpolate_voltage2airMass+0x12e>
	{
		if (ts_config.hfmIN_voltage[counter] == inputValue)
 800234c:	7d7b      	ldrb	r3, [r7, #21]
 800234e:	4a41      	ldr	r2, [pc, #260]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 8002350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	429a      	cmp	r2, r3
 8002358:	d107      	bne.n	800236a <interpolate_voltage2airMass+0x62>
		{
			retVal = ts_config.hfmIN_airmass[counter];
 800235a:	7d7b      	ldrb	r3, [r7, #21]
 800235c:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 800235e:	3308      	adds	r3, #8
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	82fb      	strh	r3, [r7, #22]
 8002368:	e062      	b.n	8002430 <interpolate_voltage2airMass+0x128>
		}

		else if (ts_config.hfmIN_voltage[counter] <= inputValue && inputValue <= ts_config.hfmIN_voltage[counter+1])
 800236a:	7d7b      	ldrb	r3, [r7, #21]
 800236c:	4a39      	ldr	r2, [pc, #228]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 800236e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	429a      	cmp	r2, r3
 8002376:	d35b      	bcc.n	8002430 <interpolate_voltage2airMass+0x128>
 8002378:	7d7b      	ldrb	r3, [r7, #21]
 800237a:	3301      	adds	r3, #1
 800237c:	4a35      	ldr	r2, [pc, #212]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 800237e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	429a      	cmp	r2, r3
 8002386:	d853      	bhi.n	8002430 <interpolate_voltage2airMass+0x128>
		{
			gain = (float) (ts_config.hfmIN_airmass[counter+1] - ts_config.hfmIN_airmass[counter]) / (ts_config.hfmIN_voltage[counter + 1] - ts_config.hfmIN_voltage[counter]);
 8002388:	7d7b      	ldrb	r3, [r7, #21]
 800238a:	3301      	adds	r3, #1
 800238c:	4a31      	ldr	r2, [pc, #196]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 800238e:	3308      	adds	r3, #8
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	889b      	ldrh	r3, [r3, #4]
 8002396:	4619      	mov	r1, r3
 8002398:	7d7b      	ldrb	r3, [r7, #21]
 800239a:	4a2e      	ldr	r2, [pc, #184]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 800239c:	3308      	adds	r3, #8
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	889b      	ldrh	r3, [r3, #4]
 80023a4:	1acb      	subs	r3, r1, r3
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ae:	7d7b      	ldrb	r3, [r7, #21]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 80023b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023b8:	4619      	mov	r1, r3
 80023ba:	7d7b      	ldrb	r3, [r7, #21]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 80023be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c2:	1acb      	subs	r3, r1, r3
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d0:	edc7 7a04 	vstr	s15, [r7, #16]
			offset = (ts_config.hfmIN_airmass[counter+1] - (ts_config.hfmIN_voltage[counter + 1] * gain));
 80023d4:	7d7b      	ldrb	r3, [r7, #21]
 80023d6:	3301      	adds	r3, #1
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 80023da:	3308      	adds	r3, #8
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ea:	7d7b      	ldrb	r3, [r7, #21]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <interpolate_voltage2airMass+0x14c>)
 80023f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002408:	edc7 7a03 	vstr	s15, [r7, #12]
			retVal = (uint16_t) ((inputValue * gain) + offset);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002416:	edd7 7a04 	vldr	s15, [r7, #16]
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800242a:	ee17 3a90 	vmov	r3, s15
 800242e:	82fb      	strh	r3, [r7, #22]
		}

		counter++;
 8002430:	7d7b      	ldrb	r3, [r7, #21]
 8002432:	3301      	adds	r3, #1
 8002434:	757b      	strb	r3, [r7, #21]
	while (retVal == 0 && counter < lastIndex)
 8002436:	8afb      	ldrh	r3, [r7, #22]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <interpolate_voltage2airMass+0x13c>
 800243c:	7d7a      	ldrb	r2, [r7, #21]
 800243e:	7d3b      	ldrb	r3, [r7, #20]
 8002440:	429a      	cmp	r2, r3
 8002442:	d383      	bcc.n	800234c <interpolate_voltage2airMass+0x44>
	}

	return retVal;
 8002444:	8afb      	ldrh	r3, [r7, #22]
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	200003f4 	.word	0x200003f4

08002458 <interpolate_airMass2voltage>:

uint16_t interpolate_airMass2voltage (uint16_t inputValue)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
	uint16_t retVal = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	82fb      	strh	r3, [r7, #22]
	uint8_t counter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	757b      	strb	r3, [r7, #21]
	uint8_t lastIndex = sizeof(ts_config.hfmOUT_airmass)/2 - 1;
 800246a:	2309      	movs	r3, #9
 800246c:	753b      	strb	r3, [r7, #20]
	float gain, offset;


	// check agains both ends

	if (inputValue <= ts_config.hfmOUT_airmass[0])
 800246e:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 8002470:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002472:	88fa      	ldrh	r2, [r7, #6]
 8002474:	429a      	cmp	r2, r3
 8002476:	d802      	bhi.n	800247e <interpolate_airMass2voltage+0x26>
	{
		retVal = ts_config.hfmOUT_voltage[0];
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	82fb      	strh	r3, [r7, #22]
	}

	if (inputValue >= ts_config.hfmOUT_airmass[lastIndex])
 800247e:	7d3b      	ldrb	r3, [r7, #20]
 8002480:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 8002482:	331c      	adds	r3, #28
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	889b      	ldrh	r3, [r3, #4]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	429a      	cmp	r2, r3
 800248e:	f0c0 8084 	bcc.w	800259a <interpolate_airMass2voltage+0x142>
	{
		retVal = ts_config.hfmOUT_voltage[lastIndex];
 8002492:	7d3b      	ldrb	r3, [r7, #20]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 8002496:	3314      	adds	r3, #20
 8002498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800249c:	82fb      	strh	r3, [r7, #22]
	}

	while (retVal == 0 && counter < lastIndex)
 800249e:	e07c      	b.n	800259a <interpolate_airMass2voltage+0x142>
	{
		if (ts_config.hfmOUT_airmass[counter] == inputValue)
 80024a0:	7d7b      	ldrb	r3, [r7, #21]
 80024a2:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 80024a4:	331c      	adds	r3, #28
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <interpolate_airMass2voltage+0x68>
		{
			retVal = ts_config.hfmOUT_voltage[counter];
 80024b2:	7d7b      	ldrb	r3, [r7, #21]
 80024b4:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 80024b6:	3314      	adds	r3, #20
 80024b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024bc:	82fb      	strh	r3, [r7, #22]
 80024be:	e069      	b.n	8002594 <interpolate_airMass2voltage+0x13c>
		}

		else if (ts_config.hfmOUT_airmass[counter] <= inputValue && inputValue <= ts_config.hfmOUT_airmass[counter+1])
 80024c0:	7d7b      	ldrb	r3, [r7, #21]
 80024c2:	4a3d      	ldr	r2, [pc, #244]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 80024c4:	331c      	adds	r3, #28
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	889b      	ldrh	r3, [r3, #4]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d360      	bcc.n	8002594 <interpolate_airMass2voltage+0x13c>
 80024d2:	7d7b      	ldrb	r3, [r7, #21]
 80024d4:	3301      	adds	r3, #1
 80024d6:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 80024d8:	331c      	adds	r3, #28
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d856      	bhi.n	8002594 <interpolate_airMass2voltage+0x13c>
		{
			gain = (float) (ts_config.hfmOUT_voltage[counter+1] - ts_config.hfmOUT_voltage[counter]) / (ts_config.hfmOUT_airmass[counter + 1] -  ts_config.hfmOUT_airmass[counter]);
 80024e6:	7d7b      	ldrb	r3, [r7, #21]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 80024ec:	3314      	adds	r3, #20
 80024ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f2:	4619      	mov	r1, r3
 80024f4:	7d7b      	ldrb	r3, [r7, #21]
 80024f6:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 80024f8:	3314      	adds	r3, #20
 80024fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024fe:	1acb      	subs	r3, r1, r3
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002508:	7d7b      	ldrb	r3, [r7, #21]
 800250a:	3301      	adds	r3, #1
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 800250e:	331c      	adds	r3, #28
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	889b      	ldrh	r3, [r3, #4]
 8002516:	4619      	mov	r1, r3
 8002518:	7d7b      	ldrb	r3, [r7, #21]
 800251a:	4a27      	ldr	r2, [pc, #156]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 800251c:	331c      	adds	r3, #28
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	1acb      	subs	r3, r1, r3
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002532:	edc7 7a04 	vstr	s15, [r7, #16]
			offset = (ts_config.hfmOUT_voltage[counter+1] - (ts_config.hfmOUT_airmass[counter + 1] * gain));
 8002536:	7d7b      	ldrb	r3, [r7, #21]
 8002538:	3301      	adds	r3, #1
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 800253c:	3314      	adds	r3, #20
 800253e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254a:	7d7b      	ldrb	r3, [r7, #21]
 800254c:	3301      	adds	r3, #1
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <interpolate_airMass2voltage+0x160>)
 8002550:	331c      	adds	r3, #28
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	889b      	ldrh	r3, [r3, #4]
 8002558:	ee07 3a90 	vmov	s15, r3
 800255c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002560:	edd7 7a04 	vldr	s15, [r7, #16]
 8002564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256c:	edc7 7a03 	vstr	s15, [r7, #12]
			retVal = (uint16_t) ((inputValue * gain) + offset);
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257a:	edd7 7a04 	vldr	s15, [r7, #16]
 800257e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002582:	edd7 7a03 	vldr	s15, [r7, #12]
 8002586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258e:	ee17 3a90 	vmov	r3, s15
 8002592:	82fb      	strh	r3, [r7, #22]
		}

		counter++;
 8002594:	7d7b      	ldrb	r3, [r7, #21]
 8002596:	3301      	adds	r3, #1
 8002598:	757b      	strb	r3, [r7, #21]
	while (retVal == 0 && counter < lastIndex)
 800259a:	8afb      	ldrh	r3, [r7, #22]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <interpolate_airMass2voltage+0x152>
 80025a0:	7d7a      	ldrb	r2, [r7, #21]
 80025a2:	7d3b      	ldrb	r3, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f4ff af7b 	bcc.w	80024a0 <interpolate_airMass2voltage+0x48>
	}

	return retVal;
 80025aa:	8afb      	ldrh	r3, [r7, #22]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	200003f4 	.word	0x200003f4
 80025bc:	00000000 	.word	0x00000000

080025c0 <calculate_dac_value_for_voltage>:

uint16_t calculate_dac_value_for_voltage (uint16_t voltage)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
	float real_voltage = (float) voltage/ 1000 / 1.5151515151;
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002660 <calculate_dac_value_for_voltage+0xa0>
 80025d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025dc:	ee16 0a90 	vmov	r0, s13
 80025e0:	f7fd ff7e 	bl	80004e0 <__aeabi_f2d>
 80025e4:	a31a      	add	r3, pc, #104	; (adr r3, 8002650 <calculate_dac_value_for_voltage+0x90>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fe f8fb 	bl	80007e4 <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe faa3 	bl	8000b40 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	60fb      	str	r3, [r7, #12]
	float dac_value = roundf(real_voltage*(4096) / 3.3);
 80025fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002602:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002664 <calculate_dac_value_for_voltage+0xa4>
 8002606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800260a:	ee17 0a90 	vmov	r0, s15
 800260e:	f7fd ff67 	bl	80004e0 <__aeabi_f2d>
 8002612:	a311      	add	r3, pc, #68	; (adr r3, 8002658 <calculate_dac_value_for_voltage+0x98>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	f7fe f8e4 	bl	80007e4 <__aeabi_ddiv>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f7fe fa8c 	bl	8000b40 <__aeabi_d2f>
 8002628:	4603      	mov	r3, r0
 800262a:	ee00 3a10 	vmov	s0, r3
 800262e:	f00b f883 	bl	800d738 <roundf>
 8002632:	ed87 0a02 	vstr	s0, [r7, #8]

	return (uint16_t)dac_value;
 8002636:	edd7 7a02 	vldr	s15, [r7, #8]
 800263a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263e:	ee17 3a90 	vmov	r3, s15
 8002642:	b29b      	uxth	r3, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f3af 8000 	nop.w
 8002650:	83dd6dfa 	.word	0x83dd6dfa
 8002654:	3ff83e0f 	.word	0x3ff83e0f
 8002658:	66666666 	.word	0x66666666
 800265c:	400a6666 	.word	0x400a6666
 8002660:	447a0000 	.word	0x447a0000
 8002664:	45800000 	.word	0x45800000

08002668 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002672:	2003      	movs	r0, #3
 8002674:	f001 fc9c 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002678:	2000      	movs	r0, #0
 800267a:	f000 f80d 	bl	8002698 <HAL_InitTick>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	e001      	b.n	800268e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800268a:	f7ff fb77 	bl	8001d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800268e:	79fb      	ldrb	r3, [r7, #7]

}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_InitTick+0x68>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d022      	beq.n	80026f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_InitTick+0x6c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_InitTick+0x68>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 fca8 	bl	8004016 <HAL_SYSTICK_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	d809      	bhi.n	80026e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d2:	2200      	movs	r2, #0
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	f04f 30ff 	mov.w	r0, #4294967295
 80026da:	f001 fc74 	bl	8003fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_InitTick+0x70>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e007      	b.n	80026f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	e004      	b.n	80026f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e001      	b.n	80026f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000008 	.word	0x20000008
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_IncTick+0x1c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_IncTick+0x20>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4413      	add	r3, r2
 800271a:	4a03      	ldr	r2, [pc, #12]	; (8002728 <HAL_IncTick+0x1c>)
 800271c:	6013      	str	r3, [r2, #0]
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	20000488 	.word	0x20000488
 800272c:	20000008 	.word	0x20000008

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000488 	.word	0x20000488

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d004      	beq.n	800276c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_Delay+0x40>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276c:	bf00      	nop
 800276e:	f7ff ffdf 	bl	8002730 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	429a      	cmp	r2, r3
 800277c:	d8f7      	bhi.n	800276e <HAL_Delay+0x26>
  {
  }
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000008 	.word	0x20000008

0800278c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3360      	adds	r3, #96	; 0x60
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <LL_ADC_SetOffset+0x44>)
 8002816:	4013      	ands	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	4313      	orrs	r3, r2
 8002824:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	03fff000 	.word	0x03fff000

0800283c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3360      	adds	r3, #96	; 0x60
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3360      	adds	r3, #96	; 0x60
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3360      	adds	r3, #96	; 0x60
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3360      	adds	r3, #96	; 0x60
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	615a      	str	r2, [r3, #20]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3330      	adds	r3, #48	; 0x30
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	4413      	add	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	211f      	movs	r1, #31
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	f003 011f 	and.w	r1, r3, #31
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3314      	adds	r3, #20
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0e5b      	lsrs	r3, r3, #25
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0d1b      	lsrs	r3, r3, #20
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2107      	movs	r1, #7
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	401a      	ands	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0d1b      	lsrs	r3, r3, #20
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10a      	bne.n	8002a2e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	401a      	ands	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	407f0000 	.word	0x407f0000

08002a54 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 031f 	and.w	r3, r3, #31
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6093      	str	r3, [r2, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa8:	d101      	bne.n	8002aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002af8:	d101      	bne.n	8002afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b48:	f043 0202 	orr.w	r2, r3, #2
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_IsEnabled+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_IsEnabled+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d101      	bne.n	8002b9a <LL_ADC_IsDisableOngoing+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_ADC_IsDisableOngoing+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bbc:	f043 0204 	orr.w	r2, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d101      	bne.n	8002c0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e177      	b.n	8002f26 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff f8bd 	bl	8001dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff19 	bl	8002a94 <LL_ADC_IsDeepPowerDownEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff feff 	bl	8002a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff34 	bl	8002ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d115      	bne.n	8002cae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff18 	bl	8002abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c8c:	4b9c      	ldr	r3, [pc, #624]	; (8002f00 <HAL_ADC_Init+0x2e4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	4a9c      	ldr	r2, [pc, #624]	; (8002f04 <HAL_ADC_Init+0x2e8>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f9      	bne.n	8002ca2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff16 	bl	8002ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff76 	bl	8002bd0 <LL_ADC_REG_IsConversionOngoing>
 8002ce4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 8110 	bne.w	8002f14 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 810c 	bne.w	8002f14 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d04:	f043 0202 	orr.w	r2, r3, #2
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff23 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d20:	f7ff ff1c 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d24:	4604      	mov	r4, r0
 8002d26:	4878      	ldr	r0, [pc, #480]	; (8002f08 <HAL_ADC_Init+0x2ec>)
 8002d28:	f7ff ff18 	bl	8002b5c <LL_ADC_IsEnabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4323      	orrs	r3, r4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4874      	ldr	r0, [pc, #464]	; (8002f0c <HAL_ADC_Init+0x2f0>)
 8002d3c:	f7ff fd26 	bl	800278c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7f5b      	ldrb	r3, [r3, #29]
 8002d44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d106      	bne.n	8002d7c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	045b      	lsls	r3, r3, #17
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	4b5c      	ldr	r3, [pc, #368]	; (8002f10 <HAL_ADC_Init+0x2f4>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff02 	bl	8002bd0 <LL_ADC_REG_IsConversionOngoing>
 8002dcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff0f 	bl	8002bf6 <LL_ADC_INJ_IsConversionOngoing>
 8002dd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d16d      	bne.n	8002ebc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d16a      	bne.n	8002ebc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e02:	f023 0302 	bic.w	r3, r3, #2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d017      	beq.n	8002e48 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e26:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6911      	ldr	r1, [r2, #16]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e46:	e013      	b.n	8002e70 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e6c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d118      	bne.n	8002eac <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	e007      	b.n	8002ebc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10c      	bne.n	8002ede <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f023 010f 	bic.w	r1, r3, #15
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
 8002edc:	e007      	b.n	8002eee <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 020f 	bic.w	r2, r2, #15
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002efe:	e011      	b.n	8002f24 <HAL_ADC_Init+0x308>
 8002f00:	20000000 	.word	0x20000000
 8002f04:	053e2d63 	.word	0x053e2d63
 8002f08:	50000100 	.word	0x50000100
 8002f0c:	50000300 	.word	0x50000300
 8002f10:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f3c:	4851      	ldr	r0, [pc, #324]	; (8003084 <HAL_ADC_Start_DMA+0x154>)
 8002f3e:	f7ff fd89 	bl	8002a54 <LL_ADC_GetMultimode>
 8002f42:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fe41 	bl	8002bd0 <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 808f 	bne.w	8003074 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_Start_DMA+0x34>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e08a      	b.n	800307a <HAL_ADC_Start_DMA+0x14a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b05      	cmp	r3, #5
 8002f76:	d002      	beq.n	8002f7e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	d173      	bne.n	8003066 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fc98 	bl	80038b4 <ADC_Enable>
 8002f84:	4603      	mov	r3, r0
 8002f86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d166      	bne.n	800305c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_ADC_Start_DMA+0x158>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d002      	beq.n	8002fb2 <HAL_ADC_Start_DMA+0x82>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	e001      	b.n	8002fb6 <HAL_ADC_Start_DMA+0x86>
 8002fb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d002      	beq.n	8002fc4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	f023 0206 	bic.w	r2, r3, #6
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
 8002fe8:	e002      	b.n	8002ff0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_ADC_Start_DMA+0x15c>)
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <HAL_ADC_Start_DMA+0x160>)
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	4a23      	ldr	r2, [pc, #140]	; (8003094 <HAL_ADC_Start_DMA+0x164>)
 8003006:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	221c      	movs	r2, #28
 800300e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0210 	orr.w	r2, r2, #16
 8003026:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3340      	adds	r3, #64	; 0x40
 8003042:	4619      	mov	r1, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f001 fbf6 	bl	8004838 <HAL_DMA_Start_IT>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fda7 	bl	8002ba8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800305a:	e00d      	b.n	8003078 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003064:	e008      	b.n	8003078 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003072:	e001      	b.n	8003078 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003078:	7dfb      	ldrb	r3, [r7, #23]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	50000300 	.word	0x50000300
 8003088:	50000100 	.word	0x50000100
 800308c:	08003a37 	.word	0x08003a37
 8003090:	08003b0f 	.word	0x08003b0f
 8003094:	08003b2b 	.word	0x08003b2b

08003098 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0b6      	sub	sp, #216	; 0xd8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x22>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e3c8      	b.n	8003888 <HAL_ADC_ConfigChannel+0x7b4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fd64 	bl	8002bd0 <LL_ADC_REG_IsConversionOngoing>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 83ad 	bne.w	800386a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	f7ff fc1a 	bl	8002956 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fd52 	bl	8002bd0 <LL_ADC_REG_IsConversionOngoing>
 800312c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fd5e 	bl	8002bf6 <LL_ADC_INJ_IsConversionOngoing>
 800313a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800313e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 81d9 	bne.w	80034fa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 81d4 	bne.w	80034fa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315a:	d10f      	bne.n	800317c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	4619      	mov	r1, r3
 8003168:	f7ff fc21 	bl	80029ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fbc8 	bl	800290a <LL_ADC_SetSamplingTimeCommonConfig>
 800317a:	e00e      	b.n	800319a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	461a      	mov	r2, r3
 800318a:	f7ff fc10 	bl	80029ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fbb8 	bl	800290a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d022      	beq.n	8003202 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6919      	ldr	r1, [r3, #16]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031cc:	f7ff fb12 	bl	80027f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6919      	ldr	r1, [r3, #16]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	461a      	mov	r2, r3
 80031de:	f7ff fb5e 	bl	800289e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6919      	ldr	r1, [r3, #16]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	7f1b      	ldrb	r3, [r3, #28]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x124>
 80031f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f6:	e000      	b.n	80031fa <HAL_ADC_ConfigChannel+0x126>
 80031f8:	2300      	movs	r3, #0
 80031fa:	461a      	mov	r2, r3
 80031fc:	f7ff fb6a 	bl	80028d4 <LL_ADC_SetOffsetSaturation>
 8003200:	e17b      	b.n	80034fa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb17 	bl	800283c <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x15a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb0c 	bl	800283c <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	0e9b      	lsrs	r3, r3, #26
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	e01e      	b.n	800326c <HAL_ADC_ConfigChannel+0x198>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fb01 	bl	800283c <LL_ADC_GetOffsetChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800324c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e004      	b.n	800326a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003260:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1b0>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0e9b      	lsrs	r3, r3, #26
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	e018      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x1e2>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800329c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e004      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80032ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fad0 	bl	8002868 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fab4 	bl	800283c <LL_ADC_GetOffsetChannel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x220>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff faa9 	bl	800283c <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	f003 021f 	and.w	r2, r3, #31
 80032f2:	e01e      	b.n	8003332 <HAL_ADC_ConfigChannel+0x25e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fa9e 	bl	800283c <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800331a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e004      	b.n	8003330 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_ADC_ConfigChannel+0x276>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0e9b      	lsrs	r3, r3, #26
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	e018      	b.n	800337c <HAL_ADC_ConfigChannel+0x2a8>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800335e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800336e:	2320      	movs	r3, #32
 8003370:	e004      	b.n	800337c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800337c:	429a      	cmp	r2, r3
 800337e:	d106      	bne.n	800338e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fa6d 	bl	8002868 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2102      	movs	r1, #2
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fa51 	bl	800283c <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x2e6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fa46 	bl	800283c <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	e01e      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x324>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fa3b 	bl	800283c <LL_ADC_GetOffsetChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	e004      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x33c>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	e016      	b.n	800343e <HAL_ADC_ConfigChannel+0x36a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	e004      	b.n	800343e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800343e:	429a      	cmp	r2, r3
 8003440:	d106      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	2102      	movs	r1, #2
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fa0c 	bl	8002868 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2103      	movs	r1, #3
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f9f0 	bl	800283c <LL_ADC_GetOffsetChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_ADC_ConfigChannel+0x3a8>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2103      	movs	r1, #3
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f9e5 	bl	800283c <LL_ADC_GetOffsetChannel>
 8003472:	4603      	mov	r3, r0
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	f003 021f 	and.w	r2, r3, #31
 800347a:	e017      	b.n	80034ac <HAL_ADC_ConfigChannel+0x3d8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2103      	movs	r1, #3
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f9da 	bl	800283c <LL_ADC_GetOffsetChannel>
 8003488:	4603      	mov	r3, r0
 800348a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003496:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80034a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x3f0>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	e011      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x414>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e003      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80034e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d106      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2103      	movs	r1, #3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f9b7 	bl	8002868 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fb2c 	bl	8002b5c <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 8140 	bne.w	800378c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	461a      	mov	r2, r3
 800351a:	f7ff fa73 	bl	8002a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a8f      	ldr	r2, [pc, #572]	; (8003760 <HAL_ADC_ConfigChannel+0x68c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	f040 8131 	bne.w	800378c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x47e>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	3301      	adds	r3, #1
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2b09      	cmp	r3, #9
 8003548:	bf94      	ite	ls
 800354a:	2301      	movls	r3, #1
 800354c:	2300      	movhi	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e019      	b.n	8003586 <HAL_ADC_ConfigChannel+0x4b2>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003562:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e003      	b.n	8003576 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800356e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2b09      	cmp	r3, #9
 800357e:	bf94      	ite	ls
 8003580:	2301      	movls	r3, #1
 8003582:	2300      	movhi	r3, #0
 8003584:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003586:	2b00      	cmp	r3, #0
 8003588:	d079      	beq.n	800367e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x4d2>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	3301      	adds	r3, #1
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a4:	e015      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x4fe>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80035be:	2320      	movs	r3, #32
 80035c0:	e003      	b.n	80035ca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	069b      	lsls	r3, r3, #26
 80035ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x51e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	e017      	b.n	8003622 <HAL_ADC_ConfigChannel+0x54e>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800360a:	2320      	movs	r3, #32
 800360c:	e003      	b.n	8003616 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800360e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3301      	adds	r3, #1
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	ea42 0103 	orr.w	r1, r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x574>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	3301      	adds	r3, #1
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	051b      	lsls	r3, r3, #20
 8003646:	e018      	b.n	800367a <HAL_ADC_ConfigChannel+0x5a6>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003658:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003660:	2320      	movs	r3, #32
 8003662:	e003      	b.n	800366c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003666:	fab3 f383 	clz	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f003 021f 	and.w	r2, r3, #31
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367a:	430b      	orrs	r3, r1
 800367c:	e081      	b.n	8003782 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_ADC_ConfigChannel+0x5c6>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0e9b      	lsrs	r3, r3, #26
 8003690:	3301      	adds	r3, #1
 8003692:	069b      	lsls	r3, r3, #26
 8003694:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003698:	e015      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x5f2>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80036b2:	2320      	movs	r3, #32
 80036b4:	e003      	b.n	80036be <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	069b      	lsls	r3, r3, #26
 80036c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x612>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	3301      	adds	r3, #1
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	e017      	b.n	8003716 <HAL_ADC_ConfigChannel+0x642>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	61fb      	str	r3, [r7, #28]
  return result;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036fe:	2320      	movs	r3, #32
 8003700:	e003      	b.n	800370a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	ea42 0103 	orr.w	r1, r2, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x66e>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	0e9b      	lsrs	r3, r3, #26
 800372c:	3301      	adds	r3, #1
 800372e:	f003 021f 	and.w	r2, r3, #31
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	3b1e      	subs	r3, #30
 800373a:	051b      	lsls	r3, r3, #20
 800373c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003740:	e01e      	b.n	8003780 <HAL_ADC_ConfigChannel+0x6ac>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	613b      	str	r3, [r7, #16]
  return result;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e006      	b.n	800376c <HAL_ADC_ConfigChannel+0x698>
 800375e:	bf00      	nop
 8003760:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	3b1e      	subs	r3, #30
 800377a:	051b      	lsls	r3, r3, #20
 800377c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	430b      	orrs	r3, r1
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	4619      	mov	r1, r3
 8003788:	f7ff f911 	bl	80029ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_ADC_ConfigChannel+0x7bc>)
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d071      	beq.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003798:	483e      	ldr	r0, [pc, #248]	; (8003894 <HAL_ADC_ConfigChannel+0x7c0>)
 800379a:	f7ff f81d 	bl	80027d8 <LL_ADC_GetCommonPathInternalCh>
 800379e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3c      	ldr	r2, [pc, #240]	; (8003898 <HAL_ADC_ConfigChannel+0x7c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x6e2>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3a      	ldr	r2, [pc, #232]	; (800389c <HAL_ADC_ConfigChannel+0x7c8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d127      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d121      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ca:	d157      	bne.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037d4:	4619      	mov	r1, r3
 80037d6:	482f      	ldr	r0, [pc, #188]	; (8003894 <HAL_ADC_ConfigChannel+0x7c0>)
 80037d8:	f7fe ffeb 	bl	80027b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037dc:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <HAL_ADC_ConfigChannel+0x7d0>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037f6:	e002      	b.n	80037fe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f9      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003804:	e03a      	b.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <HAL_ADC_ConfigChannel+0x7d4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d113      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x764>
 8003810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10d      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_ADC_ConfigChannel+0x7d8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d02a      	beq.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	4619      	mov	r1, r3
 8003830:	4818      	ldr	r0, [pc, #96]	; (8003894 <HAL_ADC_ConfigChannel+0x7c0>)
 8003832:	f7fe ffbe 	bl	80027b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003836:	e021      	b.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d11c      	bne.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a16      	ldr	r2, [pc, #88]	; (80038ac <HAL_ADC_ConfigChannel+0x7d8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d011      	beq.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800385c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003860:	4619      	mov	r1, r3
 8003862:	480c      	ldr	r0, [pc, #48]	; (8003894 <HAL_ADC_ConfigChannel+0x7c0>)
 8003864:	f7fe ffa5 	bl	80027b2 <LL_ADC_SetCommonPathInternalCh>
 8003868:	e008      	b.n	800387c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003884:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003888:	4618      	mov	r0, r3
 800388a:	37d8      	adds	r7, #216	; 0xd8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	80080000 	.word	0x80080000
 8003894:	50000300 	.word	0x50000300
 8003898:	c3210000 	.word	0xc3210000
 800389c:	90c00010 	.word	0x90c00010
 80038a0:	20000000 	.word	0x20000000
 80038a4:	053e2d63 	.word	0x053e2d63
 80038a8:	c7520000 	.word	0xc7520000
 80038ac:	50000100 	.word	0x50000100
 80038b0:	cb840000 	.word	0xcb840000

080038b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f94b 	bl	8002b5c <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d14d      	bne.n	8003968 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	4b28      	ldr	r3, [pc, #160]	; (8003974 <ADC_Enable+0xc0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e039      	b.n	800396a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f906 	bl	8002b0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003900:	f7fe ff16 	bl	8002730 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003906:	e028      	b.n	800395a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f925 	bl	8002b5c <LL_ADC_IsEnabled>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f8f5 	bl	8002b0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003922:	f7fe ff05 	bl	8002730 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d914      	bls.n	800395a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d00d      	beq.n	800395a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	f043 0210 	orr.w	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e007      	b.n	800396a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d1cf      	bne.n	8003908 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	8000003f 	.word	0x8000003f

08003978 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f8fc 	bl	8002b82 <LL_ADC_IsDisableOngoing>
 800398a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f8e3 	bl	8002b5c <LL_ADC_IsEnabled>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d047      	beq.n	8003a2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d144      	bne.n	8003a2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030d 	and.w	r3, r3, #13
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10c      	bne.n	80039ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f8bd 	bl	8002b34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2203      	movs	r2, #3
 80039c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039c2:	f7fe feb5 	bl	8002730 <HAL_GetTick>
 80039c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039c8:	e029      	b.n	8003a1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f043 0210 	orr.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039da:	f043 0201 	orr.w	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e023      	b.n	8003a2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039e6:	f7fe fea3 	bl	8002730 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d914      	bls.n	8003a1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e007      	b.n	8003a2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1dc      	bne.n	80039e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d14b      	bne.n	8003ae8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d021      	beq.n	8003aae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe ff5e 	bl	8002930 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d032      	beq.n	8003ae0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d12b      	bne.n	8003ae0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11f      	bne.n	8003ae0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	65da      	str	r2, [r3, #92]	; 0x5c
 8003aac:	e018      	b.n	8003ae0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff fad9 	bl	8003098 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ae6:	e00e      	b.n	8003b06 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fae3 	bl	80030c0 <HAL_ADC_ErrorCallback>
}
 8003afa:	e004      	b.n	8003b06 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff fac5 	bl	80030ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff fab5 	bl	80030c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <LL_ADC_IsEnabled>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <LL_ADC_IsEnabled+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_ADC_IsEnabled+0x1a>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_StartCalibration>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_ADC_IsCalibrationOnGoing>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bca:	d101      	bne.n	8003bd0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_ADC_REG_IsConversionOngoing>:
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d101      	bne.n	8003bf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e04d      	b.n	8003cbc <HAL_ADCEx_Calibration_Start+0xb8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fea5 	bl	8003978 <ADC_Disable>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d136      	bne.n	8003ca6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c40:	f023 0302 	bic.w	r3, r3, #2
 8003c44:	f043 0202 	orr.w	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff96 	bl	8003b84 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c58:	e014      	b.n	8003c84 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d90d      	bls.n	8003c84 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f023 0312 	bic.w	r3, r3, #18
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e01b      	b.n	8003cbc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff94 	bl	8003bb6 <LL_ADC_IsCalibrationOnGoing>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e2      	bne.n	8003c5a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	f023 0303 	bic.w	r3, r3, #3
 8003c9c:	f043 0201 	orr.w	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ca4:	e005      	b.n	8003cb2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	f043 0210 	orr.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	0004de01 	.word	0x0004de01

08003cc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b0a1      	sub	sp, #132	; 0x84
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e08b      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfe:	d102      	bne.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d00:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	e001      	b.n	8003d0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e06a      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ff57 	bl	8003bde <LL_ADC_REG_IsConversionOngoing>
 8003d30:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff51 	bl	8003bde <LL_ADC_REG_IsConversionOngoing>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d14c      	bne.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d149      	bne.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d48:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003d4a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d028      	beq.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d66:	035b      	lsls	r3, r3, #13
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d74:	f7ff fef3 	bl	8003b5e <LL_ADC_IsEnabled>
 8003d78:	4604      	mov	r4, r0
 8003d7a:	4823      	ldr	r0, [pc, #140]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d7c:	f7ff feef 	bl	8003b5e <LL_ADC_IsEnabled>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4323      	orrs	r3, r4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d133      	bne.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d90:	f023 030f 	bic.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	6811      	ldr	r1, [r2, #0]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da4:	e024      	b.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003db6:	f7ff fed2 	bl	8003b5e <LL_ADC_IsEnabled>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4812      	ldr	r0, [pc, #72]	; (8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dbe:	f7ff fece 	bl	8003b5e <LL_ADC_IsEnabled>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4323      	orrs	r3, r4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d112      	bne.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003dd2:	f023 030f 	bic.w	r3, r3, #15
 8003dd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003dd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dda:	e009      	b.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003dee:	e000      	b.n	8003df2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003df0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dfa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3784      	adds	r7, #132	; 0x84
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd90      	pop	{r4, r7, pc}
 8003e06:	bf00      	nop
 8003e08:	50000100 	.word	0x50000100
 8003e0c:	50000300 	.word	0x50000300

08003e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e42:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <__NVIC_SetPriorityGrouping+0x44>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	60d3      	str	r3, [r2, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <__NVIC_GetPriorityGrouping+0x18>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	f003 0307 	and.w	r3, r3, #7
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	db0b      	blt.n	8003e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	f003 021f 	and.w	r2, r3, #31
 8003e8c:	4907      	ldr	r1, [pc, #28]	; (8003eac <__NVIC_EnableIRQ+0x38>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2001      	movs	r0, #1
 8003e96:	fa00 f202 	lsl.w	r2, r0, r2
 8003e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	db0a      	blt.n	8003eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	490c      	ldr	r1, [pc, #48]	; (8003efc <__NVIC_SetPriority+0x4c>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed8:	e00a      	b.n	8003ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <__NVIC_SetPriority+0x50>)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	440b      	add	r3, r1
 8003eee:	761a      	strb	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e100 	.word	0xe000e100
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f1c3 0307 	rsb	r3, r3, #7
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	bf28      	it	cs
 8003f22:	2304      	movcs	r3, #4
 8003f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d902      	bls.n	8003f34 <NVIC_EncodePriority+0x30>
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3b03      	subs	r3, #3
 8003f32:	e000      	b.n	8003f36 <NVIC_EncodePriority+0x32>
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	401a      	ands	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	43d9      	mvns	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	4313      	orrs	r3, r2
         );
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3724      	adds	r7, #36	; 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f7c:	d301      	bcc.n	8003f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00f      	b.n	8003fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f82:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <SysTick_Config+0x40>)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f7ff ff8e 	bl	8003eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <SysTick_Config+0x40>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <SysTick_Config+0x40>)
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000e010 	.word	0xe000e010

08003fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff29 	bl	8003e10 <__NVIC_SetPriorityGrouping>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fd4:	f7ff ff40 	bl	8003e58 <__NVIC_GetPriorityGrouping>
 8003fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f7ff ff90 	bl	8003f04 <NVIC_EncodePriority>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff5f 	bl	8003eb0 <__NVIC_SetPriority>
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff33 	bl	8003e74 <__NVIC_EnableIRQ>
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ffa4 	bl	8003f6c <SysTick_Config>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e014      	b.n	800406a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	791b      	ldrb	r3, [r3, #4]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fd ff39 	bl	8001ec8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	795b      	ldrb	r3, [r3, #5]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_DAC_Start+0x16>
 8004084:	2302      	movs	r3, #2
 8004086:	e043      	b.n	8004110 <HAL_DAC_Start+0x9e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2202      	movs	r2, #2
 8004092:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6819      	ldr	r1, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80040ac:	2001      	movs	r0, #1
 80040ae:	f7fe fb4b 	bl	8002748 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10f      	bne.n	80040d8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d11d      	bne.n	8004102 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	e014      	b.n	8004102 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2102      	movs	r1, #2
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d107      	bne.n	8004102 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0202 	orr.w	r2, r2, #2
 8004100:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	3308      	adds	r3, #8
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e004      	b.n	8004152 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	3314      	adds	r3, #20
 8004150:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	461a      	mov	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	795b      	ldrb	r3, [r3, #5]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_DAC_ConfigChannel+0x18>
 800417c:	2302      	movs	r3, #2
 800417e:	e192      	b.n	80044a6 <HAL_DAC_ConfigChannel+0x33e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2202      	movs	r2, #2
 800418a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d174      	bne.n	800427e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004194:	f7fe facc 	bl	8002730 <HAL_GetTick>
 8004198:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d134      	bne.n	800420a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041a0:	e011      	b.n	80041c6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80041a2:	f7fe fac5 	bl	8002730 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d90a      	bls.n	80041c6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f043 0208 	orr.w	r2, r3, #8
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2203      	movs	r2, #3
 80041c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e16f      	b.n	80044a6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e6      	bne.n	80041a2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f7fe fab7 	bl	8002748 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e2:	641a      	str	r2, [r3, #64]	; 0x40
 80041e4:	e01e      	b.n	8004224 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80041e6:	f7fe faa3 	bl	8002730 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d90a      	bls.n	800420a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f043 0208 	orr.w	r2, r3, #8
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2203      	movs	r2, #3
 8004204:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e14d      	b.n	80044a6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	dbe8      	blt.n	80041e6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004214:	2001      	movs	r0, #1
 8004216:	f7fe fa97 	bl	8002748 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004222:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	ea02 0103 	and.w	r1, r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	21ff      	movs	r1, #255	; 0xff
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	ea02 0103 	and.w	r1, r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d11d      	bne.n	80042c2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	221f      	movs	r2, #31
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	4013      	ands	r3, r2
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b6:	4313      	orrs	r3, r2
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2207      	movs	r2, #7
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042da:	4013      	ands	r3, r2
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	e00f      	b.n	800430c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d102      	bne.n	80042fa <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80042f4:	2301      	movs	r3, #1
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	e008      	b.n	800430c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004302:	2301      	movs	r3, #1
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	e001      	b.n	800430c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004308:	2300      	movs	r3, #0
 800430a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	6a3a      	ldr	r2, [r7, #32]
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432e:	4013      	ands	r3, r2
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	791b      	ldrb	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_DAC_ConfigChannel+0x1d8>
 800433a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800433e:	e000      	b.n	8004342 <HAL_DAC_ConfigChannel+0x1da>
 8004340:	2300      	movs	r3, #0
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	4013      	ands	r3, r2
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	795b      	ldrb	r3, [r3, #5]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_DAC_ConfigChannel+0x204>
 8004366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800436a:	e000      	b.n	800436e <HAL_DAC_ConfigChannel+0x206>
 800436c:	2300      	movs	r3, #0
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d114      	bne.n	80043ae <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004384:	f003 ff4c 	bl	8008220 <HAL_RCC_GetHCLKFreq>
 8004388:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4a48      	ldr	r2, [pc, #288]	; (80044b0 <HAL_DAC_ConfigChannel+0x348>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d904      	bls.n	800439c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	e00f      	b.n	80043bc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4a45      	ldr	r2, [pc, #276]	; (80044b4 <HAL_DAC_ConfigChannel+0x34c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d90a      	bls.n	80043ba <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	e006      	b.n	80043bc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	4313      	orrs	r3, r2
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e000      	b.n	80043bc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80043ba:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	4313      	orrs	r3, r2
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43da      	mvns	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	400a      	ands	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440e:	4013      	ands	r3, r2
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004426:	4313      	orrs	r3, r2
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6819      	ldr	r1, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	22c0      	movs	r2, #192	; 0xc0
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43da      	mvns	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	f640 710f 	movw	r1, #3855	; 0xf0f
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	ea02 0103 	and.w	r1, r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3728      	adds	r7, #40	; 0x28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	09896800 	.word	0x09896800
 80044b4:	04c4b400 	.word	0x04c4b400

080044b8 <HAL_DACEx_SelfCalibrate>:
  * @retval Updates DAC_TrimmingValue. , DAC_UserTrimming set to DAC_UserTrimming
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Check the DAC handle allocation */
  /* Check if DAC running */
  if (hdac == NULL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044d6:	e100      	b.n	80046da <HAL_DACEx_SelfCalibrate+0x222>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	791b      	ldrb	r3, [r3, #4]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d103      	bne.n	80044ea <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044e8:	e0f7      	b.n	80046da <HAL_DACEx_SelfCalibrate+0x222>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	795b      	ldrb	r3, [r3, #5]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_DACEx_SelfCalibrate+0x3e>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e0f3      	b.n	80046de <HAL_DACEx_SelfCalibrate+0x226>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2107      	movs	r1, #7
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2201      	movs	r2, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43da      	mvns	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	400a      	ands	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
    /* Wait for ready bit to be de-asserted */
    HAL_Delay(1);
 800452e:	2001      	movs	r0, #1
 8004530:	f7fe f90a 	bl	8002748 <HAL_Delay>

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2207      	movs	r2, #7
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43da      	mvns	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	400a      	ands	r2, r1
 800454e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]

    if (Channel == DAC_CHANNEL_1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <HAL_DACEx_SelfCalibrate+0xac>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	3308      	adds	r3, #8
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	e002      	b.n	800456a <HAL_DACEx_SelfCalibrate+0xb2>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	3314      	adds	r3, #20
 8004568:	617b      	str	r3, [r7, #20]
    }

    *(__IO uint32_t *) tmp = 0x0800UL;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	461a      	mov	r2, r3
 800456e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004572:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16UL;
 800458e:	2310      	movs	r3, #16
 8004590:	623b      	str	r3, [r7, #32]
    delta = 8UL;
 8004592:	2308      	movs	r3, #8
 8004594:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8004596:	e037      	b.n	8004608 <HAL_DACEx_SelfCalibrate+0x150>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	211f      	movs	r1, #31
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	ea02 0103 	and.w	r1, r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	6a3a      	ldr	r2, [r7, #32]
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7fe f8c0 	bl	8002748 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	401a      	ands	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d104      	bne.n	80045fa <HAL_DACEx_SelfCalibrate+0x142>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	e003      	b.n	8004602 <HAL_DACEx_SelfCalibrate+0x14a>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 80045fa:	6a3a      	ldr	r2, [r7, #32]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1UL;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
    while (delta != 0UL)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1c4      	bne.n	8004598 <HAL_DACEx_SelfCalibrate+0xe0>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	211f      	movs	r1, #31
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	ea02 0103 	and.w	r1, r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	409a      	lsls	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8004638:	2001      	movs	r0, #1
 800463a:	f7fe f885 	bl	8002748 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d117      	bne.n	8004688 <HAL_DACEx_SelfCalibrate+0x1d0>
    {
      /* Trimming is actually one value more */
      trimmingvalue++;
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	3301      	adds	r3, #1
 800465c:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	211f      	movs	r1, #31
 800466c:	fa01 f303 	lsl.w	r3, r1, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	ea02 0103 	and.w	r1, r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	409a      	lsls	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43da      	mvns	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	400a      	ands	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	621a      	str	r2, [r3, #32]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2201      	movs	r2, #1
 80046b0:	61da      	str	r2, [r3, #28]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2107      	movs	r1, #7
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	ea02 0103 	and.w	r1, r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	715a      	strb	r2, [r3, #5]
  }

  return status;
 80046da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e08d      	b.n	8004816 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	4b47      	ldr	r3, [pc, #284]	; (8004820 <HAL_DMA_Init+0x138>)
 8004702:	429a      	cmp	r2, r3
 8004704:	d80f      	bhi.n	8004726 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	4b45      	ldr	r3, [pc, #276]	; (8004824 <HAL_DMA_Init+0x13c>)
 800470e:	4413      	add	r3, r2
 8004710:	4a45      	ldr	r2, [pc, #276]	; (8004828 <HAL_DMA_Init+0x140>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	009a      	lsls	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a42      	ldr	r2, [pc, #264]	; (800482c <HAL_DMA_Init+0x144>)
 8004722:	641a      	str	r2, [r3, #64]	; 0x40
 8004724:	e00e      	b.n	8004744 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_DMA_Init+0x148>)
 800472e:	4413      	add	r3, r2
 8004730:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <HAL_DMA_Init+0x140>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	009a      	lsls	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a3c      	ldr	r2, [pc, #240]	; (8004834 <HAL_DMA_Init+0x14c>)
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004768:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004780:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9b6 	bl	8004b08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a4:	d102      	bne.n	80047ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_DMA_Init+0x104>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d80c      	bhi.n	80047ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f9d6 	bl	8004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	e008      	b.n	80047fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40020407 	.word	0x40020407
 8004824:	bffdfff8 	.word	0xbffdfff8
 8004828:	cccccccd 	.word	0xcccccccd
 800482c:	40020000 	.word	0x40020000
 8004830:	bffdfbf8 	.word	0xbffdfbf8
 8004834:	40020400 	.word	0x40020400

08004838 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_DMA_Start_IT+0x20>
 8004854:	2302      	movs	r3, #2
 8004856:	e066      	b.n	8004926 <HAL_DMA_Start_IT+0xee>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d155      	bne.n	8004918 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f8fb 	bl	8004a8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 020e 	orr.w	r2, r2, #14
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e00f      	b.n	80048d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 020a 	orr.w	r2, r2, #10
 80048ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004904:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e005      	b.n	8004924 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004920:	2302      	movs	r3, #2
 8004922:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004924:	7dfb      	ldrb	r3, [r7, #23]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2204      	movs	r2, #4
 8004950:	409a      	lsls	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d026      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x7a>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d021      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d107      	bne.n	8004982 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0204 	bic.w	r2, r2, #4
 8004980:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f003 021f 	and.w	r2, r3, #31
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2104      	movs	r1, #4
 8004990:	fa01 f202 	lsl.w	r2, r1, r2
 8004994:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d071      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049a6:	e06c      	b.n	8004a82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2202      	movs	r2, #2
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d02e      	beq.n	8004a1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d029      	beq.n	8004a1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020a 	bic.w	r2, r2, #10
 80049e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	f003 021f 	and.w	r2, r3, #31
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2102      	movs	r1, #2
 80049fa:	fa01 f202 	lsl.w	r2, r1, r2
 80049fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d038      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a18:	e033      	b.n	8004a82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f003 031f 	and.w	r3, r3, #31
 8004a22:	2208      	movs	r2, #8
 8004a24:	409a      	lsls	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02a      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d025      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020e 	bic.w	r2, r2, #14
 8004a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	f003 021f 	and.w	r2, r3, #31
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d004      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
}
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aa2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ab4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f003 021f 	and.w	r2, r3, #31
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d108      	bne.n	8004aec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004aea:	e007      	b.n	8004afc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	60da      	str	r2, [r3, #12]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d802      	bhi.n	8004b22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b1c:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e001      	b.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b24:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	3b08      	subs	r3, #8
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	089b      	lsrs	r3, r3, #2
 8004b42:	009a      	lsls	r2, r3, #2
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a0b      	ldr	r2, [pc, #44]	; (8004b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b52:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40020407 	.word	0x40020407
 8004b74:	40020800 	.word	0x40020800
 8004b78:	40020820 	.word	0x40020820
 8004b7c:	cccccccd 	.word	0xcccccccd
 8004b80:	40020880 	.word	0x40020880

08004b84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ba6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	1000823f 	.word	0x1000823f
 8004bc8:	40020940 	.word	0x40020940

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bda:	e15a      	b.n	8004e92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2101      	movs	r1, #1
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 814c 	beq.w	8004e8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d005      	beq.n	8004c0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d130      	bne.n	8004c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	2203      	movs	r2, #3
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c42:	2201      	movs	r2, #1
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 0201 	and.w	r2, r3, #1
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d017      	beq.n	8004caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d123      	bne.n	8004cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	08da      	lsrs	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3208      	adds	r2, #8
 8004cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	220f      	movs	r2, #15
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	08da      	lsrs	r2, r3, #3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	6939      	ldr	r1, [r7, #16]
 8004cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2203      	movs	r2, #3
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a6 	beq.w	8004e8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d40:	4b5b      	ldr	r3, [pc, #364]	; (8004eb0 <HAL_GPIO_Init+0x2e4>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	4a5a      	ldr	r2, [pc, #360]	; (8004eb0 <HAL_GPIO_Init+0x2e4>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8004d4c:	4b58      	ldr	r3, [pc, #352]	; (8004eb0 <HAL_GPIO_Init+0x2e4>)
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d58:	4a56      	ldr	r2, [pc, #344]	; (8004eb4 <HAL_GPIO_Init+0x2e8>)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	3302      	adds	r3, #2
 8004d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	220f      	movs	r2, #15
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d82:	d01f      	beq.n	8004dc4 <HAL_GPIO_Init+0x1f8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a4c      	ldr	r2, [pc, #304]	; (8004eb8 <HAL_GPIO_Init+0x2ec>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d019      	beq.n	8004dc0 <HAL_GPIO_Init+0x1f4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <HAL_GPIO_Init+0x2f0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_GPIO_Init+0x1f0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a4a      	ldr	r2, [pc, #296]	; (8004ec0 <HAL_GPIO_Init+0x2f4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00d      	beq.n	8004db8 <HAL_GPIO_Init+0x1ec>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a49      	ldr	r2, [pc, #292]	; (8004ec4 <HAL_GPIO_Init+0x2f8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <HAL_GPIO_Init+0x1e8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a48      	ldr	r2, [pc, #288]	; (8004ec8 <HAL_GPIO_Init+0x2fc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_GPIO_Init+0x1e4>
 8004dac:	2305      	movs	r3, #5
 8004dae:	e00a      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004db0:	2306      	movs	r3, #6
 8004db2:	e008      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004db4:	2304      	movs	r3, #4
 8004db6:	e006      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004db8:	2303      	movs	r3, #3
 8004dba:	e004      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e002      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_GPIO_Init+0x1fa>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	f002 0203 	and.w	r2, r2, #3
 8004dcc:	0092      	lsls	r2, r2, #2
 8004dce:	4093      	lsls	r3, r2
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd6:	4937      	ldr	r1, [pc, #220]	; (8004eb4 <HAL_GPIO_Init+0x2e8>)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004de4:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e08:	4a30      	ldr	r2, [pc, #192]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e32:	4a26      	ldr	r2, [pc, #152]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e62:	4b1a      	ldr	r3, [pc, #104]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e86:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <HAL_GPIO_Init+0x300>)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f ae9d 	bne.w	8004bdc <HAL_GPIO_Init+0x10>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	48000400 	.word	0x48000400
 8004ebc:	48000800 	.word	0x48000800
 8004ec0:	48000c00 	.word	0x48000c00
 8004ec4:	48001000 	.word	0x48001000
 8004ec8:	48001400 	.word	0x48001400
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
 8004edc:	4613      	mov	r3, r2
 8004ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ee0:	787b      	ldrb	r3, [r7, #1]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ee6:	887a      	ldrh	r2, [r7, #2]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eec:	e002      	b.n	8004ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eee:	887a      	ldrh	r2, [r7, #2]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e081      	b.n	8005016 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd f80c 	bl	8001f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2224      	movs	r2, #36	; 0x24
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0201 	bic.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	e006      	b.n	8004f88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d104      	bne.n	8004f9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69d9      	ldr	r1, [r3, #28]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	461a      	mov	r2, r3
 800502e:	4603      	mov	r3, r0
 8005030:	817b      	strh	r3, [r7, #10]
 8005032:	460b      	mov	r3, r1
 8005034:	813b      	strh	r3, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	f040 80f9 	bne.w	800523a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_I2C_Mem_Write+0x34>
 800504e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0ed      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_I2C_Mem_Write+0x4e>
 800506a:	2302      	movs	r3, #2
 800506c:	e0e6      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005076:	f7fd fb5b 	bl	8002730 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2319      	movs	r3, #25
 8005082:	2201      	movs	r2, #1
 8005084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fbcb 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d1      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2221      	movs	r2, #33	; 0x21
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2240      	movs	r2, #64	; 0x40
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050c0:	88f8      	ldrh	r0, [r7, #6]
 80050c2:	893a      	ldrh	r2, [r7, #8]
 80050c4:	8979      	ldrh	r1, [r7, #10]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	4603      	mov	r3, r0
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fadb 	bl	800568c <I2C_RequestMemoryWrite>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0a9      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2bff      	cmp	r3, #255	; 0xff
 80050f0:	d90e      	bls.n	8005110 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	8979      	ldrh	r1, [r7, #10]
 8005100:	2300      	movs	r3, #0
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fd33 	bl	8005b74 <I2C_TransferConfig>
 800510e:	e00f      	b.n	8005130 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	b2da      	uxtb	r2, r3
 8005120:	8979      	ldrh	r1, [r7, #10]
 8005122:	2300      	movs	r3, #0
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fd22 	bl	8005b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fbb5 	bl	80058a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e07b      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d034      	beq.n	80051e8 <HAL_I2C_Mem_Write+0x1c8>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d130      	bne.n	80051e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	2200      	movs	r2, #0
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fb47 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e04d      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2bff      	cmp	r3, #255	; 0xff
 80051a8:	d90e      	bls.n	80051c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	8979      	ldrh	r1, [r7, #10]
 80051b8:	2300      	movs	r3, #0
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fcd7 	bl	8005b74 <I2C_TransferConfig>
 80051c6:	e00f      	b.n	80051e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	8979      	ldrh	r1, [r7, #10]
 80051da:	2300      	movs	r3, #0
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fcc6 	bl	8005b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d19e      	bne.n	8005130 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fb94 	bl	8005924 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e01a      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2220      	movs	r2, #32
 800520c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <HAL_I2C_Mem_Write+0x224>)
 800521a:	400b      	ands	r3, r1
 800521c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	fe00e800 	.word	0xfe00e800

08005248 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	4603      	mov	r3, r0
 8005258:	817b      	strh	r3, [r7, #10]
 800525a:	460b      	mov	r3, r1
 800525c:	813b      	strh	r3, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b20      	cmp	r3, #32
 800526c:	f040 80fd 	bne.w	800546a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_I2C_Mem_Read+0x34>
 8005276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0f1      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_I2C_Mem_Read+0x4e>
 8005292:	2302      	movs	r3, #2
 8005294:	e0ea      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800529e:	f7fd fa47 	bl	8002730 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2319      	movs	r3, #25
 80052aa:	2201      	movs	r2, #1
 80052ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fab7 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0d5      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2222      	movs	r2, #34	; 0x22
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2240      	movs	r2, #64	; 0x40
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052e8:	88f8      	ldrh	r0, [r7, #6]
 80052ea:	893a      	ldrh	r2, [r7, #8]
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	4603      	mov	r3, r0
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fa1b 	bl	8005734 <I2C_RequestMemoryRead>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0ad      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2bff      	cmp	r3, #255	; 0xff
 8005318:	d90e      	bls.n	8005338 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	22ff      	movs	r2, #255	; 0xff
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005324:	b2da      	uxtb	r2, r3
 8005326:	8979      	ldrh	r1, [r7, #10]
 8005328:	4b52      	ldr	r3, [pc, #328]	; (8005474 <HAL_I2C_Mem_Read+0x22c>)
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fc1f 	bl	8005b74 <I2C_TransferConfig>
 8005336:	e00f      	b.n	8005358 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	b2da      	uxtb	r2, r3
 8005348:	8979      	ldrh	r1, [r7, #10]
 800534a:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <HAL_I2C_Mem_Read+0x22c>)
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fc0e 	bl	8005b74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	2200      	movs	r2, #0
 8005360:	2104      	movs	r1, #4
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fa5e 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e07c      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d034      	beq.n	8005418 <HAL_I2C_Mem_Read+0x1d0>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d130      	bne.n	8005418 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2200      	movs	r2, #0
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa2f 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e04d      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2bff      	cmp	r3, #255	; 0xff
 80053d8:	d90e      	bls.n	80053f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	22ff      	movs	r2, #255	; 0xff
 80053de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	8979      	ldrh	r1, [r7, #10]
 80053e8:	2300      	movs	r3, #0
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fbbf 	bl	8005b74 <I2C_TransferConfig>
 80053f6:	e00f      	b.n	8005418 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005406:	b2da      	uxtb	r2, r3
 8005408:	8979      	ldrh	r1, [r7, #10]
 800540a:	2300      	movs	r3, #0
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fbae 	bl	8005b74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d19a      	bne.n	8005358 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fa7c 	bl	8005924 <I2C_WaitOnSTOPFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e01a      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2220      	movs	r2, #32
 800543c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_I2C_Mem_Read+0x230>)
 800544a:	400b      	ands	r3, r1
 800544c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	e000      	b.n	800546c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800546a:	2302      	movs	r3, #2
  }
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	80002400 	.word	0x80002400
 8005478:	fe00e800 	.word	0xfe00e800

0800547c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	603b      	str	r3, [r7, #0]
 8005488:	460b      	mov	r3, r1
 800548a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b20      	cmp	r3, #32
 800549a:	f040 80f1 	bne.w	8005680 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ac:	d101      	bne.n	80054b2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
 80054b0:	e0e7      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_I2C_IsDeviceReady+0x44>
 80054bc:	2302      	movs	r3, #2
 80054be:	e0e0      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_I2C_IsDeviceReady+0x72>
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054ec:	e004      	b.n	80054f8 <HAL_I2C_IsDeviceReady+0x7c>
 80054ee:	897b      	ldrh	r3, [r7, #10]
 80054f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80054fe:	f7fd f917 	bl	8002730 <HAL_GetTick>
 8005502:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b20      	cmp	r3, #32
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005530:	e034      	b.n	800559c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d01a      	beq.n	8005570 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fd f8f9 	bl	8002730 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <HAL_I2C_IsDeviceReady+0xd4>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10f      	bne.n	8005570 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e088      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b20      	cmp	r3, #32
 800557c:	bf0c      	ite	eq
 800557e:	2301      	moveq	r3, #1
 8005580:	2300      	movne	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b10      	cmp	r3, #16
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800559c:	7ffb      	ldrb	r3, [r7, #31]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <HAL_I2C_IsDeviceReady+0x12c>
 80055a2:	7fbb      	ldrb	r3, [r7, #30]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0c4      	beq.n	8005532 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d01a      	beq.n	80055ec <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2200      	movs	r2, #0
 80055be:	2120      	movs	r1, #32
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f92f 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e058      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2220      	movs	r2, #32
 80055d6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e04a      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	2120      	movs	r1, #32
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f914 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e03d      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2210      	movs	r2, #16
 800560c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2220      	movs	r2, #32
 8005614:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d118      	bne.n	8005650 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2200      	movs	r2, #0
 8005636:	2120      	movs	r1, #32
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f8f3 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e01c      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2220      	movs	r2, #32
 800564e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3301      	adds	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	f63f af3b 	bhi.w	80054d6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005680:	2302      	movs	r3, #2
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	461a      	mov	r2, r3
 800569a:	4603      	mov	r3, r0
 800569c:	817b      	strh	r3, [r7, #10]
 800569e:	460b      	mov	r3, r1
 80056a0:	813b      	strh	r3, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	8979      	ldrh	r1, [r7, #10]
 80056ac:	4b20      	ldr	r3, [pc, #128]	; (8005730 <I2C_RequestMemoryWrite+0xa4>)
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fa5d 	bl	8005b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f8f0 	bl	80058a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e02c      	b.n	8005728 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d105      	bne.n	80056e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056d4:	893b      	ldrh	r3, [r7, #8]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	629a      	str	r2, [r3, #40]	; 0x28
 80056de:	e015      	b.n	800570c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056e0:	893b      	ldrh	r3, [r7, #8]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f8d6 	bl	80058a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e012      	b.n	8005728 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005702:	893b      	ldrh	r3, [r7, #8]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2200      	movs	r2, #0
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f884 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	80002000 	.word	0x80002000

08005734 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4603      	mov	r3, r0
 8005744:	817b      	strh	r3, [r7, #10]
 8005746:	460b      	mov	r3, r1
 8005748:	813b      	strh	r3, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	8979      	ldrh	r1, [r7, #10]
 8005754:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <I2C_RequestMemoryRead+0xa4>)
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	2300      	movs	r3, #0
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 fa0a 	bl	8005b74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f89d 	bl	80058a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e02c      	b.n	80057ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800577a:	893b      	ldrh	r3, [r7, #8]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
 8005784:	e015      	b.n	80057b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005786:	893b      	ldrh	r3, [r7, #8]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	b29b      	uxth	r3, r3
 800578c:	b2da      	uxtb	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f883 	bl	80058a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e012      	b.n	80057ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a8:	893b      	ldrh	r3, [r7, #8]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2140      	movs	r1, #64	; 0x40
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f831 	bl	8005824 <I2C_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	80002000 	.word	0x80002000

080057dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d103      	bne.n	80057fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d007      	beq.n	8005818 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	619a      	str	r2, [r3, #24]
  }
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005834:	e022      	b.n	800587c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d01e      	beq.n	800587c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fc ff77 	bl	8002730 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d113      	bne.n	800587c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e00f      	b.n	800589c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	429a      	cmp	r2, r3
 8005898:	d0cd      	beq.n	8005836 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058b0:	e02c      	b.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f870 	bl	800599c <I2C_IsErrorOccurred>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e02a      	b.n	800591c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d01e      	beq.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fc ff2f 	bl	8002730 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d113      	bne.n	800590c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e007      	b.n	800591c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b02      	cmp	r3, #2
 8005918:	d1cb      	bne.n	80058b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005930:	e028      	b.n	8005984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f830 	bl	800599c <I2C_IsErrorOccurred>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e026      	b.n	8005994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005946:	f7fc fef3 	bl	8002730 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	d302      	bcc.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d113      	bne.n	8005984 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e007      	b.n	8005994 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b20      	cmp	r3, #32
 8005990:	d1cf      	bne.n	8005932 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	; 0x28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d075      	beq.n	8005ab4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059d0:	e056      	b.n	8005a80 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d052      	beq.n	8005a80 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059da:	f7fc fea9 	bl	8002730 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d302      	bcc.n	80059f0 <I2C_IsErrorOccurred+0x54>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d147      	bne.n	8005a80 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a12:	d12e      	bne.n	8005a72 <I2C_IsErrorOccurred+0xd6>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a1a:	d02a      	beq.n	8005a72 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d027      	beq.n	8005a72 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a30:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a32:	f7fc fe7d 	bl	8002730 <HAL_GetTick>
 8005a36:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a38:	e01b      	b.n	8005a72 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a3a:	f7fc fe79 	bl	8002730 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b19      	cmp	r3, #25
 8005a46:	d914      	bls.n	8005a72 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d1dc      	bne.n	8005a3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d003      	beq.n	8005a96 <I2C_IsErrorOccurred+0xfa>
 8005a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d09d      	beq.n	80059d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	f043 0301 	orr.w	r3, r3, #1
 8005acc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ad6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f043 0308 	orr.w	r3, r3, #8
 8005aee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01c      	beq.n	8005b64 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fe56 	bl	80057dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <I2C_IsErrorOccurred+0x1d4>)
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3728      	adds	r7, #40	; 0x28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	fe00e800 	.word	0xfe00e800

08005b74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	817b      	strh	r3, [r7, #10]
 8005b82:	4613      	mov	r3, r2
 8005b84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b86:	897b      	ldrh	r3, [r7, #10]
 8005b88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b8c:	7a7b      	ldrb	r3, [r7, #9]
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b94:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	0d5b      	lsrs	r3, r3, #21
 8005bae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005bb2:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <I2C_TransferConfig+0x60>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	ea02 0103 	and.w	r1, r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	03ff63ff 	.word	0x03ff63ff

08005bd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	d138      	bne.n	8005c60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e032      	b.n	8005c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2224      	movs	r2, #36	; 0x24
 8005c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6819      	ldr	r1, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d139      	bne.n	8005cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e033      	b.n	8005cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2224      	movs	r2, #36	; 0x24
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e000      	b.n	8005cfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d08:	b08b      	sub	sp, #44	; 0x2c
 8005d0a:	af06      	add	r7, sp, #24
 8005d0c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0d7      	b.n	8005ec8 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f007 f973 	bl	800d018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2203      	movs	r2, #3
 8005d36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f003 f807 	bl	8008d52 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]
 8005d48:	e04c      	b.n	8005de4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	440b      	add	r3, r1
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d74:	7bfa      	ldrb	r2, [r7, #15]
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	b298      	uxth	r0, r3
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	3336      	adds	r3, #54	; 0x36
 8005d88:	4602      	mov	r2, r0
 8005d8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	3303      	adds	r3, #3
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005da2:	7bfa      	ldrb	r2, [r7, #15]
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	440b      	add	r3, r1
 8005db0:	3338      	adds	r3, #56	; 0x38
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005db6:	7bfa      	ldrb	r2, [r7, #15]
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	440b      	add	r3, r1
 8005dc4:	333c      	adds	r3, #60	; 0x3c
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005dca:	7bfa      	ldrb	r2, [r7, #15]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3340      	adds	r3, #64	; 0x40
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	3301      	adds	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
 8005de4:	7bfa      	ldrb	r2, [r7, #15]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3ad      	bcc.n	8005d4a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]
 8005df2:	e044      	b.n	8005e7e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005df4:	7bfa      	ldrb	r2, [r7, #15]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	440b      	add	r3, r1
 8005e02:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	440b      	add	r3, r1
 8005e18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e1c:	7bfa      	ldrb	r2, [r7, #15]
 8005e1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e20:	7bfa      	ldrb	r2, [r7, #15]
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	440b      	add	r3, r1
 8005e2e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e36:	7bfa      	ldrb	r2, [r7, #15]
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	440b      	add	r3, r1
 8005e44:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e4c:	7bfa      	ldrb	r2, [r7, #15]
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	440b      	add	r3, r1
 8005e5a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e62:	7bfa      	ldrb	r2, [r7, #15]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
 8005e7e:	7bfa      	ldrb	r2, [r7, #15]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d3b5      	bcc.n	8005df4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	687e      	ldr	r6, [r7, #4]
 8005e90:	466d      	mov	r5, sp
 8005e92:	f106 0410 	add.w	r4, r6, #16
 8005e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	1d33      	adds	r3, r6, #4
 8005ea0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ea2:	6838      	ldr	r0, [r7, #0]
 8005ea4:	f002 ff70 	bl	8008d88 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d102      	bne.n	8005ec6 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 fc29 	bl	8007718 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_PCD_Start+0x16>
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	e012      	b.n	8005f0c <HAL_PCD_Start+0x3c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f002 ff16 	bl	8008d24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f005 f92f 	bl	800b160 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f005 f934 	bl	800b18e <USB_ReadInterrupts>
 8005f26:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fb26 	bl	8006584 <PCD_EP_ISR_Handler>

    return;
 8005f38:	e110      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d013      	beq.n	8005f6c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f56:	b292      	uxth	r2, r2
 8005f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f007 f8ec 	bl	800d13a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005f62:	2100      	movs	r1, #0
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f8fc 	bl	8006162 <HAL_PCD_SetAddress>

    return;
 8005f6a:	e0f7      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005f8e:	e0e5      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fac:	b292      	uxth	r2, r2
 8005fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005fb2:	e0d3      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d034      	beq.n	8006028 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0204 	bic.w	r2, r2, #4
 8005fd0:	b292      	uxth	r2, r2
 8005fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0208 	bic.w	r2, r2, #8
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d107      	bne.n	8006008 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006000:	2100      	movs	r1, #0
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f007 fa8e 	bl	800d524 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f007 f8cf 	bl	800d1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006020:	b292      	uxth	r2, r2
 8006022:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006026:	e099      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	2b00      	cmp	r3, #0
 8006030:	d027      	beq.n	8006082 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0208 	orr.w	r2, r2, #8
 8006044:	b292      	uxth	r2, r2
 8006046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006052:	b29a      	uxth	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800605c:	b292      	uxth	r2, r2
 800605e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0204 	orr.w	r2, r2, #4
 8006074:	b292      	uxth	r2, r2
 8006076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f007 f87c 	bl	800d178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006080:	e06c      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006088:	2b00      	cmp	r3, #0
 800608a:	d040      	beq.n	800610e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800609e:	b292      	uxth	r2, r2
 80060a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d12b      	bne.n	8006106 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0204 	orr.w	r2, r2, #4
 80060c0:	b292      	uxth	r2, r2
 80060c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	b292      	uxth	r2, r2
 80060da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	089b      	lsrs	r3, r3, #2
 80060f2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060fc:	2101      	movs	r1, #1
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f007 fa10 	bl	800d524 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006104:	e02a      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f007 f836 	bl	800d178 <HAL_PCD_SuspendCallback>
    return;
 800610c:	e026      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00f      	beq.n	8006138 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006120:	b29a      	uxth	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800612a:	b292      	uxth	r2, r2
 800612c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f006 fff4 	bl	800d11e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006136:	e011      	b.n	800615c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00c      	beq.n	800615c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800614a:	b29a      	uxth	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006154:	b292      	uxth	r2, r2
 8006156:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800615a:	bf00      	nop
  }
}
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	460b      	mov	r3, r1
 800616c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_PCD_SetAddress+0x1a>
 8006178:	2302      	movs	r3, #2
 800617a:	e013      	b.n	80061a4 <HAL_PCD_SetAddress+0x42>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	4611      	mov	r1, r2
 8006194:	4618      	mov	r0, r3
 8006196:	f004 ffcf 	bl	800b138 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	70fb      	strb	r3, [r7, #3]
 80061be:	460b      	mov	r3, r1
 80061c0:	803b      	strh	r3, [r7, #0]
 80061c2:	4613      	mov	r3, r2
 80061c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da0e      	bge.n	80061f0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	705a      	strb	r2, [r3, #1]
 80061ee:	e00e      	b.n	800620e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 0207 	and.w	r2, r3, #7
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4413      	add	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	b2da      	uxtb	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800621a:	883a      	ldrh	r2, [r7, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	78ba      	ldrb	r2, [r7, #2]
 8006224:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006238:	78bb      	ldrb	r3, [r7, #2]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d102      	bne.n	8006244 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_PCD_EP_Open+0xa6>
 800624e:	2302      	movs	r3, #2
 8006250:	e00e      	b.n	8006270 <HAL_PCD_EP_Open+0xc4>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	4618      	mov	r0, r3
 8006262:	f002 fdb3 	bl	8008dcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800626e:	7afb      	ldrb	r3, [r7, #11]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006288:	2b00      	cmp	r3, #0
 800628a:	da0e      	bge.n	80062aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	705a      	strb	r2, [r3, #1]
 80062a8:	e00e      	b.n	80062c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 0207 	and.w	r2, r3, #7
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_PCD_EP_Close+0x6a>
 80062de:	2302      	movs	r3, #2
 80062e0:	e00e      	b.n	8006300 <HAL_PCD_EP_Close+0x88>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68f9      	ldr	r1, [r7, #12]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f003 f8ff 	bl	80094f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	460b      	mov	r3, r1
 8006316:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	f003 0207 	and.w	r2, r3, #7
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2200      	movs	r2, #0
 8006346:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	b2da      	uxtb	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006354:	7afb      	ldrb	r3, [r7, #11]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6979      	ldr	r1, [r7, #20]
 8006364:	4618      	mov	r0, r3
 8006366:	f003 fab2 	bl	80098ce <USB_EPStartXfer>
 800636a:	e005      	b.n	8006378 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6979      	ldr	r1, [r7, #20]
 8006372:	4618      	mov	r0, r3
 8006374:	f003 faab 	bl	80098ce <USB_EPStartXfer>
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	f003 0207 	and.w	r2, r3, #7
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80063a4:	681b      	ldr	r3, [r3, #0]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	460b      	mov	r3, r1
 80063c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063c2:	7afb      	ldrb	r3, [r7, #11]
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	00db      	lsls	r3, r3, #3
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2201      	movs	r2, #1
 80063fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	b2da      	uxtb	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800640a:	7afb      	ldrb	r3, [r7, #11]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6979      	ldr	r1, [r7, #20]
 800641a:	4618      	mov	r0, r3
 800641c:	f003 fa57 	bl	80098ce <USB_EPStartXfer>
 8006420:	e005      	b.n	800642e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6979      	ldr	r1, [r7, #20]
 8006428:	4618      	mov	r0, r3
 800642a:	f003 fa50 	bl	80098ce <USB_EPStartXfer>
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 0207 	and.w	r2, r3, #7
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d901      	bls.n	8006456 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e03e      	b.n	80064d4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800645a:	2b00      	cmp	r3, #0
 800645c:	da0e      	bge.n	800647c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	705a      	strb	r2, [r3, #1]
 800647a:	e00c      	b.n	8006496 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800647c:	78fa      	ldrb	r2, [r7, #3]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_PCD_EP_SetStall+0x7e>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e00e      	b.n	80064d4 <HAL_PCD_EP_SetStall+0x9c>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68f9      	ldr	r1, [r7, #12]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f004 fd38 	bl	800af3a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 020f 	and.w	r2, r3, #15
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d901      	bls.n	80064fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e040      	b.n	800657c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	da0e      	bge.n	8006520 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	4413      	add	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	705a      	strb	r2, [r3, #1]
 800651e:	e00e      	b.n	800653e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	f003 0207 	and.w	r2, r3, #7
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_PCD_EP_ClrStall+0x82>
 800655a:	2302      	movs	r3, #2
 800655c:	e00e      	b.n	800657c <HAL_PCD_EP_ClrStall+0xa0>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	4618      	mov	r0, r3
 800656e:	f004 fd35 	bl	800afdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b096      	sub	sp, #88	; 0x58
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800658c:	e39c      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006596:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800659a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80065a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 815e 	bne.w	800686e <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80065b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d150      	bne.n	8006660 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80065ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ce:	81fb      	strh	r3, [r7, #14]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	89fb      	ldrh	r3, [r7, #14]
 80065d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3328      	adds	r3, #40	; 0x28
 80065e6:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4413      	add	r3, r2
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	4413      	add	r3, r2
 8006602:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800660c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	441a      	add	r2, r3
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800661e:	2100      	movs	r1, #0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f006 fd62 	bl	800d0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 834a 	beq.w	8006cc8 <PCD_EP_ISR_Handler+0x744>
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 8345 	bne.w	8006cc8 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800664a:	b2da      	uxtb	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	b292      	uxth	r2, r2
 8006652:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800665e:	e333      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006672:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667a:	2b00      	cmp	r3, #0
 800667c:	d032      	beq.n	80066e4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	4413      	add	r3, r2
 8006698:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80066a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80066b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f004 fdba 	bl	800b232 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80066ca:	4013      	ands	r3, r2
 80066cc:	823b      	strh	r3, [r7, #16]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	8a3a      	ldrh	r2, [r7, #16]
 80066d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066d8:	b292      	uxth	r2, r2
 80066da:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f006 fcd7 	bl	800d090 <HAL_PCD_SetupStageCallback>
 80066e2:	e2f1      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80066e4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f280 82ed 	bge.w	8006cc8 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80066fa:	4013      	ands	r3, r2
 80066fc:	83fb      	strh	r3, [r7, #30]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	8bfa      	ldrh	r2, [r7, #30]
 8006704:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006708:	b292      	uxth	r2, r2
 800670a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006714:	b29b      	uxth	r3, r3
 8006716:	461a      	mov	r2, r3
 8006718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	4413      	add	r3, r2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	4413      	add	r3, r2
 8006726:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006732:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d019      	beq.n	8006770 <PCD_EP_ISR_Handler+0x1ec>
 800673c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	6959      	ldr	r1, [r3, #20]
 800674c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006754:	b29b      	uxth	r3, r3
 8006756:	f004 fd6c 	bl	800b232 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800675a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675c:	695a      	ldr	r2, [r3, #20]
 800675e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	441a      	add	r2, r3
 8006764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006766:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006768:	2100      	movs	r1, #0
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f006 fca2 	bl	800d0b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 82a3 	bne.w	8006cc8 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006790:	b29b      	uxth	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	4413      	add	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b3e      	cmp	r3, #62	; 0x3e
 80067a8:	d918      	bls.n	80067dc <PCD_EP_ISR_Handler+0x258>
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	647b      	str	r3, [r7, #68]	; 0x44
 80067b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <PCD_EP_ISR_Handler+0x240>
 80067be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c0:	3b01      	subs	r3, #1
 80067c2:	647b      	str	r3, [r7, #68]	; 0x44
 80067c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	029b      	lsls	r3, r3, #10
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e029      	b.n	8006830 <PCD_EP_ISR_Handler+0x2ac>
 80067dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d112      	bne.n	800680a <PCD_EP_ISR_Handler+0x286>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006802:	b29a      	uxth	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	e012      	b.n	8006830 <PCD_EP_ISR_Handler+0x2ac>
 800680a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
 8006812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <PCD_EP_ISR_Handler+0x2a0>
 800681e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006820:	3301      	adds	r3, #1
 8006822:	647b      	str	r3, [r7, #68]	; 0x44
 8006824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29a      	uxth	r2, r3
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006840:	827b      	strh	r3, [r7, #18]
 8006842:	8a7b      	ldrh	r3, [r7, #18]
 8006844:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006848:	827b      	strh	r3, [r7, #18]
 800684a:	8a7b      	ldrh	r3, [r7, #18]
 800684c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006850:	827b      	strh	r3, [r7, #18]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	8a7b      	ldrh	r3, [r7, #18]
 8006858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006868:	b29b      	uxth	r3, r3
 800686a:	8013      	strh	r3, [r2, #0]
 800686c:	e22c      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006882:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006886:	2b00      	cmp	r3, #0
 8006888:	f280 80f6 	bge.w	8006a78 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29a      	uxth	r2, r3
 800689e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80068a2:	4013      	ands	r3, r2
 80068a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80068ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068be:	b292      	uxth	r2, r2
 80068c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80068c2:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80068d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068da:	7b1b      	ldrb	r3, [r3, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d123      	bne.n	8006928 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	4413      	add	r3, r2
 80068fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006904:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006908:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 808e 	beq.w	8006a2e <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006918:	6959      	ldr	r1, [r3, #20]
 800691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691c:	88da      	ldrh	r2, [r3, #6]
 800691e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006922:	f004 fc86 	bl	800b232 <USB_ReadPMA>
 8006926:	e082      	b.n	8006a2e <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692a:	78db      	ldrb	r3, [r3, #3]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d10a      	bne.n	8006946 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006930:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006934:	461a      	mov	r2, r3
 8006936:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f9d3 	bl	8006ce4 <HAL_PCD_EP_DB_Receive>
 800693e:	4603      	mov	r3, r0
 8006940:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006944:	e073      	b.n	8006a2e <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	441a      	add	r2, r3
 8006972:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006982:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006986:	b29b      	uxth	r3, r3
 8006988:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d022      	beq.n	80069ea <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	461a      	mov	r2, r3
 80069b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	4413      	add	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80069cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d02c      	beq.n	8006a2e <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069da:	6959      	ldr	r1, [r3, #20]
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	891a      	ldrh	r2, [r3, #8]
 80069e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069e4:	f004 fc25 	bl	800b232 <USB_ReadPMA>
 80069e8:	e021      	b.n	8006a2e <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006a12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a20:	6959      	ldr	r1, [r3, #20]
 8006a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a24:	895a      	ldrh	r2, [r3, #10]
 8006a26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a2a:	f004 fc02 	bl	800b232 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a36:	441a      	add	r2, r3
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a44:	441a      	add	r2, r3
 8006a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a48:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <PCD_EP_ISR_Handler+0x4da>
 8006a52:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d206      	bcs.n	8006a6c <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f006 fb25 	bl	800d0b4 <HAL_PCD_DataOutStageCallback>
 8006a6a:	e005      	b.n	8006a78 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006a72:	4618      	mov	r0, r3
 8006a74:	f002 ff2b 	bl	80098ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006a78:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8121 	beq.w	8006cc8 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8006a86:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	78db      	ldrb	r3, [r3, #3]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	f000 80a2 	beq.w	8006c24 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae8:	7b1b      	ldrb	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8093 	beq.w	8006c16 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006af0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d046      	beq.n	8006b8a <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d126      	bne.n	8006b52 <PCD_EP_ISR_Handler+0x5ce>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	461a      	mov	r2, r3
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	4413      	add	r3, r2
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	00da      	lsls	r2, r3, #3
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b2a:	623b      	str	r3, [r7, #32]
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	e061      	b.n	8006c16 <PCD_EP_ISR_Handler+0x692>
 8006b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d15d      	bne.n	8006c16 <PCD_EP_ISR_Handler+0x692>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	4413      	add	r3, r2
 8006b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	00da      	lsls	r2, r3, #3
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2200      	movs	r2, #0
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	e045      	b.n	8006c16 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d126      	bne.n	8006be6 <PCD_EP_ISR_Handler+0x662>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	4413      	add	r3, r2
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	00da      	lsls	r2, r3, #3
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	e017      	b.n	8006c16 <PCD_EP_ISR_Handler+0x692>
 8006be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d113      	bne.n	8006c16 <PCD_EP_ISR_Handler+0x692>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfc:	4413      	add	r3, r2
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00da      	lsls	r2, r3, #3
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	2200      	movs	r2, #0
 8006c14:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f006 fa64 	bl	800d0ea <HAL_PCD_DataInStageCallback>
 8006c22:	e051      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006c24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d144      	bne.n	8006cba <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	699a      	ldr	r2, [r3, #24]
 8006c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d907      	bls.n	8006c74 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c66:	699a      	ldr	r2, [r3, #24]
 8006c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c6c:	1ad2      	subs	r2, r2, r3
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c70:	619a      	str	r2, [r3, #24]
 8006c72:	e002      	b.n	8006c7a <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c76:	2200      	movs	r2, #0
 8006c78:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f006 fa2e 	bl	800d0ea <HAL_PCD_DataInStageCallback>
 8006c8e:	e01b      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c92:	695a      	ldr	r2, [r3, #20]
 8006c94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c98:	441a      	add	r2, r3
 8006c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca0:	69da      	ldr	r2, [r3, #28]
 8006ca2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ca6:	441a      	add	r2, r3
 8006ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006caa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 fe0b 	bl	80098ce <USB_EPStartXfer>
 8006cb8:	e006      	b.n	8006cc8 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006cba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f917 	bl	8006ef6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	b21b      	sxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f6ff ac5a 	blt.w	800658e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3758      	adds	r7, #88	; 0x58
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d07c      	beq.n	8006df6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	4413      	add	r3, r2
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	6812      	ldr	r2, [r2, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	699a      	ldr	r2, [r3, #24]
 8006d26:	8b7b      	ldrh	r3, [r7, #26]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d306      	bcc.n	8006d3a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	8b7b      	ldrh	r3, [r7, #26]
 8006d32:	1ad2      	subs	r2, r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	619a      	str	r2, [r3, #24]
 8006d38:	e002      	b.n	8006d40 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d123      	bne.n	8006d90 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	833b      	strh	r3, [r7, #24]
 8006d64:	8b3b      	ldrh	r3, [r7, #24]
 8006d66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d6a:	833b      	strh	r3, [r7, #24]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	441a      	add	r2, r3
 8006d7a:	8b3b      	ldrh	r3, [r7, #24]
 8006d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01f      	beq.n	8006dda <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db4:	82fb      	strh	r3, [r7, #22]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	8afb      	ldrh	r3, [r7, #22]
 8006dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006dda:	8b7b      	ldrh	r3, [r7, #26]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8085 	beq.w	8006eec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	891a      	ldrh	r2, [r3, #8]
 8006dee:	8b7b      	ldrh	r3, [r7, #26]
 8006df0:	f004 fa1f 	bl	800b232 <USB_ReadPMA>
 8006df4:	e07a      	b.n	8006eec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	8b7b      	ldrh	r3, [r7, #26]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d306      	bcc.n	8006e34 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	8b7b      	ldrh	r3, [r7, #26]
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	619a      	str	r2, [r3, #24]
 8006e32:	e002      	b.n	8006e3a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d123      	bne.n	8006e8a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5c:	83fb      	strh	r3, [r7, #30]
 8006e5e:	8bfb      	ldrh	r3, [r7, #30]
 8006e60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e64:	83fb      	strh	r3, [r7, #30]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8bfb      	ldrh	r3, [r7, #30]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11f      	bne.n	8006ed4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eae:	83bb      	strh	r3, [r7, #28]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	8bbb      	ldrh	r3, [r7, #28]
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ed4:	8b7b      	ldrh	r3, [r7, #26]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6959      	ldr	r1, [r3, #20]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	895a      	ldrh	r2, [r3, #10]
 8006ee6:	8b7b      	ldrh	r3, [r7, #26]
 8006ee8:	f004 f9a3 	bl	800b232 <USB_ReadPMA>
    }
  }

  return count;
 8006eec:	8b7b      	ldrh	r3, [r7, #26]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b0a2      	sub	sp, #136	; 0x88
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	4613      	mov	r3, r2
 8006f02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 81c5 	beq.w	800729a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	4413      	add	r3, r2
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d907      	bls.n	8006f54 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f4c:	1ad2      	subs	r2, r2, r3
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	619a      	str	r2, [r3, #24]
 8006f52:	e002      	b.n	8006f5a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 80b9 	bne.w	80070d6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d126      	bne.n	8006fba <HAL_PCD_EP_DB_Transmit+0xc4>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	4413      	add	r3, r2
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00da      	lsls	r2, r3, #3
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e01a      	b.n	8006ff0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d116      	bne.n	8006ff0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	4413      	add	r3, r2
 8006fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	00da      	lsls	r2, r3, #3
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	2200      	movs	r2, #0
 8006fee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d126      	bne.n	800704c <HAL_PCD_EP_DB_Transmit+0x156>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	4413      	add	r3, r2
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	00da      	lsls	r2, r3, #3
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	4413      	add	r3, r2
 8007020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007030:	b29a      	uxth	r2, r3
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007044:	b29a      	uxth	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e017      	b.n	800707c <HAL_PCD_EP_DB_Transmit+0x186>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d113      	bne.n	800707c <HAL_PCD_EP_DB_Transmit+0x186>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	4413      	add	r3, r2
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	4413      	add	r3, r2
 8007070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007074:	61fb      	str	r3, [r7, #28]
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	2200      	movs	r2, #0
 800707a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	4619      	mov	r1, r3
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f006 f831 	bl	800d0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 82d2 	beq.w	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	827b      	strh	r3, [r7, #18]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	8a7b      	ldrh	r3, [r7, #18]
 80070c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	8013      	strh	r3, [r2, #0]
 80070d4:	e2b0      	b.n	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d021      	beq.n	8007124 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	441a      	add	r2, r3
 800710c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	b29b      	uxth	r3, r3
 8007122:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800712a:	2b01      	cmp	r3, #1
 800712c:	f040 8284 	bne.w	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	695a      	ldr	r2, [r3, #20]
 8007134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007138:	441a      	add	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	69da      	ldr	r2, [r3, #28]
 8007142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007146:	441a      	add	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6a1a      	ldr	r2, [r3, #32]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	429a      	cmp	r2, r3
 8007156:	d309      	bcc.n	800716c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007164:	1ad2      	subs	r2, r2, r3
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	621a      	str	r2, [r3, #32]
 800716a:	e015      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d107      	bne.n	8007184 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007178:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007182:	e009      	b.n	8007198 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2200      	movs	r2, #0
 8007196:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d155      	bne.n	800724c <HAL_PCD_EP_DB_Transmit+0x356>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	4413      	add	r3, r2
 80071b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	00da      	lsls	r2, r3, #3
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	4413      	add	r3, r2
 80071c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
 80071c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ca:	2b3e      	cmp	r3, #62	; 0x3e
 80071cc:	d916      	bls.n	80071fc <HAL_PCD_EP_DB_Transmit+0x306>
 80071ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80071de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e0:	3b01      	subs	r3, #1
 80071e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	029b      	lsls	r3, r3, #10
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e043      	b.n	8007284 <HAL_PCD_EP_DB_Transmit+0x38e>
 80071fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d112      	bne.n	8007228 <HAL_PCD_EP_DB_Transmit+0x332>
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800720c:	b29a      	uxth	r2, r3
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007220:	b29a      	uxth	r2, r3
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e02d      	b.n	8007284 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	64bb      	str	r3, [r7, #72]	; 0x48
 800722e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_PCD_EP_DB_Transmit+0x348>
 8007238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800723a:	3301      	adds	r3, #1
 800723c:	64bb      	str	r3, [r7, #72]	; 0x48
 800723e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007240:	b29b      	uxth	r3, r3
 8007242:	029b      	lsls	r3, r3, #10
 8007244:	b29a      	uxth	r2, r3
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	e01b      	b.n	8007284 <HAL_PCD_EP_DB_Transmit+0x38e>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d117      	bne.n	8007284 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	643b      	str	r3, [r7, #64]	; 0x40
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007268:	4413      	add	r3, r2
 800726a:	643b      	str	r3, [r7, #64]	; 0x40
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	00da      	lsls	r2, r3, #3
 8007272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007274:	4413      	add	r3, r2
 8007276:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800727c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727e:	b29a      	uxth	r2, r3
 8007280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007282:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6959      	ldr	r1, [r3, #20]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	891a      	ldrh	r2, [r3, #8]
 8007290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007292:	b29b      	uxth	r3, r3
 8007294:	f003 ff8b 	bl	800b1ae <USB_WritePMA>
 8007298:	e1ce      	b.n	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d307      	bcc.n	80072de <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	619a      	str	r2, [r3, #24]
 80072dc:	e002      	b.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2200      	movs	r2, #0
 80072e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 80c4 	bne.w	8007476 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d126      	bne.n	8007344 <HAL_PCD_EP_DB_Transmit+0x44e>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007304:	b29b      	uxth	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800730a:	4413      	add	r3, r2
 800730c:	66bb      	str	r3, [r7, #104]	; 0x68
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00da      	lsls	r2, r3, #3
 8007314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007316:	4413      	add	r3, r2
 8007318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800731c:	667b      	str	r3, [r7, #100]	; 0x64
 800731e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007328:	b29a      	uxth	r2, r3
 800732a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733c:	b29a      	uxth	r2, r3
 800733e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007340:	801a      	strh	r2, [r3, #0]
 8007342:	e01a      	b.n	800737a <HAL_PCD_EP_DB_Transmit+0x484>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d116      	bne.n	800737a <HAL_PCD_EP_DB_Transmit+0x484>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	673b      	str	r3, [r7, #112]	; 0x70
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735a:	b29b      	uxth	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007360:	4413      	add	r3, r2
 8007362:	673b      	str	r3, [r7, #112]	; 0x70
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	00da      	lsls	r2, r3, #3
 800736a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800736c:	4413      	add	r3, r2
 800736e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007376:	2200      	movs	r2, #0
 8007378:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d12f      	bne.n	80073e8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073a0:	4413      	add	r3, r2
 80073a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073b0:	4413      	add	r3, r2
 80073b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073de:	b29a      	uxth	r2, r3
 80073e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073e4:	801a      	strh	r2, [r3, #0]
 80073e6:	e017      	b.n	8007418 <HAL_PCD_EP_DB_Transmit+0x522>
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d113      	bne.n	8007418 <HAL_PCD_EP_DB_Transmit+0x522>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	461a      	mov	r2, r3
 80073fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073fe:	4413      	add	r3, r2
 8007400:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	00da      	lsls	r2, r3, #3
 8007408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800740a:	4413      	add	r3, r2
 800740c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007410:	67bb      	str	r3, [r7, #120]	; 0x78
 8007412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007414:	2200      	movs	r2, #0
 8007416:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	4619      	mov	r1, r3
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f005 fe63 	bl	800d0ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 8104 	bne.w	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	b29b      	uxth	r3, r3
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	441a      	add	r2, r3
 800745c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800746c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007470:	b29b      	uxth	r3, r3
 8007472:	8013      	strh	r3, [r2, #0]
 8007474:	e0e0      	b.n	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d121      	bne.n	80074c4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	441a      	add	r2, r3
 80074ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	f040 80b4 	bne.w	8007638 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074d8:	441a      	add	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	69da      	ldr	r2, [r3, #28]
 80074e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074e6:	441a      	add	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	6a1a      	ldr	r2, [r3, #32]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d309      	bcc.n	800750c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	621a      	str	r2, [r3, #32]
 800750a:	e015      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d107      	bne.n	8007524 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007514:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007518:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007522:	e009      	b.n	8007538 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2200      	movs	r2, #0
 800752e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	663b      	str	r3, [r7, #96]	; 0x60
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d155      	bne.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	65bb      	str	r3, [r7, #88]	; 0x58
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800755a:	4413      	add	r3, r2
 800755c:	65bb      	str	r3, [r7, #88]	; 0x58
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	00da      	lsls	r2, r3, #3
 8007564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007566:	4413      	add	r3, r2
 8007568:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800756c:	657b      	str	r3, [r7, #84]	; 0x54
 800756e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007570:	2b3e      	cmp	r3, #62	; 0x3e
 8007572:	d916      	bls.n	80075a2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	677b      	str	r3, [r7, #116]	; 0x74
 800757a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_PCD_EP_DB_Transmit+0x694>
 8007584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007586:	3b01      	subs	r3, #1
 8007588:	677b      	str	r3, [r7, #116]	; 0x74
 800758a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800758c:	b29b      	uxth	r3, r3
 800758e:	029b      	lsls	r3, r3, #10
 8007590:	b29b      	uxth	r3, r3
 8007592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800759a:	b29a      	uxth	r2, r3
 800759c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e040      	b.n	8007624 <HAL_PCD_EP_DB_Transmit+0x72e>
 80075a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d112      	bne.n	80075ce <HAL_PCD_EP_DB_Transmit+0x6d8>
 80075a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	e02a      	b.n	8007624 <HAL_PCD_EP_DB_Transmit+0x72e>
 80075ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d0:	085b      	lsrs	r3, r3, #1
 80075d2:	677b      	str	r3, [r7, #116]	; 0x74
 80075d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80075de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e0:	3301      	adds	r3, #1
 80075e2:	677b      	str	r3, [r7, #116]	; 0x74
 80075e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e018      	b.n	8007624 <HAL_PCD_EP_DB_Transmit+0x72e>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d114      	bne.n	8007624 <HAL_PCD_EP_DB_Transmit+0x72e>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007608:	4413      	add	r3, r2
 800760a:	663b      	str	r3, [r7, #96]	; 0x60
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	00da      	lsls	r2, r3, #3
 8007612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007614:	4413      	add	r3, r2
 8007616:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800761a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800761c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761e:	b29a      	uxth	r2, r3
 8007620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007622:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6959      	ldr	r1, [r3, #20]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	895a      	ldrh	r2, [r3, #10]
 8007630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007632:	b29b      	uxth	r3, r3
 8007634:	f003 fdbb 	bl	800b1ae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007652:	823b      	strh	r3, [r7, #16]
 8007654:	8a3b      	ldrh	r3, [r7, #16]
 8007656:	f083 0310 	eor.w	r3, r3, #16
 800765a:	823b      	strh	r3, [r7, #16]
 800765c:	8a3b      	ldrh	r3, [r7, #16]
 800765e:	f083 0320 	eor.w	r3, r3, #32
 8007662:	823b      	strh	r3, [r7, #16]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	8a3b      	ldrh	r3, [r7, #16]
 8007674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800767c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	b29b      	uxth	r3, r3
 8007686:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3788      	adds	r7, #136	; 0x88
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007692:	b480      	push	{r7}
 8007694:	b087      	sub	sp, #28
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	817b      	strh	r3, [r7, #10]
 80076a0:	4613      	mov	r3, r2
 80076a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80076a4:	897b      	ldrh	r3, [r7, #10]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076b0:	897b      	ldrh	r3, [r7, #10]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e009      	b.n	80076dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076c8:	897a      	ldrh	r2, [r7, #10]
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4413      	add	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d107      	bne.n	80076f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	80da      	strh	r2, [r3, #6]
 80076f0:	e00b      	b.n	800770a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2201      	movs	r2, #1
 80076f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	0c1b      	lsrs	r3, r3, #16
 8007704:	b29a      	uxth	r2, r3
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800773c:	b29b      	uxth	r3, r3
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007750:	b29b      	uxth	r3, r3
 8007752:	f043 0302 	orr.w	r3, r3, #2
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d141      	bne.n	80077fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800777a:	4b4b      	ldr	r3, [pc, #300]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007786:	d131      	bne.n	80077ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007788:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800778a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800778e:	4a46      	ldr	r2, [pc, #280]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007798:	4b43      	ldr	r3, [pc, #268]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077a0:	4a41      	ldr	r2, [pc, #260]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80077a8:	4b40      	ldr	r3, [pc, #256]	; (80078ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2232      	movs	r2, #50	; 0x32
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	4a3f      	ldr	r2, [pc, #252]	; (80078b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	0c9b      	lsrs	r3, r3, #18
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077be:	e002      	b.n	80077c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077c6:	4b38      	ldr	r3, [pc, #224]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d2:	d102      	bne.n	80077da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f2      	bne.n	80077c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077da:	4b33      	ldr	r3, [pc, #204]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e6:	d158      	bne.n	800789a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e057      	b.n	800789c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077ec:	4b2e      	ldr	r3, [pc, #184]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f2:	4a2d      	ldr	r2, [pc, #180]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80077fc:	e04d      	b.n	800789a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007804:	d141      	bne.n	800788a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007806:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800780e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007812:	d131      	bne.n	8007878 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007814:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800781a:	4a23      	ldr	r2, [pc, #140]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800781c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007824:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800782c:	4a1e      	ldr	r2, [pc, #120]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800782e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007834:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2232      	movs	r2, #50	; 0x32
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	4a1c      	ldr	r2, [pc, #112]	; (80078b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	0c9b      	lsrs	r3, r3, #18
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800784a:	e002      	b.n	8007852 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3b01      	subs	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800785a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785e:	d102      	bne.n	8007866 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f2      	bne.n	800784c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007866:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007872:	d112      	bne.n	800789a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e011      	b.n	800789c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007878:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800787a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787e:	4a0a      	ldr	r2, [pc, #40]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007888:	e007      	b.n	800789a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007892:	4a05      	ldr	r2, [pc, #20]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007898:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40007000 	.word	0x40007000
 80078ac:	20000000 	.word	0x20000000
 80078b0:	431bde83 	.word	0x431bde83

080078b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e306      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d075      	beq.n	80079be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078d2:	4b97      	ldr	r3, [pc, #604]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 030c 	and.w	r3, r3, #12
 80078da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078dc:	4b94      	ldr	r3, [pc, #592]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b0c      	cmp	r3, #12
 80078ea:	d102      	bne.n	80078f2 <HAL_RCC_OscConfig+0x3e>
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d002      	beq.n	80078f8 <HAL_RCC_OscConfig+0x44>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10b      	bne.n	8007910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078f8:	4b8d      	ldr	r3, [pc, #564]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d05b      	beq.n	80079bc <HAL_RCC_OscConfig+0x108>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d157      	bne.n	80079bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e2e1      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007918:	d106      	bne.n	8007928 <HAL_RCC_OscConfig+0x74>
 800791a:	4b85      	ldr	r3, [pc, #532]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a84      	ldr	r2, [pc, #528]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	e01d      	b.n	8007964 <HAL_RCC_OscConfig+0xb0>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007930:	d10c      	bne.n	800794c <HAL_RCC_OscConfig+0x98>
 8007932:	4b7f      	ldr	r3, [pc, #508]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a7e      	ldr	r2, [pc, #504]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	4b7c      	ldr	r3, [pc, #496]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a7b      	ldr	r2, [pc, #492]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	e00b      	b.n	8007964 <HAL_RCC_OscConfig+0xb0>
 800794c:	4b78      	ldr	r3, [pc, #480]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a77      	ldr	r2, [pc, #476]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	4b75      	ldr	r3, [pc, #468]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a74      	ldr	r2, [pc, #464]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 800795e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d013      	beq.n	8007994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796c:	f7fa fee0 	bl	8002730 <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007974:	f7fa fedc 	bl	8002730 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b64      	cmp	r3, #100	; 0x64
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e2a6      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007986:	4b6a      	ldr	r3, [pc, #424]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f0      	beq.n	8007974 <HAL_RCC_OscConfig+0xc0>
 8007992:	e014      	b.n	80079be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007994:	f7fa fecc 	bl	8002730 <HAL_GetTick>
 8007998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800799a:	e008      	b.n	80079ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800799c:	f7fa fec8 	bl	8002730 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b64      	cmp	r3, #100	; 0x64
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e292      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079ae:	4b60      	ldr	r3, [pc, #384]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f0      	bne.n	800799c <HAL_RCC_OscConfig+0xe8>
 80079ba:	e000      	b.n	80079be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d075      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079ca:	4b59      	ldr	r3, [pc, #356]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 030c 	and.w	r3, r3, #12
 80079d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079d4:	4b56      	ldr	r3, [pc, #344]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0303 	and.w	r3, r3, #3
 80079dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d102      	bne.n	80079ea <HAL_RCC_OscConfig+0x136>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d002      	beq.n	80079f0 <HAL_RCC_OscConfig+0x13c>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d11f      	bne.n	8007a30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079f0:	4b4f      	ldr	r3, [pc, #316]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <HAL_RCC_OscConfig+0x154>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e265      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a08:	4b49      	ldr	r3, [pc, #292]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	061b      	lsls	r3, r3, #24
 8007a16:	4946      	ldr	r1, [pc, #280]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a1c:	4b45      	ldr	r3, [pc, #276]	; (8007b34 <HAL_RCC_OscConfig+0x280>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fa fe39 	bl	8002698 <HAL_InitTick>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d043      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e251      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d023      	beq.n	8007a80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a38:	4b3d      	ldr	r3, [pc, #244]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a3c      	ldr	r2, [pc, #240]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a44:	f7fa fe74 	bl	8002730 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a4c:	f7fa fe70 	bl	8002730 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e23a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a5e:	4b34      	ldr	r3, [pc, #208]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0f0      	beq.n	8007a4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6a:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	492d      	ldr	r1, [pc, #180]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	604b      	str	r3, [r1, #4]
 8007a7e:	e01a      	b.n	8007ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a80:	4b2b      	ldr	r3, [pc, #172]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fa fe50 	bl	8002730 <HAL_GetTick>
 8007a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a94:	f7fa fe4c 	bl	8002730 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e216      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007aa6:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f0      	bne.n	8007a94 <HAL_RCC_OscConfig+0x1e0>
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ab4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d041      	beq.n	8007b46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d01c      	beq.n	8007b04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007aca:	4b19      	ldr	r3, [pc, #100]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ad0:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ada:	f7fa fe29 	bl	8002730 <HAL_GetTick>
 8007ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ae0:	e008      	b.n	8007af4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ae2:	f7fa fe25 	bl	8002730 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d901      	bls.n	8007af4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e1ef      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007af4:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0ef      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x22e>
 8007b02:	e020      	b.n	8007b46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <HAL_RCC_OscConfig+0x27c>)
 8007b0c:	f023 0301 	bic.w	r3, r3, #1
 8007b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b14:	f7fa fe0c 	bl	8002730 <HAL_GetTick>
 8007b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b1a:	e00d      	b.n	8007b38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b1c:	f7fa fe08 	bl	8002730 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d906      	bls.n	8007b38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e1d2      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
 8007b2e:	bf00      	nop
 8007b30:	40021000 	.word	0x40021000
 8007b34:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b38:	4b8c      	ldr	r3, [pc, #560]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1ea      	bne.n	8007b1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80a6 	beq.w	8007ca0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b54:	2300      	movs	r3, #0
 8007b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b58:	4b84      	ldr	r3, [pc, #528]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <HAL_RCC_OscConfig+0x2b4>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <HAL_RCC_OscConfig+0x2b6>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b6e:	4b7f      	ldr	r3, [pc, #508]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b72:	4a7e      	ldr	r2, [pc, #504]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6593      	str	r3, [r2, #88]	; 0x58
 8007b7a:	4b7c      	ldr	r3, [pc, #496]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007b86:	2301      	movs	r3, #1
 8007b88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b8a:	4b79      	ldr	r3, [pc, #484]	; (8007d70 <HAL_RCC_OscConfig+0x4bc>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d118      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b96:	4b76      	ldr	r3, [pc, #472]	; (8007d70 <HAL_RCC_OscConfig+0x4bc>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a75      	ldr	r2, [pc, #468]	; (8007d70 <HAL_RCC_OscConfig+0x4bc>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ba2:	f7fa fdc5 	bl	8002730 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007baa:	f7fa fdc1 	bl	8002730 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e18b      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bbc:	4b6c      	ldr	r3, [pc, #432]	; (8007d70 <HAL_RCC_OscConfig+0x4bc>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d108      	bne.n	8007be2 <HAL_RCC_OscConfig+0x32e>
 8007bd0:	4b66      	ldr	r3, [pc, #408]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	4a65      	ldr	r2, [pc, #404]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007be0:	e024      	b.n	8007c2c <HAL_RCC_OscConfig+0x378>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d110      	bne.n	8007c0c <HAL_RCC_OscConfig+0x358>
 8007bea:	4b60      	ldr	r3, [pc, #384]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf0:	4a5e      	ldr	r2, [pc, #376]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007bf2:	f043 0304 	orr.w	r3, r3, #4
 8007bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007bfa:	4b5c      	ldr	r3, [pc, #368]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c00:	4a5a      	ldr	r2, [pc, #360]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c0a:	e00f      	b.n	8007c2c <HAL_RCC_OscConfig+0x378>
 8007c0c:	4b57      	ldr	r3, [pc, #348]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	4a56      	ldr	r2, [pc, #344]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c1c:	4b53      	ldr	r3, [pc, #332]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c22:	4a52      	ldr	r2, [pc, #328]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c24:	f023 0304 	bic.w	r3, r3, #4
 8007c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d016      	beq.n	8007c62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c34:	f7fa fd7c 	bl	8002730 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c3a:	e00a      	b.n	8007c52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c3c:	f7fa fd78 	bl	8002730 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e140      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c52:	4b46      	ldr	r3, [pc, #280]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0ed      	beq.n	8007c3c <HAL_RCC_OscConfig+0x388>
 8007c60:	e015      	b.n	8007c8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c62:	f7fa fd65 	bl	8002730 <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c68:	e00a      	b.n	8007c80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c6a:	f7fa fd61 	bl	8002730 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e129      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c80:	4b3a      	ldr	r3, [pc, #232]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1ed      	bne.n	8007c6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c8e:	7ffb      	ldrb	r3, [r7, #31]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d105      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c94:	4b35      	ldr	r3, [pc, #212]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c98:	4a34      	ldr	r2, [pc, #208]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d03c      	beq.n	8007d26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01c      	beq.n	8007cee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cb4:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cba:	4a2c      	ldr	r2, [pc, #176]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc4:	f7fa fd34 	bl	8002730 <HAL_GetTick>
 8007cc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ccc:	f7fa fd30 	bl	8002730 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e0fa      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007cde:	4b23      	ldr	r3, [pc, #140]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0ef      	beq.n	8007ccc <HAL_RCC_OscConfig+0x418>
 8007cec:	e01b      	b.n	8007d26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cee:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cf4:	4a1d      	ldr	r2, [pc, #116]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
 8007cfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfe:	f7fa fd17 	bl	8002730 <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d06:	f7fa fd13 	bl	8002730 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e0dd      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d18:	4b14      	ldr	r3, [pc, #80]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1ef      	bne.n	8007d06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80d1 	beq.w	8007ed2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d30:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f003 030c 	and.w	r3, r3, #12
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	f000 808b 	beq.w	8007e54 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d15e      	bne.n	8007e04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a08      	ldr	r2, [pc, #32]	; (8007d6c <HAL_RCC_OscConfig+0x4b8>)
 8007d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d52:	f7fa fced 	bl	8002730 <HAL_GetTick>
 8007d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d58:	e00c      	b.n	8007d74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d5a:	f7fa fce9 	bl	8002730 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d905      	bls.n	8007d74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e0b3      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d74:	4b59      	ldr	r3, [pc, #356]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1ec      	bne.n	8007d5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d80:	4b56      	ldr	r3, [pc, #344]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	4b56      	ldr	r3, [pc, #344]	; (8007ee0 <HAL_RCC_OscConfig+0x62c>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6a11      	ldr	r1, [r2, #32]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d90:	3a01      	subs	r2, #1
 8007d92:	0112      	lsls	r2, r2, #4
 8007d94:	4311      	orrs	r1, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007d9a:	0212      	lsls	r2, r2, #8
 8007d9c:	4311      	orrs	r1, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007da2:	0852      	lsrs	r2, r2, #1
 8007da4:	3a01      	subs	r2, #1
 8007da6:	0552      	lsls	r2, r2, #21
 8007da8:	4311      	orrs	r1, r2
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007dae:	0852      	lsrs	r2, r2, #1
 8007db0:	3a01      	subs	r2, #1
 8007db2:	0652      	lsls	r2, r2, #25
 8007db4:	4311      	orrs	r1, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dba:	06d2      	lsls	r2, r2, #27
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	4947      	ldr	r1, [pc, #284]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dc4:	4b45      	ldr	r3, [pc, #276]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a44      	ldr	r2, [pc, #272]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007dd0:	4b42      	ldr	r3, [pc, #264]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	4a41      	ldr	r2, [pc, #260]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ddc:	f7fa fca8 	bl	8002730 <HAL_GetTick>
 8007de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de4:	f7fa fca4 	bl	8002730 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e06e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df6:	4b39      	ldr	r3, [pc, #228]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f0      	beq.n	8007de4 <HAL_RCC_OscConfig+0x530>
 8007e02:	e066      	b.n	8007ed2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e04:	4b35      	ldr	r3, [pc, #212]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a34      	ldr	r2, [pc, #208]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007e10:	4b32      	ldr	r3, [pc, #200]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	4a31      	ldr	r2, [pc, #196]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e16:	f023 0303 	bic.w	r3, r3, #3
 8007e1a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007e1c:	4b2f      	ldr	r3, [pc, #188]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4a2e      	ldr	r2, [pc, #184]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e22:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2c:	f7fa fc80 	bl	8002730 <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e34:	f7fa fc7c 	bl	8002730 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e046      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e46:	4b25      	ldr	r3, [pc, #148]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1f0      	bne.n	8007e34 <HAL_RCC_OscConfig+0x580>
 8007e52:	e03e      	b.n	8007ed2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e039      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007e60:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <HAL_RCC_OscConfig+0x628>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f003 0203 	and.w	r2, r3, #3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d12c      	bne.n	8007ece <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d123      	bne.n	8007ece <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d11b      	bne.n	8007ece <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d113      	bne.n	8007ece <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	085b      	lsrs	r3, r3, #1
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d109      	bne.n	8007ece <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec4:	085b      	lsrs	r3, r3, #1
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d001      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40021000 	.word	0x40021000
 8007ee0:	019f800c 	.word	0x019f800c

08007ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e11e      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007efc:	4b91      	ldr	r3, [pc, #580]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d910      	bls.n	8007f2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f0a:	4b8e      	ldr	r3, [pc, #568]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f023 020f 	bic.w	r2, r3, #15
 8007f12:	498c      	ldr	r1, [pc, #560]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f1a:	4b8a      	ldr	r3, [pc, #552]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d001      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e106      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d073      	beq.n	8008020 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d129      	bne.n	8007f94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f40:	4b81      	ldr	r3, [pc, #516]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e0f4      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007f50:	f000 f972 	bl	8008238 <RCC_GetSysClockFreqFromPLLSource>
 8007f54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4a7c      	ldr	r2, [pc, #496]	; (800814c <HAL_RCC_ClockConfig+0x268>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d93f      	bls.n	8007fde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f5e:	4b7a      	ldr	r3, [pc, #488]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d033      	beq.n	8007fde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d12f      	bne.n	8007fde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f7e:	4b72      	ldr	r3, [pc, #456]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f86:	4a70      	ldr	r2, [pc, #448]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007f8e:	2380      	movs	r3, #128	; 0x80
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e024      	b.n	8007fde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d107      	bne.n	8007fac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f9c:	4b6a      	ldr	r3, [pc, #424]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0c6      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fac:	4b66      	ldr	r3, [pc, #408]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e0be      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007fbc:	f000 f8ce 	bl	800815c <HAL_RCC_GetSysClockFreq>
 8007fc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4a61      	ldr	r2, [pc, #388]	; (800814c <HAL_RCC_ClockConfig+0x268>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d909      	bls.n	8007fde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007fca:	4b5f      	ldr	r3, [pc, #380]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fd2:	4a5d      	ldr	r2, [pc, #372]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007fda:	2380      	movs	r3, #128	; 0x80
 8007fdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fde:	4b5a      	ldr	r3, [pc, #360]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f023 0203 	bic.w	r2, r3, #3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4957      	ldr	r1, [pc, #348]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff0:	f7fa fb9e 	bl	8002730 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff6:	e00a      	b.n	800800e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff8:	f7fa fb9a 	bl	8002730 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	4293      	cmp	r3, r2
 8008008:	d901      	bls.n	800800e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e095      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800800e:	4b4e      	ldr	r3, [pc, #312]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 020c 	and.w	r2, r3, #12
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	429a      	cmp	r2, r3
 800801e:	d1eb      	bne.n	8007ff8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d023      	beq.n	8008074 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008038:	4b43      	ldr	r3, [pc, #268]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	4a42      	ldr	r2, [pc, #264]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 800803e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008042:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0308 	and.w	r3, r3, #8
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008050:	4b3d      	ldr	r3, [pc, #244]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008058:	4a3b      	ldr	r2, [pc, #236]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 800805a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800805e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008060:	4b39      	ldr	r3, [pc, #228]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	4936      	ldr	r1, [pc, #216]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
 8008072:	e008      	b.n	8008086 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2b80      	cmp	r3, #128	; 0x80
 8008078:	d105      	bne.n	8008086 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800807a:	4b33      	ldr	r3, [pc, #204]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	4a32      	ldr	r2, [pc, #200]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8008080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008084:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008086:	4b2f      	ldr	r3, [pc, #188]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	d21d      	bcs.n	80080d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008094:	4b2b      	ldr	r3, [pc, #172]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f023 020f 	bic.w	r2, r3, #15
 800809c:	4929      	ldr	r1, [pc, #164]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80080a4:	f7fa fb44 	bl	8002730 <HAL_GetTick>
 80080a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080aa:	e00a      	b.n	80080c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ac:	f7fa fb40 	bl	8002730 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e03b      	b.n	800813a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c2:	4b20      	ldr	r3, [pc, #128]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d1ed      	bne.n	80080ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	4917      	ldr	r1, [pc, #92]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0308 	and.w	r3, r3, #8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080fa:	4b13      	ldr	r3, [pc, #76]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	490f      	ldr	r1, [pc, #60]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 800810a:	4313      	orrs	r3, r2
 800810c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800810e:	f000 f825 	bl	800815c <HAL_RCC_GetSysClockFreq>
 8008112:	4602      	mov	r2, r0
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <HAL_RCC_ClockConfig+0x264>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	091b      	lsrs	r3, r3, #4
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	490c      	ldr	r1, [pc, #48]	; (8008150 <HAL_RCC_ClockConfig+0x26c>)
 8008120:	5ccb      	ldrb	r3, [r1, r3]
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	fa22 f303 	lsr.w	r3, r2, r3
 800812a:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <HAL_RCC_ClockConfig+0x270>)
 800812c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800812e:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <HAL_RCC_ClockConfig+0x274>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f7fa fab0 	bl	8002698 <HAL_InitTick>
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40022000 	.word	0x40022000
 8008148:	40021000 	.word	0x40021000
 800814c:	04c4b400 	.word	0x04c4b400
 8008150:	0800dba8 	.word	0x0800dba8
 8008154:	20000000 	.word	0x20000000
 8008158:	20000004 	.word	0x20000004

0800815c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800815c:	b480      	push	{r7}
 800815e:	b087      	sub	sp, #28
 8008160:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008162:	4b2c      	ldr	r3, [pc, #176]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 030c 	and.w	r3, r3, #12
 800816a:	2b04      	cmp	r3, #4
 800816c:	d102      	bne.n	8008174 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800816e:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	e047      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008174:	4b27      	ldr	r3, [pc, #156]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 030c 	and.w	r3, r3, #12
 800817c:	2b08      	cmp	r3, #8
 800817e:	d102      	bne.n	8008186 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008180:	4b26      	ldr	r3, [pc, #152]	; (800821c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008182:	613b      	str	r3, [r7, #16]
 8008184:	e03e      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008186:	4b23      	ldr	r3, [pc, #140]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 030c 	and.w	r3, r3, #12
 800818e:	2b0c      	cmp	r3, #12
 8008190:	d136      	bne.n	8008200 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008192:	4b20      	ldr	r3, [pc, #128]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800819c:	4b1d      	ldr	r3, [pc, #116]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	091b      	lsrs	r3, r3, #4
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	3301      	adds	r3, #1
 80081a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d10c      	bne.n	80081ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081b0:	4a1a      	ldr	r2, [pc, #104]	; (800821c <HAL_RCC_GetSysClockFreq+0xc0>)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	4a16      	ldr	r2, [pc, #88]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081ba:	68d2      	ldr	r2, [r2, #12]
 80081bc:	0a12      	lsrs	r2, r2, #8
 80081be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	617b      	str	r3, [r7, #20]
      break;
 80081c8:	e00c      	b.n	80081e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081ca:	4a13      	ldr	r2, [pc, #76]	; (8008218 <HAL_RCC_GetSysClockFreq+0xbc>)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d2:	4a10      	ldr	r2, [pc, #64]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081d4:	68d2      	ldr	r2, [r2, #12]
 80081d6:	0a12      	lsrs	r2, r2, #8
 80081d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081dc:	fb02 f303 	mul.w	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]
      break;
 80081e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081e4:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	3301      	adds	r3, #1
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fc:	613b      	str	r3, [r7, #16]
 80081fe:	e001      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008204:	693b      	ldr	r3, [r7, #16]
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40021000 	.word	0x40021000
 8008218:	00f42400 	.word	0x00f42400
 800821c:	016e3600 	.word	0x016e3600

08008220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008224:	4b03      	ldr	r3, [pc, #12]	; (8008234 <HAL_RCC_GetHCLKFreq+0x14>)
 8008226:	681b      	ldr	r3, [r3, #0]
}
 8008228:	4618      	mov	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20000000 	.word	0x20000000

08008238 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800823e:	4b1e      	ldr	r3, [pc, #120]	; (80082b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008248:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	091b      	lsrs	r3, r3, #4
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	3301      	adds	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2b03      	cmp	r3, #3
 800825a:	d10c      	bne.n	8008276 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800825c:	4a17      	ldr	r2, [pc, #92]	; (80082bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
 8008264:	4a14      	ldr	r2, [pc, #80]	; (80082b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008266:	68d2      	ldr	r2, [r2, #12]
 8008268:	0a12      	lsrs	r2, r2, #8
 800826a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800826e:	fb02 f303 	mul.w	r3, r2, r3
 8008272:	617b      	str	r3, [r7, #20]
    break;
 8008274:	e00c      	b.n	8008290 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008276:	4a12      	ldr	r2, [pc, #72]	; (80082c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	fbb2 f3f3 	udiv	r3, r2, r3
 800827e:	4a0e      	ldr	r2, [pc, #56]	; (80082b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008280:	68d2      	ldr	r2, [r2, #12]
 8008282:	0a12      	lsrs	r2, r2, #8
 8008284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008288:	fb02 f303 	mul.w	r3, r2, r3
 800828c:	617b      	str	r3, [r7, #20]
    break;
 800828e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	0e5b      	lsrs	r3, r3, #25
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	3301      	adds	r3, #1
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80082aa:	687b      	ldr	r3, [r7, #4]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40021000 	.word	0x40021000
 80082bc:	016e3600 	.word	0x016e3600
 80082c0:	00f42400 	.word	0x00f42400

080082c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082cc:	2300      	movs	r3, #0
 80082ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082d0:	2300      	movs	r3, #0
 80082d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8098 	beq.w	8008412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082e2:	2300      	movs	r3, #0
 80082e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082e6:	4b43      	ldr	r3, [pc, #268]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10d      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082f2:	4b40      	ldr	r3, [pc, #256]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f6:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082fc:	6593      	str	r3, [r2, #88]	; 0x58
 80082fe:	4b3d      	ldr	r3, [pc, #244]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800830a:	2301      	movs	r3, #1
 800830c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800830e:	4b3a      	ldr	r3, [pc, #232]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a39      	ldr	r2, [pc, #228]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800831a:	f7fa fa09 	bl	8002730 <HAL_GetTick>
 800831e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008320:	e009      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008322:	f7fa fa05 	bl	8002730 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d902      	bls.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	74fb      	strb	r3, [r7, #19]
        break;
 8008334:	e005      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008336:	4b30      	ldr	r3, [pc, #192]	; (80083f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0ef      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008342:	7cfb      	ldrb	r3, [r7, #19]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d159      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008348:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008352:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d01e      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	429a      	cmp	r2, r3
 8008362:	d019      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008364:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008370:	4b20      	ldr	r3, [pc, #128]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008376:	4a1f      	ldr	r2, [pc, #124]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800837c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008380:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008386:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800838c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008390:	4a18      	ldr	r2, [pc, #96]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d016      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a2:	f7fa f9c5 	bl	8002730 <HAL_GetTick>
 80083a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083a8:	e00b      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083aa:	f7fa f9c1 	bl	8002730 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d902      	bls.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	74fb      	strb	r3, [r7, #19]
            break;
 80083c0:	e006      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0ec      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80083d0:	7cfb      	ldrb	r3, [r7, #19]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10b      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083d6:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	4903      	ldr	r1, [pc, #12]	; (80083f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083ec:	e008      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083ee:	7cfb      	ldrb	r3, [r7, #19]
 80083f0:	74bb      	strb	r3, [r7, #18]
 80083f2:	e005      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083f4:	40021000 	.word	0x40021000
 80083f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	7cfb      	ldrb	r3, [r7, #19]
 80083fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008400:	7c7b      	ldrb	r3, [r7, #17]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d105      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008406:	4ba6      	ldr	r3, [pc, #664]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	4aa5      	ldr	r2, [pc, #660]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800840c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800841e:	4ba0      	ldr	r3, [pc, #640]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008424:	f023 0203 	bic.w	r2, r3, #3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	499c      	ldr	r1, [pc, #624]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008440:	4b97      	ldr	r3, [pc, #604]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008446:	f023 020c 	bic.w	r2, r3, #12
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	4994      	ldr	r1, [pc, #592]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008450:	4313      	orrs	r3, r2
 8008452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008462:	4b8f      	ldr	r3, [pc, #572]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	498b      	ldr	r1, [pc, #556]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008484:	4b86      	ldr	r3, [pc, #536]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	4983      	ldr	r1, [pc, #524]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008494:	4313      	orrs	r3, r2
 8008496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084a6:	4b7e      	ldr	r3, [pc, #504]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	497a      	ldr	r1, [pc, #488]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084c8:	4b75      	ldr	r3, [pc, #468]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	4972      	ldr	r1, [pc, #456]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084ea:	4b6d      	ldr	r3, [pc, #436]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	4969      	ldr	r1, [pc, #420]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800850c:	4b64      	ldr	r3, [pc, #400]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	4961      	ldr	r1, [pc, #388]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800852e:	4b5c      	ldr	r3, [pc, #368]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	4958      	ldr	r1, [pc, #352]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800854c:	2b00      	cmp	r3, #0
 800854e:	d015      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008550:	4b53      	ldr	r3, [pc, #332]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	4950      	ldr	r1, [pc, #320]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800856e:	d105      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008570:	4b4b      	ldr	r3, [pc, #300]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4a4a      	ldr	r2, [pc, #296]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800857a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008584:	2b00      	cmp	r3, #0
 8008586:	d015      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008588:	4b45      	ldr	r3, [pc, #276]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800858a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4942      	ldr	r1, [pc, #264]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008598:	4313      	orrs	r3, r2
 800859a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a6:	d105      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085a8:	4b3d      	ldr	r3, [pc, #244]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4a3c      	ldr	r2, [pc, #240]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d015      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085c0:	4b37      	ldr	r3, [pc, #220]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	4934      	ldr	r1, [pc, #208]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085de:	d105      	bne.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085e0:	4b2f      	ldr	r3, [pc, #188]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	4a2e      	ldr	r2, [pc, #184]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d015      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085f8:	4b29      	ldr	r3, [pc, #164]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008606:	4926      	ldr	r1, [pc, #152]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008608:	4313      	orrs	r3, r2
 800860a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008616:	d105      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008618:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	4a20      	ldr	r2, [pc, #128]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800861e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008622:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d015      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008630:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863e:	4918      	ldr	r1, [pc, #96]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008640:	4313      	orrs	r3, r2
 8008642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864e:	d105      	bne.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008650:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800865a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d015      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008668:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008676:	490a      	ldr	r1, [pc, #40]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008678:	4313      	orrs	r3, r2
 800867a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008686:	d105      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008688:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	4a04      	ldr	r2, [pc, #16]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800868e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008692:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008694:	7cbb      	ldrb	r3, [r7, #18]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40021000 	.word	0x40021000

080086a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e049      	b.n	800874a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f9 fc92 	bl	8001ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f000 fa48 	bl	8008b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b01      	cmp	r3, #1
 8008766:	d001      	beq.n	800876c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e04a      	b.n	8008802 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0201 	orr.w	r2, r2, #1
 8008782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a21      	ldr	r2, [pc, #132]	; (8008810 <HAL_TIM_Base_Start_IT+0xbc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d018      	beq.n	80087c0 <HAL_TIM_Base_Start_IT+0x6c>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d013      	beq.n	80087c0 <HAL_TIM_Base_Start_IT+0x6c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <HAL_TIM_Base_Start_IT+0xc0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00e      	beq.n	80087c0 <HAL_TIM_Base_Start_IT+0x6c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a1c      	ldr	r2, [pc, #112]	; (8008818 <HAL_TIM_Base_Start_IT+0xc4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d009      	beq.n	80087c0 <HAL_TIM_Base_Start_IT+0x6c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <HAL_TIM_Base_Start_IT+0xc8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d004      	beq.n	80087c0 <HAL_TIM_Base_Start_IT+0x6c>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a19      	ldr	r2, [pc, #100]	; (8008820 <HAL_TIM_Base_Start_IT+0xcc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d115      	bne.n	80087ec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	4b17      	ldr	r3, [pc, #92]	; (8008824 <HAL_TIM_Base_Start_IT+0xd0>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b06      	cmp	r3, #6
 80087d0:	d015      	beq.n	80087fe <HAL_TIM_Base_Start_IT+0xaa>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d011      	beq.n	80087fe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0201 	orr.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ea:	e008      	b.n	80087fe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	e000      	b.n	8008800 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	40012c00 	.word	0x40012c00
 8008814:	40000400 	.word	0x40000400
 8008818:	40000800 	.word	0x40000800
 800881c:	40013400 	.word	0x40013400
 8008820:	40014000 	.word	0x40014000
 8008824:	00010007 	.word	0x00010007

08008828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b02      	cmp	r3, #2
 800883c:	d122      	bne.n	8008884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b02      	cmp	r3, #2
 800884a:	d11b      	bne.n	8008884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0202 	mvn.w	r2, #2
 8008854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f965 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f957 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f968 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b04      	cmp	r3, #4
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b04      	cmp	r3, #4
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0204 	mvn.w	r2, #4
 80088a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2202      	movs	r2, #2
 80088ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f93b 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f92d 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f93e 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0208 	mvn.w	r2, #8
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2204      	movs	r2, #4
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f911 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f903 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f914 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b10      	cmp	r3, #16
 8008938:	d122      	bne.n	8008980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b10      	cmp	r3, #16
 8008946:	d11b      	bne.n	8008980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0210 	mvn.w	r2, #16
 8008950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2208      	movs	r2, #8
 8008956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8e7 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 800896c:	e005      	b.n	800897a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f8d9 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f8ea 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b01      	cmp	r3, #1
 800898c:	d10e      	bne.n	80089ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b01      	cmp	r3, #1
 800899a:	d107      	bne.n	80089ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0201 	mvn.w	r2, #1
 80089a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7f9 f940 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b80      	cmp	r3, #128	; 0x80
 80089b8:	d10e      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c4:	2b80      	cmp	r3, #128	; 0x80
 80089c6:	d107      	bne.n	80089d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f96a 	bl	8008cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089e6:	d10e      	bne.n	8008a06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f2:	2b80      	cmp	r3, #128	; 0x80
 80089f4:	d107      	bne.n	8008a06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80089fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f95d 	bl	8008cc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a10:	2b40      	cmp	r3, #64	; 0x40
 8008a12:	d10e      	bne.n	8008a32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	d107      	bne.n	8008a32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f898 	bl	8008b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d10e      	bne.n	8008a5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d107      	bne.n	8008a5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f06f 0220 	mvn.w	r2, #32
 8008a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f91d 	bl	8008c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a6c:	d10f      	bne.n	8008a8e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a7c:	d107      	bne.n	8008a8e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f923 	bl	8008cd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a9c:	d10f      	bne.n	8008abe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aac:	d107      	bne.n	8008abe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f915 	bl	8008ce8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008acc:	d10f      	bne.n	8008aee <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008adc:	d107      	bne.n	8008aee <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f907 	bl	8008cfc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008afc:	d10f      	bne.n	8008b1e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b0c:	d107      	bne.n	8008b1e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8f9 	bl	8008d10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a3c      	ldr	r2, [pc, #240]	; (8008c7c <TIM_Base_SetConfig+0x104>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00f      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b96:	d00b      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a39      	ldr	r2, [pc, #228]	; (8008c80 <TIM_Base_SetConfig+0x108>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d007      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a38      	ldr	r2, [pc, #224]	; (8008c84 <TIM_Base_SetConfig+0x10c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a37      	ldr	r2, [pc, #220]	; (8008c88 <TIM_Base_SetConfig+0x110>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d108      	bne.n	8008bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2d      	ldr	r2, [pc, #180]	; (8008c7c <TIM_Base_SetConfig+0x104>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01b      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd0:	d017      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2a      	ldr	r2, [pc, #168]	; (8008c80 <TIM_Base_SetConfig+0x108>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a29      	ldr	r2, [pc, #164]	; (8008c84 <TIM_Base_SetConfig+0x10c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00f      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a28      	ldr	r2, [pc, #160]	; (8008c88 <TIM_Base_SetConfig+0x110>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a27      	ldr	r2, [pc, #156]	; (8008c8c <TIM_Base_SetConfig+0x114>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a26      	ldr	r2, [pc, #152]	; (8008c90 <TIM_Base_SetConfig+0x118>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a25      	ldr	r2, [pc, #148]	; (8008c94 <TIM_Base_SetConfig+0x11c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d108      	bne.n	8008c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a10      	ldr	r2, [pc, #64]	; (8008c7c <TIM_Base_SetConfig+0x104>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00f      	beq.n	8008c60 <TIM_Base_SetConfig+0xe8>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <TIM_Base_SetConfig+0x110>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_Base_SetConfig+0xe8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a10      	ldr	r2, [pc, #64]	; (8008c8c <TIM_Base_SetConfig+0x114>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_Base_SetConfig+0xe8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a0f      	ldr	r2, [pc, #60]	; (8008c90 <TIM_Base_SetConfig+0x118>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_Base_SetConfig+0xe8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a0e      	ldr	r2, [pc, #56]	; (8008c94 <TIM_Base_SetConfig+0x11c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d103      	bne.n	8008c68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	615a      	str	r2, [r3, #20]
}
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	40012c00 	.word	0x40012c00
 8008c80:	40000400 	.word	0x40000400
 8008c84:	40000800 	.word	0x40000800
 8008c88:	40013400 	.word	0x40013400
 8008c8c:	40014000 	.word	0x40014000
 8008c90:	40014400 	.word	0x40014400
 8008c94:	40014800 	.word	0x40014800

08008c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d34:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008d38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008d5a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008d5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	43db      	mvns	r3, r3
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	4013      	ands	r3, r2
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008d88:	b084      	sub	sp, #16
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	f107 0014 	add.w	r0, r7, #20
 8008d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	b004      	add	sp, #16
 8008dc8:	4770      	bx	lr
	...

08008dcc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b09d      	sub	sp, #116	; 0x74
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	78db      	ldrb	r3, [r3, #3]
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d81f      	bhi.n	8008e3e <USB_ActivateEndpoint+0x72>
 8008dfe:	a201      	add	r2, pc, #4	; (adr r2, 8008e04 <USB_ActivateEndpoint+0x38>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e15 	.word	0x08008e15
 8008e08:	08008e31 	.word	0x08008e31
 8008e0c:	08008e47 	.word	0x08008e47
 8008e10:	08008e23 	.word	0x08008e23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008e14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e20:	e012      	b.n	8008e48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e2a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e2e:	e00b      	b.n	8008e48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008e30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e3c:	e004      	b.n	8008e48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008e44:	e000      	b.n	8008e48 <USB_ActivateEndpoint+0x7c>
      break;
 8008e46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	441a      	add	r2, r3
 8008e52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	b21b      	sxth	r3, r3
 8008e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e82:	b21a      	sxth	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	b21b      	sxth	r3, r3
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	b21b      	sxth	r3, r3
 8008e8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	441a      	add	r2, r3
 8008e9c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	7b1b      	ldrb	r3, [r3, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f040 8149 	bne.w	8009150 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 8084 	beq.w	8008fd0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	4413      	add	r3, r2
 8008eda:	61bb      	str	r3, [r7, #24]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	00da      	lsls	r2, r3, #3
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eea:	617b      	str	r3, [r7, #20]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	88db      	ldrh	r3, [r3, #6]
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	827b      	strh	r3, [r7, #18]
 8008f0a:	8a7b      	ldrh	r3, [r7, #18]
 8008f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d01b      	beq.n	8008f4c <USB_ActivateEndpoint+0x180>
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2a:	823b      	strh	r3, [r7, #16]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	8a3b      	ldrh	r3, [r7, #16]
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	78db      	ldrb	r3, [r3, #3]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d020      	beq.n	8008f96 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6a:	81bb      	strh	r3, [r7, #12]
 8008f6c:	89bb      	ldrh	r3, [r7, #12]
 8008f6e:	f083 0320 	eor.w	r3, r3, #32
 8008f72:	81bb      	strh	r3, [r7, #12]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	441a      	add	r2, r3
 8008f7e:	89bb      	ldrh	r3, [r7, #12]
 8008f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	8013      	strh	r3, [r2, #0]
 8008f94:	e2a6      	b.n	80094e4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fac:	81fb      	strh	r3, [r7, #14]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	441a      	add	r2, r3
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	8013      	strh	r3, [r2, #0]
 8008fce:	e289      	b.n	80094e4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	633b      	str	r3, [r7, #48]	; 0x30
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	4413      	add	r3, r2
 8008fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	00da      	lsls	r2, r3, #3
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	4413      	add	r3, r2
 8008fee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	88db      	ldrh	r3, [r3, #6]
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	62bb      	str	r3, [r7, #40]	; 0x28
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800900e:	b29b      	uxth	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	4413      	add	r3, r2
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	00da      	lsls	r2, r3, #3
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	4413      	add	r3, r2
 8009022:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009026:	627b      	str	r3, [r7, #36]	; 0x24
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	2b3e      	cmp	r3, #62	; 0x3e
 800902e:	d918      	bls.n	8009062 <USB_ActivateEndpoint+0x296>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	66bb      	str	r3, [r7, #104]	; 0x68
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 031f 	and.w	r3, r3, #31
 8009040:	2b00      	cmp	r3, #0
 8009042:	d102      	bne.n	800904a <USB_ActivateEndpoint+0x27e>
 8009044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009046:	3b01      	subs	r3, #1
 8009048:	66bb      	str	r3, [r7, #104]	; 0x68
 800904a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800904c:	b29b      	uxth	r3, r3
 800904e:	029b      	lsls	r3, r3, #10
 8009050:	b29b      	uxth	r3, r3
 8009052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905a:	b29a      	uxth	r2, r3
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	e029      	b.n	80090b6 <USB_ActivateEndpoint+0x2ea>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d112      	bne.n	8009090 <USB_ActivateEndpoint+0x2c4>
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009074:	b29a      	uxth	r2, r3
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009088:	b29a      	uxth	r2, r3
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	e012      	b.n	80090b6 <USB_ActivateEndpoint+0x2ea>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	085b      	lsrs	r3, r3, #1
 8009096:	66bb      	str	r3, [r7, #104]	; 0x68
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <USB_ActivateEndpoint+0x2de>
 80090a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090a6:	3301      	adds	r3, #1
 80090a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80090aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	029b      	lsls	r3, r3, #10
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80090c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01b      	beq.n	8009106 <USB_ActivateEndpoint+0x33a>
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e4:	843b      	strh	r3, [r7, #32]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	441a      	add	r2, r3
 80090f0:	8c3b      	ldrh	r3, [r7, #32]
 80090f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009102:	b29b      	uxth	r3, r3
 8009104:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911c:	83fb      	strh	r3, [r7, #30]
 800911e:	8bfb      	ldrh	r3, [r7, #30]
 8009120:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009124:	83fb      	strh	r3, [r7, #30]
 8009126:	8bfb      	ldrh	r3, [r7, #30]
 8009128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800912c:	83fb      	strh	r3, [r7, #30]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	441a      	add	r2, r3
 8009138:	8bfb      	ldrh	r3, [r7, #30]
 800913a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800913e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914a:	b29b      	uxth	r3, r3
 800914c:	8013      	strh	r3, [r2, #0]
 800914e:	e1c9      	b.n	80094e4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	78db      	ldrb	r3, [r3, #3]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d11e      	bne.n	8009196 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	441a      	add	r2, r3
 800917c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009188:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800918c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009190:	b29b      	uxth	r3, r3
 8009192:	8013      	strh	r3, [r2, #0]
 8009194:	e01d      	b.n	80091d2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	441a      	add	r2, r3
 80091ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80091be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091dc:	b29b      	uxth	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e2:	4413      	add	r3, r2
 80091e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	00da      	lsls	r2, r3, #3
 80091ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	891b      	ldrh	r3, [r3, #8]
 80091fa:	085b      	lsrs	r3, r3, #1
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	b29a      	uxth	r2, r3
 8009202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	657b      	str	r3, [r7, #84]	; 0x54
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009210:	b29b      	uxth	r3, r3
 8009212:	461a      	mov	r2, r3
 8009214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009216:	4413      	add	r3, r2
 8009218:	657b      	str	r3, [r7, #84]	; 0x54
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	00da      	lsls	r2, r3, #3
 8009220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009222:	4413      	add	r3, r2
 8009224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009228:	653b      	str	r3, [r7, #80]	; 0x50
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	895b      	ldrh	r3, [r3, #10]
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	b29b      	uxth	r3, r3
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009238:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f040 8093 	bne.w	800936a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009254:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01b      	beq.n	8009298 <USB_ActivateEndpoint+0x4cc>
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009276:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	441a      	add	r2, r3
 8009282:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800928c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009294:	b29b      	uxth	r3, r3
 8009296:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80092a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80092a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01b      	beq.n	80092e8 <USB_ActivateEndpoint+0x51c>
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8009300:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009306:	873b      	strh	r3, [r7, #56]	; 0x38
 8009308:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800930a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800930e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	441a      	add	r2, r3
 800931a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800931c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800932c:	b29b      	uxth	r3, r3
 800932e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	b29b      	uxth	r3, r3
 800933e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009346:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	441a      	add	r2, r3
 8009352:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800935c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009364:	b29b      	uxth	r3, r3
 8009366:	8013      	strh	r3, [r2, #0]
 8009368:	e0bc      	b.n	80094e4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800937a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800937e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01d      	beq.n	80093c2 <USB_ActivateEndpoint+0x5f6>
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29b      	uxth	r3, r3
 8009394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	441a      	add	r2, r3
 80093aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80093ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093be:	b29b      	uxth	r3, r3
 80093c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80093d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80093d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01d      	beq.n	800941a <USB_ActivateEndpoint+0x64e>
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	441a      	add	r2, r3
 8009402:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800940a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800940e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009416:	b29b      	uxth	r3, r3
 8009418:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	78db      	ldrb	r3, [r3, #3]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d024      	beq.n	800946c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	b29b      	uxth	r3, r3
 8009430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009438:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800943c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009440:	f083 0320 	eor.w	r3, r3, #32
 8009444:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	441a      	add	r2, r3
 8009452:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800945a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800945e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009466:	b29b      	uxth	r3, r3
 8009468:	8013      	strh	r3, [r2, #0]
 800946a:	e01d      	b.n	80094a8 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800947e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009482:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	441a      	add	r2, r3
 8009490:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800949c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	441a      	add	r2, r3
 80094cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80094d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80094e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3774      	adds	r7, #116	; 0x74
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b08d      	sub	sp, #52	; 0x34
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	7b1b      	ldrb	r3, [r3, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f040 808e 	bne.w	8009624 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	785b      	ldrb	r3, [r3, #1]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d044      	beq.n	800959a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	81bb      	strh	r3, [r7, #12]
 800951e:	89bb      	ldrh	r3, [r7, #12]
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01b      	beq.n	8009560 <USB_DeactivateEndpoint+0x6c>
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	817b      	strh	r3, [r7, #10]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	441a      	add	r2, r3
 800954a:	897b      	ldrh	r3, [r7, #10]
 800954c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009558:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800955c:	b29b      	uxth	r3, r3
 800955e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009576:	813b      	strh	r3, [r7, #8]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	441a      	add	r2, r3
 8009582:	893b      	ldrh	r3, [r7, #8]
 8009584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800958c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009594:	b29b      	uxth	r3, r3
 8009596:	8013      	strh	r3, [r2, #0]
 8009598:	e192      	b.n	80098c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	827b      	strh	r3, [r7, #18]
 80095a8:	8a7b      	ldrh	r3, [r7, #18]
 80095aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01b      	beq.n	80095ea <USB_DeactivateEndpoint+0xf6>
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c8:	823b      	strh	r3, [r7, #16]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	441a      	add	r2, r3
 80095d4:	8a3b      	ldrh	r3, [r7, #16]
 80095d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009600:	81fb      	strh	r3, [r7, #14]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	441a      	add	r2, r3
 800960c:	89fb      	ldrh	r3, [r7, #14]
 800960e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800961a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961e:	b29b      	uxth	r3, r3
 8009620:	8013      	strh	r3, [r2, #0]
 8009622:	e14d      	b.n	80098c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 80a5 	bne.w	8009778 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	843b      	strh	r3, [r7, #32]
 800963c:	8c3b      	ldrh	r3, [r7, #32]
 800963e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009642:	2b00      	cmp	r3, #0
 8009644:	d01b      	beq.n	800967e <USB_DeactivateEndpoint+0x18a>
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	b29b      	uxth	r3, r3
 8009654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965c:	83fb      	strh	r3, [r7, #30]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	441a      	add	r2, r3
 8009668:	8bfb      	ldrh	r3, [r7, #30]
 800966a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800966e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800967a:	b29b      	uxth	r3, r3
 800967c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	83bb      	strh	r3, [r7, #28]
 800968c:	8bbb      	ldrh	r3, [r7, #28]
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01b      	beq.n	80096ce <USB_DeactivateEndpoint+0x1da>
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ac:	837b      	strh	r3, [r7, #26]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	441a      	add	r2, r3
 80096b8:	8b7b      	ldrh	r3, [r7, #26]
 80096ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e4:	833b      	strh	r3, [r7, #24]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	8b3b      	ldrh	r3, [r7, #24]
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	82fb      	strh	r3, [r7, #22]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	441a      	add	r2, r3
 8009728:	8afb      	ldrh	r3, [r7, #22]
 800972a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800972e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973a:	b29b      	uxth	r3, r3
 800973c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	b29b      	uxth	r3, r3
 800974c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009754:	82bb      	strh	r3, [r7, #20]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	441a      	add	r2, r3
 8009760:	8abb      	ldrh	r3, [r7, #20]
 8009762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800976a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800976e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009772:	b29b      	uxth	r3, r3
 8009774:	8013      	strh	r3, [r2, #0]
 8009776:	e0a3      	b.n	80098c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01b      	beq.n	80097c8 <USB_DeactivateEndpoint+0x2d4>
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	441a      	add	r2, r3
 80097b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80097b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80097d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80097d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01b      	beq.n	8009818 <USB_DeactivateEndpoint+0x324>
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	441a      	add	r2, r3
 8009802:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800980c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009814:	b29b      	uxth	r3, r3
 8009816:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	b29b      	uxth	r3, r3
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	441a      	add	r2, r3
 800983a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800983c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984c:	b29b      	uxth	r3, r3
 800984e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009866:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	441a      	add	r2, r3
 8009872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800987c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009884:	b29b      	uxth	r3, r3
 8009886:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	847b      	strh	r3, [r7, #34]	; 0x22
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	441a      	add	r2, r3
 80098aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098bc:	b29b      	uxth	r3, r3
 80098be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3734      	adds	r7, #52	; 0x34
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b0c2      	sub	sp, #264	; 0x108
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098dc:	6018      	str	r0, [r3, #0]
 80098de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	f040 867b 	bne.w	800a5f0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80098fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	429a      	cmp	r2, r3
 8009914:	d908      	bls.n	8009928 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009926:	e007      	b.n	8009938 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	7b1b      	ldrb	r3, [r3, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d13a      	bne.n	80099be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6959      	ldr	r1, [r3, #20]
 8009954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	88da      	ldrh	r2, [r3, #6]
 8009960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009964:	b29b      	uxth	r3, r3
 8009966:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800996a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800996e:	6800      	ldr	r0, [r0, #0]
 8009970:	f001 fc1d 	bl	800b1ae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800998e:	b29b      	uxth	r3, r3
 8009990:	461a      	mov	r2, r3
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	4413      	add	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	00da      	lsls	r2, r3, #3
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	4413      	add	r3, r2
 80099aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	f000 bde3 	b.w	800a584 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	78db      	ldrb	r3, [r3, #3]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	f040 843a 	bne.w	800a244 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80099d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	f240 83b7 	bls.w	800a15c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	441a      	add	r2, r3
 8009a32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6a1a      	ldr	r2, [r3, #32]
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 81b3 	beq.w	8009df6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d16d      	bne.n	8009b88 <USB_EPStartXfer+0x2ba>
 8009aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	4413      	add	r3, r2
 8009ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	00da      	lsls	r2, r3, #3
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aec:	2b3e      	cmp	r3, #62	; 0x3e
 8009aee:	d91c      	bls.n	8009b2a <USB_EPStartXfer+0x25c>
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afe:	f003 031f 	and.w	r3, r3, #31
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <USB_EPStartXfer+0x242>
 8009b06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	029b      	lsls	r3, r3, #10
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	801a      	strh	r2, [r3, #0]
 8009b28:	e053      	b.n	8009bd2 <USB_EPStartXfer+0x304>
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d112      	bne.n	8009b58 <USB_EPStartXfer+0x28a>
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	801a      	strh	r2, [r3, #0]
 8009b56:	e03c      	b.n	8009bd2 <USB_EPStartXfer+0x304>
 8009b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <USB_EPStartXfer+0x2aa>
 8009b6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	029b      	lsls	r3, r3, #10
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	801a      	strh	r2, [r3, #0]
 8009b86:	e024      	b.n	8009bd2 <USB_EPStartXfer+0x304>
 8009b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d11c      	bne.n	8009bd2 <USB_EPStartXfer+0x304>
 8009b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	461a      	mov	r2, r3
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	4413      	add	r3, r2
 8009bae:	633b      	str	r3, [r7, #48]	; 0x30
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	00da      	lsls	r2, r3, #3
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	895b      	ldrh	r3, [r3, #10]
 8009bde:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6959      	ldr	r1, [r3, #20]
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009bf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009bfc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c00:	6800      	ldr	r0, [r0, #0]
 8009c02:	f001 fad4 	bl	800b1ae <USB_WritePMA>
            ep->xfer_buff += len;
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	695a      	ldr	r2, [r3, #20]
 8009c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c16:	441a      	add	r2, r3
 8009c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6a1a      	ldr	r2, [r3, #32]
 8009c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d90f      	bls.n	8009c60 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c50:	1ad2      	subs	r2, r2, r3
 8009c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	621a      	str	r2, [r3, #32]
 8009c5e:	e00e      	b.n	8009c7e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d16d      	bne.n	8009d6a <USB_EPStartXfer+0x49c>
 8009c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	461a      	mov	r2, r3
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	4413      	add	r3, r2
 8009cb0:	61bb      	str	r3, [r7, #24]
 8009cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	00da      	lsls	r2, r3, #3
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cc8:	617b      	str	r3, [r7, #20]
 8009cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cce:	2b3e      	cmp	r3, #62	; 0x3e
 8009cd0:	d91c      	bls.n	8009d0c <USB_EPStartXfer+0x43e>
 8009cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <USB_EPStartXfer+0x424>
 8009ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cec:	3b01      	subs	r3, #1
 8009cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	029b      	lsls	r3, r3, #10
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	801a      	strh	r2, [r3, #0]
 8009d0a:	e059      	b.n	8009dc0 <USB_EPStartXfer+0x4f2>
 8009d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d112      	bne.n	8009d3a <USB_EPStartXfer+0x46c>
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	801a      	strh	r2, [r3, #0]
 8009d38:	e042      	b.n	8009dc0 <USB_EPStartXfer+0x4f2>
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d3e:	085b      	lsrs	r3, r3, #1
 8009d40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d004      	beq.n	8009d5a <USB_EPStartXfer+0x48c>
 8009d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d54:	3301      	adds	r3, #1
 8009d56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	029b      	lsls	r3, r3, #10
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	e02a      	b.n	8009dc0 <USB_EPStartXfer+0x4f2>
 8009d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	785b      	ldrb	r3, [r3, #1]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d122      	bne.n	8009dc0 <USB_EPStartXfer+0x4f2>
 8009d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	623b      	str	r3, [r7, #32]
 8009d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	461a      	mov	r2, r3
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	623b      	str	r3, [r7, #32]
 8009d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	00da      	lsls	r2, r3, #3
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	4413      	add	r3, r2
 8009db0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009db4:	61fb      	str	r3, [r7, #28]
 8009db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	891b      	ldrh	r3, [r3, #8]
 8009dcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6959      	ldr	r1, [r3, #20]
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009de6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009dea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009dee:	6800      	ldr	r0, [r0, #0]
 8009df0:	f001 f9dd 	bl	800b1ae <USB_WritePMA>
 8009df4:	e3c6      	b.n	800a584 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d16d      	bne.n	8009ee2 <USB_EPStartXfer+0x614>
 8009e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	461a      	mov	r2, r3
 8009e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e26:	4413      	add	r3, r2
 8009e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	00da      	lsls	r2, r3, #3
 8009e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e40:	647b      	str	r3, [r7, #68]	; 0x44
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e46:	2b3e      	cmp	r3, #62	; 0x3e
 8009e48:	d91c      	bls.n	8009e84 <USB_EPStartXfer+0x5b6>
 8009e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e58:	f003 031f 	and.w	r3, r3, #31
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d104      	bne.n	8009e6a <USB_EPStartXfer+0x59c>
 8009e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e64:	3b01      	subs	r3, #1
 8009e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	029b      	lsls	r3, r3, #10
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e80:	801a      	strh	r2, [r3, #0]
 8009e82:	e059      	b.n	8009f38 <USB_EPStartXfer+0x66a>
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d112      	bne.n	8009eb2 <USB_EPStartXfer+0x5e4>
 8009e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e9a:	801a      	strh	r2, [r3, #0]
 8009e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eae:	801a      	strh	r2, [r3, #0]
 8009eb0:	e042      	b.n	8009f38 <USB_EPStartXfer+0x66a>
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <USB_EPStartXfer+0x604>
 8009ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	029b      	lsls	r3, r3, #10
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	e02a      	b.n	8009f38 <USB_EPStartXfer+0x66a>
 8009ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	785b      	ldrb	r3, [r3, #1]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d122      	bne.n	8009f38 <USB_EPStartXfer+0x66a>
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	653b      	str	r3, [r7, #80]	; 0x50
 8009efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f12:	4413      	add	r3, r2
 8009f14:	653b      	str	r3, [r7, #80]	; 0x50
 8009f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	00da      	lsls	r2, r3, #3
 8009f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f26:	4413      	add	r3, r2
 8009f28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	891b      	ldrh	r3, [r3, #8]
 8009f44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6959      	ldr	r1, [r3, #20]
 8009f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f66:	6800      	ldr	r0, [r0, #0]
 8009f68:	f001 f921 	bl	800b1ae <USB_WritePMA>
            ep->xfer_buff += len;
 8009f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695a      	ldr	r2, [r3, #20]
 8009f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7c:	441a      	add	r2, r3
 8009f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6a1a      	ldr	r2, [r3, #32]
 8009f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d90f      	bls.n	8009fc6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	621a      	str	r2, [r3, #32]
 8009fc4:	e00e      	b.n	8009fe4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	643b      	str	r3, [r7, #64]	; 0x40
 8009ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	785b      	ldrb	r3, [r3, #1]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d16d      	bne.n	800a0dc <USB_EPStartXfer+0x80e>
 800a000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	4413      	add	r3, r2
 800a022:	63bb      	str	r3, [r7, #56]	; 0x38
 800a024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	00da      	lsls	r2, r3, #3
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	4413      	add	r3, r2
 800a036:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34
 800a03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a040:	2b3e      	cmp	r3, #62	; 0x3e
 800a042:	d91c      	bls.n	800a07e <USB_EPStartXfer+0x7b0>
 800a044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	f003 031f 	and.w	r3, r3, #31
 800a056:	2b00      	cmp	r3, #0
 800a058:	d104      	bne.n	800a064 <USB_EPStartXfer+0x796>
 800a05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a05e:	3b01      	subs	r3, #1
 800a060:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a068:	b29b      	uxth	r3, r3
 800a06a:	029b      	lsls	r3, r3, #10
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a076:	b29a      	uxth	r2, r3
 800a078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07a:	801a      	strh	r2, [r3, #0]
 800a07c:	e053      	b.n	800a126 <USB_EPStartXfer+0x858>
 800a07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a082:	2b00      	cmp	r3, #0
 800a084:	d112      	bne.n	800a0ac <USB_EPStartXfer+0x7de>
 800a086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a090:	b29a      	uxth	r2, r3
 800a092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a094:	801a      	strh	r2, [r3, #0]
 800a096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a8:	801a      	strh	r2, [r3, #0]
 800a0aa:	e03c      	b.n	800a126 <USB_EPStartXfer+0x858>
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b0:	085b      	lsrs	r3, r3, #1
 800a0b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d004      	beq.n	800a0cc <USB_EPStartXfer+0x7fe>
 800a0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	029b      	lsls	r3, r3, #10
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d8:	801a      	strh	r2, [r3, #0]
 800a0da:	e024      	b.n	800a126 <USB_EPStartXfer+0x858>
 800a0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	785b      	ldrb	r3, [r3, #1]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d11c      	bne.n	800a126 <USB_EPStartXfer+0x858>
 800a0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a100:	4413      	add	r3, r2
 800a102:	643b      	str	r3, [r7, #64]	; 0x40
 800a104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	00da      	lsls	r2, r3, #3
 800a112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a114:	4413      	add	r3, r2
 800a116:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a120:	b29a      	uxth	r2, r3
 800a122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	895b      	ldrh	r3, [r3, #10]
 800a132:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6959      	ldr	r1, [r3, #20]
 800a142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a146:	b29b      	uxth	r3, r3
 800a148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a14c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a150:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a154:	6800      	ldr	r0, [r0, #0]
 800a156:	f001 f82a 	bl	800b1ae <USB_WritePMA>
 800a15a:	e213      	b.n	800a584 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a192:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	441a      	add	r2, r3
 800a1b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a1b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e8:	4413      	add	r3, r2
 800a1ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	00da      	lsls	r2, r3, #3
 800a1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a202:	65bb      	str	r3, [r7, #88]	; 0x58
 800a204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a208:	b29a      	uxth	r2, r3
 800a20a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a20c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a20e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	891b      	ldrh	r3, [r3, #8]
 800a21a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6959      	ldr	r1, [r3, #20]
 800a22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a234:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a238:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a23c:	6800      	ldr	r0, [r0, #0]
 800a23e:	f000 ffb6 	bl	800b1ae <USB_WritePMA>
 800a242:	e19f      	b.n	800a584 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6a1a      	ldr	r2, [r3, #32]
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a254:	1ad2      	subs	r2, r2, r3
 800a256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 80bc 	beq.w	800a402 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	673b      	str	r3, [r7, #112]	; 0x70
 800a296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d16d      	bne.n	800a382 <USB_EPStartXfer+0xab4>
 800a2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2c6:	4413      	add	r3, r2
 800a2c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	00da      	lsls	r2, r3, #3
 800a2d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2da:	4413      	add	r3, r2
 800a2dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2e0:	667b      	str	r3, [r7, #100]	; 0x64
 800a2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e6:	2b3e      	cmp	r3, #62	; 0x3e
 800a2e8:	d91c      	bls.n	800a324 <USB_EPStartXfer+0xa56>
 800a2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ee:	095b      	lsrs	r3, r3, #5
 800a2f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f8:	f003 031f 	and.w	r3, r3, #31
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d104      	bne.n	800a30a <USB_EPStartXfer+0xa3c>
 800a300:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a304:	3b01      	subs	r3, #1
 800a306:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a30a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a30e:	b29b      	uxth	r3, r3
 800a310:	029b      	lsls	r3, r3, #10
 800a312:	b29b      	uxth	r3, r3
 800a314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a320:	801a      	strh	r2, [r3, #0]
 800a322:	e053      	b.n	800a3cc <USB_EPStartXfer+0xafe>
 800a324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d112      	bne.n	800a352 <USB_EPStartXfer+0xa84>
 800a32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a336:	b29a      	uxth	r2, r3
 800a338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a33a:	801a      	strh	r2, [r3, #0]
 800a33c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	b29b      	uxth	r3, r3
 800a342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a34e:	801a      	strh	r2, [r3, #0]
 800a350:	e03c      	b.n	800a3cc <USB_EPStartXfer+0xafe>
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a356:	085b      	lsrs	r3, r3, #1
 800a358:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	d004      	beq.n	800a372 <USB_EPStartXfer+0xaa4>
 800a368:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a36c:	3301      	adds	r3, #1
 800a36e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a372:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a376:	b29b      	uxth	r3, r3
 800a378:	029b      	lsls	r3, r3, #10
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a37e:	801a      	strh	r2, [r3, #0]
 800a380:	e024      	b.n	800a3cc <USB_EPStartXfer+0xafe>
 800a382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	785b      	ldrb	r3, [r3, #1]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d11c      	bne.n	800a3cc <USB_EPStartXfer+0xafe>
 800a392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3a6:	4413      	add	r3, r2
 800a3a8:	673b      	str	r3, [r7, #112]	; 0x70
 800a3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	00da      	lsls	r2, r3, #3
 800a3b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	895b      	ldrh	r3, [r3, #10]
 800a3d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6959      	ldr	r1, [r3, #20]
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a3f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a3fa:	6800      	ldr	r0, [r0, #0]
 800a3fc:	f000 fed7 	bl	800b1ae <USB_WritePMA>
 800a400:	e0c0      	b.n	800a584 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d16d      	bne.n	800a4ee <USB_EPStartXfer+0xc20>
 800a412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	461a      	mov	r2, r3
 800a430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a432:	4413      	add	r3, r2
 800a434:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a43a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	00da      	lsls	r2, r3, #3
 800a444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a446:	4413      	add	r3, r2
 800a448:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a44c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a452:	2b3e      	cmp	r3, #62	; 0x3e
 800a454:	d91c      	bls.n	800a490 <USB_EPStartXfer+0xbc2>
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45a:	095b      	lsrs	r3, r3, #5
 800a45c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a464:	f003 031f 	and.w	r3, r3, #31
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d104      	bne.n	800a476 <USB_EPStartXfer+0xba8>
 800a46c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a470:	3b01      	subs	r3, #1
 800a472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a476:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	029b      	lsls	r3, r3, #10
 800a47e:	b29b      	uxth	r3, r3
 800a480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a488:	b29a      	uxth	r2, r3
 800a48a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a48c:	801a      	strh	r2, [r3, #0]
 800a48e:	e05f      	b.n	800a550 <USB_EPStartXfer+0xc82>
 800a490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a494:	2b00      	cmp	r3, #0
 800a496:	d112      	bne.n	800a4be <USB_EPStartXfer+0xbf0>
 800a498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ba:	801a      	strh	r2, [r3, #0]
 800a4bc:	e048      	b.n	800a550 <USB_EPStartXfer+0xc82>
 800a4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <USB_EPStartXfer+0xc10>
 800a4d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4d8:	3301      	adds	r3, #1
 800a4da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a4de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	029b      	lsls	r3, r3, #10
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ea:	801a      	strh	r2, [r3, #0]
 800a4ec:	e030      	b.n	800a550 <USB_EPStartXfer+0xc82>
 800a4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d128      	bne.n	800a550 <USB_EPStartXfer+0xc82>
 800a4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a522:	4413      	add	r3, r2
 800a524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	00da      	lsls	r2, r3, #3
 800a536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a53a:	4413      	add	r3, r2
 800a53c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a548:	b29a      	uxth	r2, r3
 800a54a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a54e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	891b      	ldrh	r3, [r3, #8]
 800a55c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6959      	ldr	r1, [r3, #20]
 800a56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a570:	b29b      	uxth	r3, r3
 800a572:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a576:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a57a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a57e:	6800      	ldr	r0, [r0, #0]
 800a580:	f000 fe15 	bl	800b1ae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5aa:	817b      	strh	r3, [r7, #10]
 800a5ac:	897b      	ldrh	r3, [r7, #10]
 800a5ae:	f083 0310 	eor.w	r3, r3, #16
 800a5b2:	817b      	strh	r3, [r7, #10]
 800a5b4:	897b      	ldrh	r3, [r7, #10]
 800a5b6:	f083 0320 	eor.w	r3, r3, #32
 800a5ba:	817b      	strh	r3, [r7, #10]
 800a5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	441a      	add	r2, r3
 800a5d6:	897b      	ldrh	r3, [r7, #10]
 800a5d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	8013      	strh	r3, [r2, #0]
 800a5ec:	f000 bc9f 	b.w	800af2e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	7b1b      	ldrb	r3, [r3, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f040 80ae 	bne.w	800a75e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d917      	bls.n	800a64e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63e:	1ad2      	subs	r2, r2, r3
 800a640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	619a      	str	r2, [r3, #24]
 800a64c:	e00e      	b.n	800a66c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a688:	b29b      	uxth	r3, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a690:	4413      	add	r3, r2
 800a692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	00da      	lsls	r2, r3, #3
 800a6a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a6b8:	d91d      	bls.n	800a6f6 <USB_EPStartXfer+0xe28>
 800a6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c8:	f003 031f 	and.w	r3, r3, #31
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d104      	bne.n	800a6da <USB_EPStartXfer+0xe0c>
 800a6d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	029b      	lsls	r3, r3, #10
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6f2:	801a      	strh	r2, [r3, #0]
 800a6f4:	e3e1      	b.n	800aeba <USB_EPStartXfer+0x15ec>
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d116      	bne.n	800a72c <USB_EPStartXfer+0xe5e>
 800a6fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a710:	801a      	strh	r2, [r3, #0]
 800a712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a71e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a722:	b29a      	uxth	r2, r3
 800a724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	e3c6      	b.n	800aeba <USB_EPStartXfer+0x15ec>
 800a72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a730:	085b      	lsrs	r3, r3, #1
 800a732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <USB_EPStartXfer+0xe7e>
 800a742:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a746:	3301      	adds	r3, #1
 800a748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a74c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a750:	b29b      	uxth	r3, r3
 800a752:	029b      	lsls	r3, r3, #10
 800a754:	b29a      	uxth	r2, r3
 800a756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a75a:	801a      	strh	r2, [r3, #0]
 800a75c:	e3ad      	b.n	800aeba <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	78db      	ldrb	r3, [r3, #3]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	f040 8200 	bne.w	800ab70 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f040 8091 	bne.w	800a8a4 <USB_EPStartXfer+0xfd6>
 800a782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	00da      	lsls	r2, r3, #3
 800a7ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7be:	4413      	add	r3, r2
 800a7c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b3e      	cmp	r3, #62	; 0x3e
 800a7d6:	d925      	bls.n	800a824 <USB_EPStartXfer+0xf56>
 800a7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	095b      	lsrs	r3, r3, #5
 800a7e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	f003 031f 	and.w	r3, r3, #31
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <USB_EPStartXfer+0xf3a>
 800a7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a802:	3b01      	subs	r3, #1
 800a804:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	029b      	lsls	r3, r3, #10
 800a810:	b29b      	uxth	r3, r3
 800a812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a820:	801a      	strh	r2, [r3, #0]
 800a822:	e074      	b.n	800a90e <USB_EPStartXfer+0x1040>
 800a824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d116      	bne.n	800a862 <USB_EPStartXfer+0xf94>
 800a834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a838:	881b      	ldrh	r3, [r3, #0]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a840:	b29a      	uxth	r2, r3
 800a842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a858:	b29a      	uxth	r2, r3
 800a85a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	e055      	b.n	800a90e <USB_EPStartXfer+0x1040>
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <USB_EPStartXfer+0xfc4>
 800a888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a88c:	3301      	adds	r3, #1
 800a88e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a896:	b29b      	uxth	r3, r3
 800a898:	029b      	lsls	r3, r3, #10
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	e034      	b.n	800a90e <USB_EPStartXfer+0x1040>
 800a8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	785b      	ldrb	r3, [r3, #1]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d12c      	bne.n	800a90e <USB_EPStartXfer+0x1040>
 800a8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8d8:	4413      	add	r3, r2
 800a8da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	00da      	lsls	r2, r3, #3
 800a8ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	b29a      	uxth	r2, r3
 800a908:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a90c:	801a      	strh	r2, [r3, #0]
 800a90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	785b      	ldrb	r3, [r3, #1]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f040 8091 	bne.w	800aa50 <USB_EPStartXfer+0x1182>
 800a92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	461a      	mov	r2, r3
 800a94e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a952:	4413      	add	r3, r2
 800a954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	00da      	lsls	r2, r3, #3
 800a966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a96a:	4413      	add	r3, r2
 800a96c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	2b3e      	cmp	r3, #62	; 0x3e
 800a982:	d925      	bls.n	800a9d0 <USB_EPStartXfer+0x1102>
 800a984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	095b      	lsrs	r3, r3, #5
 800a992:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f003 031f 	and.w	r3, r3, #31
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <USB_EPStartXfer+0x10e6>
 800a9aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	029b      	lsls	r3, r3, #10
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9cc:	801a      	strh	r2, [r3, #0]
 800a9ce:	e06d      	b.n	800aaac <USB_EPStartXfer+0x11de>
 800a9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d116      	bne.n	800aa0e <USB_EPStartXfer+0x1140>
 800a9e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa0a:	801a      	strh	r2, [r3, #0]
 800aa0c:	e04e      	b.n	800aaac <USB_EPStartXfer+0x11de>
 800aa0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d004      	beq.n	800aa3e <USB_EPStartXfer+0x1170>
 800aa34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa38:	3301      	adds	r3, #1
 800aa3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	029b      	lsls	r3, r3, #10
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa4c:	801a      	strh	r2, [r3, #0]
 800aa4e:	e02d      	b.n	800aaac <USB_EPStartXfer+0x11de>
 800aa50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	785b      	ldrb	r3, [r3, #1]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d125      	bne.n	800aaac <USB_EPStartXfer+0x11de>
 800aa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa76:	4413      	add	r3, r2
 800aa78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	00da      	lsls	r2, r3, #3
 800aa8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa8e:	4413      	add	r3, r2
 800aa90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aaaa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aaac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 81fe 	beq.w	800aeba <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aabe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aade:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <USB_EPStartXfer+0x1228>
 800aaea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aaee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aaf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800aafa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f040 81db 	bne.w	800aeba <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 81d4 	bne.w	800aeba <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	881b      	ldrh	r3, [r3, #0]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ab3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	441a      	add	r2, r3
 800ab56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ab5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	8013      	strh	r3, [r2, #0]
 800ab6e:	e1a4      	b.n	800aeba <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ab70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	78db      	ldrb	r3, [r3, #3]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	f040 819a 	bne.w	800aeb6 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ab82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	699a      	ldr	r2, [r3, #24]
 800ab8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d917      	bls.n	800abce <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800ab9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800abae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	699a      	ldr	r2, [r3, #24]
 800abba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbe:	1ad2      	subs	r2, r2, r3
 800abc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	619a      	str	r2, [r3, #24]
 800abcc:	e00e      	b.n	800abec <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800abce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800abde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2200      	movs	r2, #0
 800abea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800abec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	785b      	ldrb	r3, [r3, #1]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d178      	bne.n	800acee <USB_EPStartXfer+0x1420>
 800abfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac20:	4413      	add	r3, r2
 800ac22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	00da      	lsls	r2, r3, #3
 800ac34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac38:	4413      	add	r3, r2
 800ac3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac46:	2b3e      	cmp	r3, #62	; 0x3e
 800ac48:	d91d      	bls.n	800ac86 <USB_EPStartXfer+0x13b8>
 800ac4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4e:	095b      	lsrs	r3, r3, #5
 800ac50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	f003 031f 	and.w	r3, r3, #31
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <USB_EPStartXfer+0x139c>
 800ac60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac64:	3b01      	subs	r3, #1
 800ac66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ac6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	029b      	lsls	r3, r3, #10
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac82:	801a      	strh	r2, [r3, #0]
 800ac84:	e064      	b.n	800ad50 <USB_EPStartXfer+0x1482>
 800ac86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d116      	bne.n	800acbc <USB_EPStartXfer+0x13ee>
 800ac8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aca0:	801a      	strh	r2, [r3, #0]
 800aca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acb8:	801a      	strh	r2, [r3, #0]
 800acba:	e049      	b.n	800ad50 <USB_EPStartXfer+0x1482>
 800acbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc0:	085b      	lsrs	r3, r3, #1
 800acc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d004      	beq.n	800acdc <USB_EPStartXfer+0x140e>
 800acd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acd6:	3301      	adds	r3, #1
 800acd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	029b      	lsls	r3, r3, #10
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acea:	801a      	strh	r2, [r3, #0]
 800acec:	e030      	b.n	800ad50 <USB_EPStartXfer+0x1482>
 800acee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	785b      	ldrb	r3, [r3, #1]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d128      	bne.n	800ad50 <USB_EPStartXfer+0x1482>
 800acfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad22:	4413      	add	r3, r2
 800ad24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	00da      	lsls	r2, r3, #3
 800ad36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ad4e:	801a      	strh	r2, [r3, #0]
 800ad50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	785b      	ldrb	r3, [r3, #1]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d178      	bne.n	800ae60 <USB_EPStartXfer+0x1592>
 800ad6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad92:	4413      	add	r3, r2
 800ad94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	00da      	lsls	r2, r3, #3
 800ada6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800adaa:	4413      	add	r3, r2
 800adac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800adb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800adb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb8:	2b3e      	cmp	r3, #62	; 0x3e
 800adba:	d91d      	bls.n	800adf8 <USB_EPStartXfer+0x152a>
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	095b      	lsrs	r3, r3, #5
 800adc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800adc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adca:	f003 031f 	and.w	r3, r3, #31
 800adce:	2b00      	cmp	r3, #0
 800add0:	d104      	bne.n	800addc <USB_EPStartXfer+0x150e>
 800add2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800add6:	3b01      	subs	r3, #1
 800add8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800addc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	029b      	lsls	r3, r3, #10
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adee:	b29a      	uxth	r2, r3
 800adf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800adf4:	801a      	strh	r2, [r3, #0]
 800adf6:	e060      	b.n	800aeba <USB_EPStartXfer+0x15ec>
 800adf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d116      	bne.n	800ae2e <USB_EPStartXfer+0x1560>
 800ae00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae12:	801a      	strh	r2, [r3, #0]
 800ae14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae2a:	801a      	strh	r2, [r3, #0]
 800ae2c:	e045      	b.n	800aeba <USB_EPStartXfer+0x15ec>
 800ae2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d004      	beq.n	800ae4e <USB_EPStartXfer+0x1580>
 800ae44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae48:	3301      	adds	r3, #1
 800ae4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	029b      	lsls	r3, r3, #10
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae5c:	801a      	strh	r2, [r3, #0]
 800ae5e:	e02c      	b.n	800aeba <USB_EPStartXfer+0x15ec>
 800ae60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	785b      	ldrb	r3, [r3, #1]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d124      	bne.n	800aeba <USB_EPStartXfer+0x15ec>
 800ae70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	461a      	mov	r2, r3
 800ae82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae86:	4413      	add	r3, r2
 800ae88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	00da      	lsls	r2, r3, #3
 800ae9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae9e:	4413      	add	r3, r2
 800aea0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aeb2:	801a      	strh	r2, [r3, #0]
 800aeb4:	e001      	b.n	800aeba <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e03a      	b.n	800af30 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aeba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aedc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aee0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aee4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aee8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aeec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aef0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aef8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	441a      	add	r2, r3
 800af16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d020      	beq.n	800af8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af62:	81bb      	strh	r3, [r7, #12]
 800af64:	89bb      	ldrh	r3, [r7, #12]
 800af66:	f083 0310 	eor.w	r3, r3, #16
 800af6a:	81bb      	strh	r3, [r7, #12]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	441a      	add	r2, r3
 800af76:	89bb      	ldrh	r3, [r7, #12]
 800af78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af88:	b29b      	uxth	r3, r3
 800af8a:	8013      	strh	r3, [r2, #0]
 800af8c:	e01f      	b.n	800afce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa4:	81fb      	strh	r3, [r7, #14]
 800afa6:	89fb      	ldrh	r3, [r7, #14]
 800afa8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800afac:	81fb      	strh	r3, [r7, #14]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	441a      	add	r2, r3
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afca:	b29b      	uxth	r3, r3
 800afcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afdc:	b480      	push	{r7}
 800afde:	b087      	sub	sp, #28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	7b1b      	ldrb	r3, [r3, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f040 809d 	bne.w	800b12a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d04c      	beq.n	800b092 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	823b      	strh	r3, [r7, #16]
 800b006:	8a3b      	ldrh	r3, [r7, #16]
 800b008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d01b      	beq.n	800b048 <USB_EPClearStall+0x6c>
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b026:	81fb      	strh	r3, [r7, #14]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	441a      	add	r2, r3
 800b032:	89fb      	ldrh	r3, [r7, #14]
 800b034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b03c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b040:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b044:	b29b      	uxth	r3, r3
 800b046:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	78db      	ldrb	r3, [r3, #3]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d06c      	beq.n	800b12a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b066:	81bb      	strh	r3, [r7, #12]
 800b068:	89bb      	ldrh	r3, [r7, #12]
 800b06a:	f083 0320 	eor.w	r3, r3, #32
 800b06e:	81bb      	strh	r3, [r7, #12]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	441a      	add	r2, r3
 800b07a:	89bb      	ldrh	r3, [r7, #12]
 800b07c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	8013      	strh	r3, [r2, #0]
 800b090:	e04b      	b.n	800b12a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	82fb      	strh	r3, [r7, #22]
 800b0a0:	8afb      	ldrh	r3, [r7, #22]
 800b0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d01b      	beq.n	800b0e2 <USB_EPClearStall+0x106>
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c0:	82bb      	strh	r3, [r7, #20]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	441a      	add	r2, r3
 800b0cc:	8abb      	ldrh	r3, [r7, #20]
 800b0ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f8:	827b      	strh	r3, [r7, #18]
 800b0fa:	8a7b      	ldrh	r3, [r7, #18]
 800b0fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b100:	827b      	strh	r3, [r7, #18]
 800b102:	8a7b      	ldrh	r3, [r7, #18]
 800b104:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b108:	827b      	strh	r3, [r7, #18]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	441a      	add	r2, r3
 800b114:	8a7b      	ldrh	r3, [r7, #18]
 800b116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b11a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b11e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b126:	b29b      	uxth	r3, r3
 800b128:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	371c      	adds	r7, #28
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d103      	bne.n	800b152 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2280      	movs	r2, #128	; 0x80
 800b14e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b16e:	b29b      	uxth	r3, r3
 800b170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3714      	adds	r7, #20
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b08d      	sub	sp, #52	; 0x34
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	460b      	mov	r3, r1
 800b1be:	80fb      	strh	r3, [r7, #6]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b1c4:	88bb      	ldrh	r3, [r7, #4]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	085b      	lsrs	r3, r3, #1
 800b1ca:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1d4:	88fa      	ldrh	r2, [r7, #6]
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e4:	e01b      	b.n	800b21e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	021b      	lsls	r3, r3, #8
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	4313      	orrs	r3, r2
 800b202:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	b29a      	uxth	r2, r3
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	3302      	adds	r3, #2
 800b210:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	3301      	adds	r3, #1
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21a:	3b01      	subs	r3, #1
 800b21c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e0      	bne.n	800b1e6 <USB_WritePMA+0x38>
  }
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop
 800b228:	3734      	adds	r7, #52	; 0x34
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b232:	b480      	push	{r7}
 800b234:	b08b      	sub	sp, #44	; 0x2c
 800b236:	af00      	add	r7, sp, #0
 800b238:	60f8      	str	r0, [r7, #12]
 800b23a:	60b9      	str	r1, [r7, #8]
 800b23c:	4611      	mov	r1, r2
 800b23e:	461a      	mov	r2, r3
 800b240:	460b      	mov	r3, r1
 800b242:	80fb      	strh	r3, [r7, #6]
 800b244:	4613      	mov	r3, r2
 800b246:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b248:	88bb      	ldrh	r3, [r7, #4]
 800b24a:	085b      	lsrs	r3, r3, #1
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b258:	88fa      	ldrh	r2, [r7, #6]
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b262:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	627b      	str	r3, [r7, #36]	; 0x24
 800b268:	e018      	b.n	800b29c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	3302      	adds	r3, #2
 800b276:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	3301      	adds	r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	3301      	adds	r3, #1
 800b294:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b298:	3b01      	subs	r3, #1
 800b29a:	627b      	str	r3, [r7, #36]	; 0x24
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e3      	bne.n	800b26a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b2a2:	88bb      	ldrh	r3, [r7, #4]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d007      	beq.n	800b2be <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	701a      	strb	r2, [r3, #0]
  }
}
 800b2be:	bf00      	nop
 800b2c0:	372c      	adds	r7, #44	; 0x2c
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b2d6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b2da:	f002 f959 	bl	800d590 <USBD_static_malloc>
 800b2de:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d105      	bne.n	800b2f2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e066      	b.n	800b3c0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	7c1b      	ldrb	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d119      	bne.n	800b336 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b302:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b306:	2202      	movs	r2, #2
 800b308:	2181      	movs	r1, #129	; 0x81
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f001 ffe5 	bl	800d2da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b31a:	2202      	movs	r2, #2
 800b31c:	2101      	movs	r1, #1
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f001 ffdb 	bl	800d2da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2210      	movs	r2, #16
 800b330:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b334:	e016      	b.n	800b364 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b336:	2340      	movs	r3, #64	; 0x40
 800b338:	2202      	movs	r2, #2
 800b33a:	2181      	movs	r1, #129	; 0x81
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f001 ffcc 	bl	800d2da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	2202      	movs	r2, #2
 800b34c:	2101      	movs	r1, #1
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 ffc3 	bl	800d2da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2210      	movs	r2, #16
 800b360:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b364:	2308      	movs	r3, #8
 800b366:	2203      	movs	r2, #3
 800b368:	2182      	movs	r1, #130	; 0x82
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 ffb5 	bl	800d2da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7c1b      	ldrb	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d109      	bne.n	800b3ae <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f002 f887 	bl	800d4ba <USBD_LL_PrepareReceive>
 800b3ac:	e007      	b.n	800b3be <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3b4:	2340      	movs	r3, #64	; 0x40
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f002 f87e 	bl	800d4ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b3d4:	2181      	movs	r1, #129	; 0x81
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 ffa5 	bl	800d326 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 ff9e 	bl	800d326 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b3f2:	2182      	movs	r1, #130	; 0x82
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 ff96 	bl	800d326 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00e      	beq.n	800b432 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b424:	4618      	mov	r0, r3
 800b426:	f002 f8c1 	bl	800d5ac <USBD_static_free>
    pdev->pClassData = NULL;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b44c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b460:	2303      	movs	r3, #3
 800b462:	e0af      	b.n	800b5c4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d03f      	beq.n	800b4f0 <USBD_CDC_Setup+0xb4>
 800b470:	2b20      	cmp	r3, #32
 800b472:	f040 809f 	bne.w	800b5b4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	88db      	ldrh	r3, [r3, #6]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d02e      	beq.n	800b4dc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	b25b      	sxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	da16      	bge.n	800b4b6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b494:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	88d2      	ldrh	r2, [r2, #6]
 800b49a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	88db      	ldrh	r3, [r3, #6]
 800b4a0:	2b07      	cmp	r3, #7
 800b4a2:	bf28      	it	cs
 800b4a4:	2307      	movcs	r3, #7
 800b4a6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	89fa      	ldrh	r2, [r7, #14]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 facf 	bl	800ca52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b4b4:	e085      	b.n	800b5c2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	785a      	ldrb	r2, [r3, #1]
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	88db      	ldrh	r3, [r3, #6]
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b4cc:	6939      	ldr	r1, [r7, #16]
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	88db      	ldrh	r3, [r3, #6]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 fae8 	bl	800caaa <USBD_CtlPrepareRx>
      break;
 800b4da:	e072      	b.n	800b5c2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	7850      	ldrb	r0, [r2, #1]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	4798      	blx	r3
      break;
 800b4ee:	e068      	b.n	800b5c2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	785b      	ldrb	r3, [r3, #1]
 800b4f4:	2b0b      	cmp	r3, #11
 800b4f6:	d852      	bhi.n	800b59e <USBD_CDC_Setup+0x162>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <USBD_CDC_Setup+0xc4>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b531 	.word	0x0800b531
 800b504:	0800b5ad 	.word	0x0800b5ad
 800b508:	0800b59f 	.word	0x0800b59f
 800b50c:	0800b59f 	.word	0x0800b59f
 800b510:	0800b59f 	.word	0x0800b59f
 800b514:	0800b59f 	.word	0x0800b59f
 800b518:	0800b59f 	.word	0x0800b59f
 800b51c:	0800b59f 	.word	0x0800b59f
 800b520:	0800b59f 	.word	0x0800b59f
 800b524:	0800b59f 	.word	0x0800b59f
 800b528:	0800b55b 	.word	0x0800b55b
 800b52c:	0800b585 	.word	0x0800b585
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d107      	bne.n	800b54c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b53c:	f107 030a 	add.w	r3, r7, #10
 800b540:	2202      	movs	r2, #2
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fa84 	bl	800ca52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b54a:	e032      	b.n	800b5b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f001 fa0e 	bl	800c970 <USBD_CtlError>
            ret = USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	75fb      	strb	r3, [r7, #23]
          break;
 800b558:	e02b      	b.n	800b5b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b03      	cmp	r3, #3
 800b564:	d107      	bne.n	800b576 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b566:	f107 030d 	add.w	r3, r7, #13
 800b56a:	2201      	movs	r2, #1
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 fa6f 	bl	800ca52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b574:	e01d      	b.n	800b5b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 f9f9 	bl	800c970 <USBD_CtlError>
            ret = USBD_FAIL;
 800b57e:	2303      	movs	r3, #3
 800b580:	75fb      	strb	r3, [r7, #23]
          break;
 800b582:	e016      	b.n	800b5b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d00f      	beq.n	800b5b0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b590:	6839      	ldr	r1, [r7, #0]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f001 f9ec 	bl	800c970 <USBD_CtlError>
            ret = USBD_FAIL;
 800b598:	2303      	movs	r3, #3
 800b59a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b59c:	e008      	b.n	800b5b0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 f9e5 	bl	800c970 <USBD_CtlError>
          ret = USBD_FAIL;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b5aa:	e002      	b.n	800b5b2 <USBD_CDC_Setup+0x176>
          break;
 800b5ac:	bf00      	nop
 800b5ae:	e008      	b.n	800b5c2 <USBD_CDC_Setup+0x186>
          break;
 800b5b0:	bf00      	nop
      }
      break;
 800b5b2:	e006      	b.n	800b5c2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f001 f9da 	bl	800c970 <USBD_CtlError>
      ret = USBD_FAIL;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	75fb      	strb	r3, [r7, #23]
      break;
 800b5c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3718      	adds	r7, #24
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e04f      	b.n	800b68e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b5f6:	78fa      	ldrb	r2, [r7, #3]
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	440b      	add	r3, r1
 800b604:	3318      	adds	r3, #24
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d029      	beq.n	800b660 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b60c:	78fa      	ldrb	r2, [r7, #3]
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	3318      	adds	r3, #24
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	78f9      	ldrb	r1, [r7, #3]
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	460b      	mov	r3, r1
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	440b      	add	r3, r1
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	4403      	add	r3, r0
 800b62c:	3338      	adds	r3, #56	; 0x38
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	fbb2 f1f3 	udiv	r1, r2, r3
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d110      	bne.n	800b660 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	440b      	add	r3, r1
 800b64c:	3318      	adds	r3, #24
 800b64e:	2200      	movs	r2, #0
 800b650:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b652:	78f9      	ldrb	r1, [r7, #3]
 800b654:	2300      	movs	r3, #0
 800b656:	2200      	movs	r2, #0
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 ff0d 	bl	800d478 <USBD_LL_Transmit>
 800b65e:	e015      	b.n	800b68c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00b      	beq.n	800b68c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b084      	sub	sp, #16
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e015      	b.n	800b6e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b6b8:	78fb      	ldrb	r3, [r7, #3]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 ff1d 	bl	800d4fc <USBD_LL_GetRxDataSize>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b702:	2303      	movs	r3, #3
 800b704:	e01b      	b.n	800b73e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d015      	beq.n	800b73c <USBD_CDC_EP0_RxReady+0x50>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b716:	2bff      	cmp	r3, #255	; 0xff
 800b718:	d010      	beq.n	800b73c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b728:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b730:	b292      	uxth	r2, r2
 800b732:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	22ff      	movs	r2, #255	; 0xff
 800b738:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2243      	movs	r2, #67	; 0x43
 800b754:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b756:	4b03      	ldr	r3, [pc, #12]	; (800b764 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	20000094 	.word	0x20000094

0800b768 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2243      	movs	r2, #67	; 0x43
 800b774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b776:	4b03      	ldr	r3, [pc, #12]	; (800b784 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	20000050 	.word	0x20000050

0800b788 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2243      	movs	r2, #67	; 0x43
 800b794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b796:	4b03      	ldr	r3, [pc, #12]	; (800b7a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200000d8 	.word	0x200000d8

0800b7a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	220a      	movs	r2, #10
 800b7b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7b6:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	2000000c 	.word	0x2000000c

0800b7c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e004      	b.n	800b7e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b087      	sub	sp, #28
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	60f8      	str	r0, [r7, #12]
 800b7fa:	60b9      	str	r1, [r7, #8]
 800b7fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b804:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e008      	b.n	800b822 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b83e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b846:	2303      	movs	r3, #3
 800b848:	e004      	b.n	800b854 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b86e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d101      	bne.n	800b882 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b87e:	2303      	movs	r3, #3
 800b880:	e01a      	b.n	800b8b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d114      	bne.n	800b8b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2201      	movs	r2, #1
 800b890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b8aa:	2181      	movs	r1, #129	; 0x81
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 fde3 	bl	800d478 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e016      	b.n	800b90c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7c1b      	ldrb	r3, [r3, #16]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f001 fde1 	bl	800d4ba <USBD_LL_PrepareReceive>
 800b8f8:	e007      	b.n	800b90a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b900:	2340      	movs	r3, #64	; 0x40
 800b902:	2101      	movs	r1, #1
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 fdd8 	bl	800d4ba <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	4613      	mov	r3, r2
 800b920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d101      	bne.n	800b92c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b928:	2303      	movs	r3, #3
 800b92a:	e01f      	b.n	800b96c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2200      	movs	r2, #0
 800b930:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	79fa      	ldrb	r2, [r7, #7]
 800b95e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f001 fc3f 	bl	800d1e4 <USBD_LL_Init>
 800b966:	4603      	mov	r3, r0
 800b968:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b97e:	2300      	movs	r3, #0
 800b980:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b988:	2303      	movs	r3, #3
 800b98a:	e016      	b.n	800b9ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a8:	f107 020e 	add.w	r2, r7, #14
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b082      	sub	sp, #8
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f001 fc6a 	bl	800d2a4 <USBD_LL_Start>
 800b9d0:	4603      	mov	r3, r0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d009      	beq.n	800ba1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	78fa      	ldrb	r2, [r7, #3]
 800ba14:	4611      	mov	r1, r2
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4798      	blx	r3
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d007      	beq.n	800ba4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	4611      	mov	r1, r2
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	4798      	blx	r3
  }

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 ff46 	bl	800c8fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba8c:	f003 031f 	and.w	r3, r3, #31
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d01a      	beq.n	800baca <USBD_LL_SetupStage+0x72>
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	d822      	bhi.n	800bade <USBD_LL_SetupStage+0x86>
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <USBD_LL_SetupStage+0x4a>
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d00a      	beq.n	800bab6 <USBD_LL_SetupStage+0x5e>
 800baa0:	e01d      	b.n	800bade <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f9ee 	bl	800be8c <USBD_StdDevReq>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]
      break;
 800bab4:	e020      	b.n	800baf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa52 	bl	800bf68 <USBD_StdItfReq>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73fb      	strb	r3, [r7, #15]
      break;
 800bac8:	e016      	b.n	800baf8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fa91 	bl	800bffa <USBD_StdEPReq>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]
      break;
 800badc:	e00c      	b.n	800baf8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 fc39 	bl	800d364 <USBD_LL_StallEP>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]
      break;
 800baf6:	bf00      	nop
  }

  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b086      	sub	sp, #24
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	607a      	str	r2, [r7, #4]
 800bb0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb10:	7afb      	ldrb	r3, [r7, #11]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d138      	bne.n	800bb88 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d14a      	bne.n	800bbbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	689a      	ldr	r2, [r3, #8]
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d913      	bls.n	800bb5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	689a      	ldr	r2, [r3, #8]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	1ad2      	subs	r2, r2, r3
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	68da      	ldr	r2, [r3, #12]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	bf28      	it	cs
 800bb4e:	4613      	movcs	r3, r2
 800bb50:	461a      	mov	r2, r3
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 ffc5 	bl	800cae4 <USBD_CtlContinueRx>
 800bb5a:	e030      	b.n	800bbbe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d10b      	bne.n	800bb80 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f000 ffc0 	bl	800cb06 <USBD_CtlSendStatus>
 800bb86:	e01a      	b.n	800bbbe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d114      	bne.n	800bbbe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00e      	beq.n	800bbbe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	7afa      	ldrb	r2, [r7, #11]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	4798      	blx	r3
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	e000      	b.n	800bbc0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d16b      	bne.n	800bcb4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3314      	adds	r3, #20
 800bbe0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d156      	bne.n	800bc9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d914      	bls.n	800bc22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	1ad2      	subs	r2, r2, r3
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 ff3a 	bl	800ca88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc14:	2300      	movs	r3, #0
 800bc16:	2200      	movs	r2, #0
 800bc18:	2100      	movs	r1, #0
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f001 fc4d 	bl	800d4ba <USBD_LL_PrepareReceive>
 800bc20:	e03b      	b.n	800bc9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d11c      	bne.n	800bc68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	685a      	ldr	r2, [r3, #4]
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d316      	bcc.n	800bc68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d20f      	bcs.n	800bc68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 ff1b 	bl	800ca88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f001 fc2a 	bl	800d4ba <USBD_LL_PrepareReceive>
 800bc66:	e018      	b.n	800bc9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d10b      	bne.n	800bc8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d005      	beq.n	800bc8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc8c:	2180      	movs	r1, #128	; 0x80
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f001 fb68 	bl	800d364 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 ff49 	bl	800cb2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d122      	bne.n	800bcea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7ff fe98 	bl	800b9da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bcb2:	e01a      	b.n	800bcea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d114      	bne.n	800bcea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00e      	beq.n	800bcea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd2:	695b      	ldr	r3, [r3, #20]
 800bcd4:	7afa      	ldrb	r2, [r7, #11]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	4798      	blx	r3
 800bcdc:	4603      	mov	r3, r0
 800bcde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
 800bce8:	e000      	b.n	800bcec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e02f      	b.n	800bd88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00f      	beq.n	800bd52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d009      	beq.n	800bd52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6852      	ldr	r2, [r2, #4]
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd52:	2340      	movs	r3, #64	; 0x40
 800bd54:	2200      	movs	r2, #0
 800bd56:	2100      	movs	r1, #0
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f001 fabe 	bl	800d2da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2240      	movs	r2, #64	; 0x40
 800bd6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd6e:	2340      	movs	r3, #64	; 0x40
 800bd70:	2200      	movs	r2, #0
 800bd72:	2180      	movs	r1, #128	; 0x80
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f001 fab0 	bl	800d2da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2240      	movs	r2, #64	; 0x40
 800bd84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2204      	movs	r2, #4
 800bdca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	2b04      	cmp	r3, #4
 800bdee:	d106      	bne.n	800bdfe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800be1e:	2303      	movs	r3, #3
 800be20:	e012      	b.n	800be48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d10b      	bne.n	800be46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d005      	beq.n	800be46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3708      	adds	r7, #8
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be50:	b480      	push	{r7}
 800be52:	b087      	sub	sp, #28
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	3301      	adds	r3, #1
 800be66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be6e:	8a3b      	ldrh	r3, [r7, #16]
 800be70:	021b      	lsls	r3, r3, #8
 800be72:	b21a      	sxth	r2, r3
 800be74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be78:	4313      	orrs	r3, r2
 800be7a:	b21b      	sxth	r3, r3
 800be7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be7e:	89fb      	ldrh	r3, [r7, #14]
}
 800be80:	4618      	mov	r0, r3
 800be82:	371c      	adds	r7, #28
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bea2:	2b40      	cmp	r3, #64	; 0x40
 800bea4:	d005      	beq.n	800beb2 <USBD_StdDevReq+0x26>
 800bea6:	2b40      	cmp	r3, #64	; 0x40
 800bea8:	d853      	bhi.n	800bf52 <USBD_StdDevReq+0xc6>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00b      	beq.n	800bec6 <USBD_StdDevReq+0x3a>
 800beae:	2b20      	cmp	r3, #32
 800beb0:	d14f      	bne.n	800bf52 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	4798      	blx	r3
 800bec0:	4603      	mov	r3, r0
 800bec2:	73fb      	strb	r3, [r7, #15]
      break;
 800bec4:	e04a      	b.n	800bf5c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	785b      	ldrb	r3, [r3, #1]
 800beca:	2b09      	cmp	r3, #9
 800becc:	d83b      	bhi.n	800bf46 <USBD_StdDevReq+0xba>
 800bece:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <USBD_StdDevReq+0x48>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bf29 	.word	0x0800bf29
 800bed8:	0800bf3d 	.word	0x0800bf3d
 800bedc:	0800bf47 	.word	0x0800bf47
 800bee0:	0800bf33 	.word	0x0800bf33
 800bee4:	0800bf47 	.word	0x0800bf47
 800bee8:	0800bf07 	.word	0x0800bf07
 800beec:	0800befd 	.word	0x0800befd
 800bef0:	0800bf47 	.word	0x0800bf47
 800bef4:	0800bf1f 	.word	0x0800bf1f
 800bef8:	0800bf11 	.word	0x0800bf11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 f9de 	bl	800c2c0 <USBD_GetDescriptor>
          break;
 800bf04:	e024      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fb6d 	bl	800c5e8 <USBD_SetAddress>
          break;
 800bf0e:	e01f      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fbac 	bl	800c670 <USBD_SetConfig>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]
          break;
 800bf1c:	e018      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fc4b 	bl	800c7bc <USBD_GetConfig>
          break;
 800bf26:	e013      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fc7c 	bl	800c828 <USBD_GetStatus>
          break;
 800bf30:	e00e      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fcab 	bl	800c890 <USBD_SetFeature>
          break;
 800bf3a:	e009      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fcba 	bl	800c8b8 <USBD_ClrFeature>
          break;
 800bf44:	e004      	b.n	800bf50 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fd11 	bl	800c970 <USBD_CtlError>
          break;
 800bf4e:	bf00      	nop
      }
      break;
 800bf50:	e004      	b.n	800bf5c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fd0b 	bl	800c970 <USBD_CtlError>
      break;
 800bf5a:	bf00      	nop
  }

  return ret;
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop

0800bf68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf7e:	2b40      	cmp	r3, #64	; 0x40
 800bf80:	d005      	beq.n	800bf8e <USBD_StdItfReq+0x26>
 800bf82:	2b40      	cmp	r3, #64	; 0x40
 800bf84:	d82f      	bhi.n	800bfe6 <USBD_StdItfReq+0x7e>
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <USBD_StdItfReq+0x26>
 800bf8a:	2b20      	cmp	r3, #32
 800bf8c:	d12b      	bne.n	800bfe6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d81d      	bhi.n	800bfd8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	889b      	ldrh	r3, [r3, #4]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d813      	bhi.n	800bfce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	4798      	blx	r3
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	88db      	ldrh	r3, [r3, #6]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d110      	bne.n	800bfe2 <USBD_StdItfReq+0x7a>
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10d      	bne.n	800bfe2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fd9d 	bl	800cb06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfcc:	e009      	b.n	800bfe2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fccd 	bl	800c970 <USBD_CtlError>
          break;
 800bfd6:	e004      	b.n	800bfe2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fcc8 	bl	800c970 <USBD_CtlError>
          break;
 800bfe0:	e000      	b.n	800bfe4 <USBD_StdItfReq+0x7c>
          break;
 800bfe2:	bf00      	nop
      }
      break;
 800bfe4:	e004      	b.n	800bff0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fcc1 	bl	800c970 <USBD_CtlError>
      break;
 800bfee:	bf00      	nop
  }

  return ret;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	889b      	ldrh	r3, [r3, #4]
 800c00c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c016:	2b40      	cmp	r3, #64	; 0x40
 800c018:	d007      	beq.n	800c02a <USBD_StdEPReq+0x30>
 800c01a:	2b40      	cmp	r3, #64	; 0x40
 800c01c:	f200 8145 	bhi.w	800c2aa <USBD_StdEPReq+0x2b0>
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00c      	beq.n	800c03e <USBD_StdEPReq+0x44>
 800c024:	2b20      	cmp	r3, #32
 800c026:	f040 8140 	bne.w	800c2aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	4798      	blx	r3
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
      break;
 800c03c:	e13a      	b.n	800c2b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	2b03      	cmp	r3, #3
 800c044:	d007      	beq.n	800c056 <USBD_StdEPReq+0x5c>
 800c046:	2b03      	cmp	r3, #3
 800c048:	f300 8129 	bgt.w	800c29e <USBD_StdEPReq+0x2a4>
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d07f      	beq.n	800c150 <USBD_StdEPReq+0x156>
 800c050:	2b01      	cmp	r3, #1
 800c052:	d03c      	beq.n	800c0ce <USBD_StdEPReq+0xd4>
 800c054:	e123      	b.n	800c29e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d002      	beq.n	800c068 <USBD_StdEPReq+0x6e>
 800c062:	2b03      	cmp	r3, #3
 800c064:	d016      	beq.n	800c094 <USBD_StdEPReq+0x9a>
 800c066:	e02c      	b.n	800c0c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00d      	beq.n	800c08a <USBD_StdEPReq+0x90>
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	2b80      	cmp	r3, #128	; 0x80
 800c072:	d00a      	beq.n	800c08a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 f973 	bl	800d364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c07e:	2180      	movs	r1, #128	; 0x80
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f001 f96f 	bl	800d364 <USBD_LL_StallEP>
 800c086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c088:	e020      	b.n	800c0cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fc6f 	bl	800c970 <USBD_CtlError>
              break;
 800c092:	e01b      	b.n	800c0cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	885b      	ldrh	r3, [r3, #2]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10e      	bne.n	800c0ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00b      	beq.n	800c0ba <USBD_StdEPReq+0xc0>
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	2b80      	cmp	r3, #128	; 0x80
 800c0a6:	d008      	beq.n	800c0ba <USBD_StdEPReq+0xc0>
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	88db      	ldrh	r3, [r3, #6]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 f955 	bl	800d364 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fd23 	bl	800cb06 <USBD_CtlSendStatus>

              break;
 800c0c0:	e004      	b.n	800c0cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c0c2:	6839      	ldr	r1, [r7, #0]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fc53 	bl	800c970 <USBD_CtlError>
              break;
 800c0ca:	bf00      	nop
          }
          break;
 800c0cc:	e0ec      	b.n	800c2a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d002      	beq.n	800c0e0 <USBD_StdEPReq+0xe6>
 800c0da:	2b03      	cmp	r3, #3
 800c0dc:	d016      	beq.n	800c10c <USBD_StdEPReq+0x112>
 800c0de:	e030      	b.n	800c142 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00d      	beq.n	800c102 <USBD_StdEPReq+0x108>
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	2b80      	cmp	r3, #128	; 0x80
 800c0ea:	d00a      	beq.n	800c102 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f001 f937 	bl	800d364 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0f6:	2180      	movs	r1, #128	; 0x80
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 f933 	bl	800d364 <USBD_LL_StallEP>
 800c0fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c100:	e025      	b.n	800c14e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fc33 	bl	800c970 <USBD_CtlError>
              break;
 800c10a:	e020      	b.n	800c14e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	885b      	ldrh	r3, [r3, #2]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11b      	bne.n	800c14c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d004      	beq.n	800c128 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f001 f93d 	bl	800d3a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fcec 	bl	800cb06 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	4798      	blx	r3
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c140:	e004      	b.n	800c14c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fc13 	bl	800c970 <USBD_CtlError>
              break;
 800c14a:	e000      	b.n	800c14e <USBD_StdEPReq+0x154>
              break;
 800c14c:	bf00      	nop
          }
          break;
 800c14e:	e0ab      	b.n	800c2a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d002      	beq.n	800c162 <USBD_StdEPReq+0x168>
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	d032      	beq.n	800c1c6 <USBD_StdEPReq+0x1cc>
 800c160:	e097      	b.n	800c292 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <USBD_StdEPReq+0x17e>
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	2b80      	cmp	r3, #128	; 0x80
 800c16c:	d004      	beq.n	800c178 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 fbfd 	bl	800c970 <USBD_CtlError>
                break;
 800c176:	e091      	b.n	800c29c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	da0b      	bge.n	800c198 <USBD_StdEPReq+0x19e>
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c186:	4613      	mov	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	3310      	adds	r3, #16
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	4413      	add	r3, r2
 800c194:	3304      	adds	r3, #4
 800c196:	e00b      	b.n	800c1b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c19e:	4613      	mov	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1aa:	687a      	ldr	r2, [r7, #4]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fc47 	bl	800ca52 <USBD_CtlSendData>
              break;
 800c1c4:	e06a      	b.n	800c29c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	da11      	bge.n	800c1f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	f003 020f 	and.w	r2, r3, #15
 800c1d4:	6879      	ldr	r1, [r7, #4]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	3324      	adds	r3, #36	; 0x24
 800c1e2:	881b      	ldrh	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d117      	bne.n	800c218 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fbc0 	bl	800c970 <USBD_CtlError>
                  break;
 800c1f0:	e054      	b.n	800c29c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	f003 020f 	and.w	r2, r3, #15
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	440b      	add	r3, r1
 800c204:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fbad 	bl	800c970 <USBD_CtlError>
                  break;
 800c216:	e041      	b.n	800c29c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	da0b      	bge.n	800c238 <USBD_StdEPReq+0x23e>
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c226:	4613      	mov	r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4413      	add	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	3310      	adds	r3, #16
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	4413      	add	r3, r2
 800c234:	3304      	adds	r3, #4
 800c236:	e00b      	b.n	800c250 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c23e:	4613      	mov	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	4413      	add	r3, r2
 800c24e:	3304      	adds	r3, #4
 800c250:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <USBD_StdEPReq+0x264>
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b80      	cmp	r3, #128	; 0x80
 800c25c:	d103      	bne.n	800c266 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	e00e      	b.n	800c284 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f001 f8b8 	bl	800d3e0 <USBD_LL_IsStallEP>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2201      	movs	r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e002      	b.n	800c284 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	2202      	movs	r2, #2
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fbe1 	bl	800ca52 <USBD_CtlSendData>
              break;
 800c290:	e004      	b.n	800c29c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fb6b 	bl	800c970 <USBD_CtlError>
              break;
 800c29a:	bf00      	nop
          }
          break;
 800c29c:	e004      	b.n	800c2a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 fb65 	bl	800c970 <USBD_CtlError>
          break;
 800c2a6:	bf00      	nop
      }
      break;
 800c2a8:	e004      	b.n	800c2b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fb5f 	bl	800c970 <USBD_CtlError>
      break;
 800c2b2:	bf00      	nop
  }

  return ret;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
	...

0800c2c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	0a1b      	lsrs	r3, r3, #8
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	2b0e      	cmp	r3, #14
 800c2e2:	f200 8152 	bhi.w	800c58a <USBD_GetDescriptor+0x2ca>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <USBD_GetDescriptor+0x2c>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c35d 	.word	0x0800c35d
 800c2f0:	0800c375 	.word	0x0800c375
 800c2f4:	0800c3b5 	.word	0x0800c3b5
 800c2f8:	0800c58b 	.word	0x0800c58b
 800c2fc:	0800c58b 	.word	0x0800c58b
 800c300:	0800c52b 	.word	0x0800c52b
 800c304:	0800c557 	.word	0x0800c557
 800c308:	0800c58b 	.word	0x0800c58b
 800c30c:	0800c58b 	.word	0x0800c58b
 800c310:	0800c58b 	.word	0x0800c58b
 800c314:	0800c58b 	.word	0x0800c58b
 800c318:	0800c58b 	.word	0x0800c58b
 800c31c:	0800c58b 	.word	0x0800c58b
 800c320:	0800c58b 	.word	0x0800c58b
 800c324:	0800c329 	.word	0x0800c329
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00b      	beq.n	800c34c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c33a:	69db      	ldr	r3, [r3, #28]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	7c12      	ldrb	r2, [r2, #16]
 800c340:	f107 0108 	add.w	r1, r7, #8
 800c344:	4610      	mov	r0, r2
 800c346:	4798      	blx	r3
 800c348:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c34a:	e126      	b.n	800c59a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fb0e 	bl	800c970 <USBD_CtlError>
        err++;
 800c354:	7afb      	ldrb	r3, [r7, #11]
 800c356:	3301      	adds	r3, #1
 800c358:	72fb      	strb	r3, [r7, #11]
      break;
 800c35a:	e11e      	b.n	800c59a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
      break;
 800c372:	e112      	b.n	800c59a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	7c1b      	ldrb	r3, [r3, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10d      	bne.n	800c398 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c384:	f107 0208 	add.w	r2, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3301      	adds	r3, #1
 800c392:	2202      	movs	r2, #2
 800c394:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c396:	e100      	b.n	800c59a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	f107 0208 	add.w	r2, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	701a      	strb	r2, [r3, #0]
      break;
 800c3b2:	e0f2      	b.n	800c59a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	885b      	ldrh	r3, [r3, #2]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	f200 80ac 	bhi.w	800c518 <USBD_GetDescriptor+0x258>
 800c3c0:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <USBD_GetDescriptor+0x108>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3e1 	.word	0x0800c3e1
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c449 	.word	0x0800c449
 800c3d4:	0800c47d 	.word	0x0800c47d
 800c3d8:	0800c4b1 	.word	0x0800c4b1
 800c3dc:	0800c4e5 	.word	0x0800c4e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00b      	beq.n	800c404 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	f107 0108 	add.w	r1, r7, #8
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c402:	e091      	b.n	800c528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fab2 	bl	800c970 <USBD_CtlError>
            err++;
 800c40c:	7afb      	ldrb	r3, [r7, #11]
 800c40e:	3301      	adds	r3, #1
 800c410:	72fb      	strb	r3, [r7, #11]
          break;
 800c412:	e089      	b.n	800c528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00b      	beq.n	800c438 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	7c12      	ldrb	r2, [r2, #16]
 800c42c:	f107 0108 	add.w	r1, r7, #8
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
 800c434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c436:	e077      	b.n	800c528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fa98 	bl	800c970 <USBD_CtlError>
            err++;
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	3301      	adds	r3, #1
 800c444:	72fb      	strb	r3, [r7, #11]
          break;
 800c446:	e06f      	b.n	800c528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46a:	e05d      	b.n	800c528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa7e 	bl	800c970 <USBD_CtlError>
            err++;
 800c474:	7afb      	ldrb	r3, [r7, #11]
 800c476:	3301      	adds	r3, #1
 800c478:	72fb      	strb	r3, [r7, #11]
          break;
 800c47a:	e055      	b.n	800c528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e043      	b.n	800c528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fa64 	bl	800c970 <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e03b      	b.n	800c528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	695b      	ldr	r3, [r3, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e029      	b.n	800c528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa4a 	bl	800c970 <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e021      	b.n	800c528 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c506:	e00f      	b.n	800c528 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa30 	bl	800c970 <USBD_CtlError>
            err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
          break;
 800c516:	e007      	b.n	800c528 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fa28 	bl	800c970 <USBD_CtlError>
          err++;
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	3301      	adds	r3, #1
 800c524:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c526:	bf00      	nop
      }
      break;
 800c528:	e037      	b.n	800c59a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	7c1b      	ldrb	r3, [r3, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d109      	bne.n	800c546 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c53a:	f107 0208 	add.w	r2, r7, #8
 800c53e:	4610      	mov	r0, r2
 800c540:	4798      	blx	r3
 800c542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c544:	e029      	b.n	800c59a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c546:	6839      	ldr	r1, [r7, #0]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa11 	bl	800c970 <USBD_CtlError>
        err++;
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	3301      	adds	r3, #1
 800c552:	72fb      	strb	r3, [r7, #11]
      break;
 800c554:	e021      	b.n	800c59a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7c1b      	ldrb	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10d      	bne.n	800c57a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	4610      	mov	r0, r2
 800c56c:	4798      	blx	r3
 800c56e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3301      	adds	r3, #1
 800c574:	2207      	movs	r2, #7
 800c576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c578:	e00f      	b.n	800c59a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f9f7 	bl	800c970 <USBD_CtlError>
        err++;
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	3301      	adds	r3, #1
 800c586:	72fb      	strb	r3, [r7, #11]
      break;
 800c588:	e007      	b.n	800c59a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f9ef 	bl	800c970 <USBD_CtlError>
      err++;
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	3301      	adds	r3, #1
 800c596:	72fb      	strb	r3, [r7, #11]
      break;
 800c598:	bf00      	nop
  }

  if (err != 0U)
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11e      	bne.n	800c5de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	88db      	ldrh	r3, [r3, #6]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d016      	beq.n	800c5d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5a8:	893b      	ldrh	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	88da      	ldrh	r2, [r3, #6]
 800c5b2:	893b      	ldrh	r3, [r7, #8]
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	bf28      	it	cs
 800c5b8:	4613      	movcs	r3, r2
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5be:	893b      	ldrh	r3, [r7, #8]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68f9      	ldr	r1, [r7, #12]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa44 	bl	800ca52 <USBD_CtlSendData>
 800c5ca:	e009      	b.n	800c5e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f9ce 	bl	800c970 <USBD_CtlError>
 800c5d4:	e004      	b.n	800c5e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 fa95 	bl	800cb06 <USBD_CtlSendStatus>
 800c5dc:	e000      	b.n	800c5e0 <USBD_GetDescriptor+0x320>
    return;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	889b      	ldrh	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d131      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	88db      	ldrh	r3, [r3, #6]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d12d      	bne.n	800c65e <USBD_SetAddress+0x76>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	2b7f      	cmp	r3, #127	; 0x7f
 800c608:	d829      	bhi.n	800c65e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d104      	bne.n	800c62c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f9a3 	bl	800c970 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	e01d      	b.n	800c668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7bfa      	ldrb	r2, [r7, #15]
 800c630:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fefe 	bl	800d43a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa61 	bl	800cb06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c644:	7bfb      	ldrb	r3, [r7, #15]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2202      	movs	r2, #2
 800c64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c652:	e009      	b.n	800c668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65c:	e004      	b.n	800c668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f985 	bl	800c970 <USBD_CtlError>
  }
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	3710      	adds	r7, #16
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	885b      	ldrh	r3, [r3, #2]
 800c682:	b2da      	uxtb	r2, r3
 800c684:	4b4c      	ldr	r3, [pc, #304]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c688:	4b4b      	ldr	r3, [pc, #300]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d905      	bls.n	800c69c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f96c 	bl	800c970 <USBD_CtlError>
    return USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e088      	b.n	800c7ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d002      	beq.n	800c6ae <USBD_SetConfig+0x3e>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d025      	beq.n	800c6f8 <USBD_SetConfig+0x88>
 800c6ac:	e071      	b.n	800c792 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6ae:	4b42      	ldr	r3, [pc, #264]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d01c      	beq.n	800c6f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c6b6:	4b40      	ldr	r3, [pc, #256]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c0:	4b3d      	ldr	r3, [pc, #244]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff f992 	bl	800b9f0 <USBD_SetClassConfig>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f949 	bl	800c970 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6de:	e065      	b.n	800c7ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fa10 	bl	800cb06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6ee:	e05d      	b.n	800c7ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fa08 	bl	800cb06 <USBD_CtlSendStatus>
      break;
 800c6f6:	e059      	b.n	800c7ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6f8:	4b2f      	ldr	r3, [pc, #188]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d112      	bne.n	800c726 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c708:	4b2b      	ldr	r3, [pc, #172]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	461a      	mov	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c712:	4b29      	ldr	r3, [pc, #164]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff f985 	bl	800ba28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9f1 	bl	800cb06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c724:	e042      	b.n	800c7ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c726:	4b24      	ldr	r3, [pc, #144]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	461a      	mov	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	429a      	cmp	r2, r3
 800c732:	d02a      	beq.n	800c78a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	4619      	mov	r1, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff f973 	bl	800ba28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c742:	4b1d      	ldr	r3, [pc, #116]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c74c:	4b1a      	ldr	r3, [pc, #104]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f7ff f94c 	bl	800b9f0 <USBD_SetClassConfig>
 800c758:	4603      	mov	r3, r0
 800c75a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00f      	beq.n	800c782 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f903 	bl	800c970 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff f958 	bl	800ba28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2202      	movs	r2, #2
 800c77c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c780:	e014      	b.n	800c7ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f9bf 	bl	800cb06 <USBD_CtlSendStatus>
      break;
 800c788:	e010      	b.n	800c7ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f9bb 	bl	800cb06 <USBD_CtlSendStatus>
      break;
 800c790:	e00c      	b.n	800c7ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f8eb 	bl	800c970 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c79a:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <USBD_SetConfig+0x148>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff f941 	bl	800ba28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7aa:	bf00      	nop
  }

  return ret;
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	2000048c 	.word	0x2000048c

0800c7bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	88db      	ldrh	r3, [r3, #6]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d004      	beq.n	800c7d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f8cd 	bl	800c970 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7d6:	e023      	b.n	800c820 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	dc02      	bgt.n	800c7ea <USBD_GetConfig+0x2e>
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dc03      	bgt.n	800c7f0 <USBD_GetConfig+0x34>
 800c7e8:	e015      	b.n	800c816 <USBD_GetConfig+0x5a>
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d00b      	beq.n	800c806 <USBD_GetConfig+0x4a>
 800c7ee:	e012      	b.n	800c816 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f927 	bl	800ca52 <USBD_CtlSendData>
        break;
 800c804:	e00c      	b.n	800c820 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3304      	adds	r3, #4
 800c80a:	2201      	movs	r2, #1
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f91f 	bl	800ca52 <USBD_CtlSendData>
        break;
 800c814:	e004      	b.n	800c820 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f8a9 	bl	800c970 <USBD_CtlError>
        break;
 800c81e:	bf00      	nop
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	3b01      	subs	r3, #1
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d81e      	bhi.n	800c87e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	88db      	ldrh	r3, [r3, #6]
 800c844:	2b02      	cmp	r3, #2
 800c846:	d004      	beq.n	800c852 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f890 	bl	800c970 <USBD_CtlError>
        break;
 800c850:	e01a      	b.n	800c888 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d005      	beq.n	800c86e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f043 0202 	orr.w	r2, r3, #2
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	330c      	adds	r3, #12
 800c872:	2202      	movs	r2, #2
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f8eb 	bl	800ca52 <USBD_CtlSendData>
      break;
 800c87c:	e004      	b.n	800c888 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f875 	bl	800c970 <USBD_CtlError>
      break;
 800c886:	bf00      	nop
  }
}
 800c888:	bf00      	nop
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	885b      	ldrh	r3, [r3, #2]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d106      	bne.n	800c8b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f92b 	bl	800cb06 <USBD_CtlSendStatus>
  }
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d80b      	bhi.n	800c8e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	885b      	ldrh	r3, [r3, #2]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d10c      	bne.n	800c8f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f910 	bl	800cb06 <USBD_CtlSendStatus>
      }
      break;
 800c8e6:	e004      	b.n	800c8f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f840 	bl	800c970 <USBD_CtlError>
      break;
 800c8f0:	e000      	b.n	800c8f4 <USBD_ClrFeature+0x3c>
      break;
 800c8f2:	bf00      	nop
  }
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	781a      	ldrb	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3301      	adds	r3, #1
 800c916:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	781a      	ldrb	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3301      	adds	r3, #1
 800c924:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff fa92 	bl	800be50 <SWAPBYTE>
 800c92c:	4603      	mov	r3, r0
 800c92e:	461a      	mov	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3301      	adds	r3, #1
 800c938:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	3301      	adds	r3, #1
 800c93e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff fa85 	bl	800be50 <SWAPBYTE>
 800c946:	4603      	mov	r3, r0
 800c948:	461a      	mov	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	3301      	adds	r3, #1
 800c958:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f7ff fa78 	bl	800be50 <SWAPBYTE>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	80da      	strh	r2, [r3, #6]
}
 800c968:	bf00      	nop
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c97a:	2180      	movs	r1, #128	; 0x80
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fcf1 	bl	800d364 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c982:	2100      	movs	r1, #0
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fced 	bl	800d364 <USBD_LL_StallEP>
}
 800c98a:	bf00      	nop
 800c98c:	3708      	adds	r7, #8
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d036      	beq.n	800ca16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9ac:	6938      	ldr	r0, [r7, #16]
 800c9ae:	f000 f836 	bl	800ca1e <USBD_GetLen>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	7812      	ldrb	r2, [r2, #0]
 800c9ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	2203      	movs	r2, #3
 800c9da:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9e2:	e013      	b.n	800ca0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	7812      	ldrb	r2, [r2, #0]
 800c9ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	613b      	str	r3, [r7, #16]
    idx++;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	4413      	add	r3, r2
 800ca02:	2200      	movs	r2, #0
 800ca04:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1e7      	bne.n	800c9e4 <USBD_GetString+0x52>
 800ca14:	e000      	b.n	800ca18 <USBD_GetString+0x86>
    return;
 800ca16:	bf00      	nop
  }
}
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b085      	sub	sp, #20
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca2e:	e005      	b.n	800ca3c <USBD_GetLen+0x1e>
  {
    len++;
 800ca30:	7bfb      	ldrb	r3, [r7, #15]
 800ca32:	3301      	adds	r3, #1
 800ca34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1f5      	bne.n	800ca30 <USBD_GetLen+0x12>
  }

  return len;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b084      	sub	sp, #16
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	60b9      	str	r1, [r7, #8]
 800ca5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2202      	movs	r2, #2
 800ca62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	2100      	movs	r1, #0
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 fcfd 	bl	800d478 <USBD_LL_Transmit>

  return USBD_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	2100      	movs	r1, #0
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 fcec 	bl	800d478 <USBD_LL_Transmit>

  return USBD_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	60f8      	str	r0, [r7, #12]
 800cab2:	60b9      	str	r1, [r7, #8]
 800cab4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2203      	movs	r2, #3
 800caba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	2100      	movs	r1, #0
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 fcf0 	bl	800d4ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	2100      	movs	r1, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 fcdf 	bl	800d4ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b082      	sub	sp, #8
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2204      	movs	r2, #4
 800cb12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb16:	2300      	movs	r3, #0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fcab 	bl	800d478 <USBD_LL_Transmit>

  return USBD_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2205      	movs	r2, #5
 800cb38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2100      	movs	r1, #0
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 fcb9 	bl	800d4ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
	...

0800cb54 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4912      	ldr	r1, [pc, #72]	; (800cba4 <MX_USB_Device_Init+0x50>)
 800cb5c:	4812      	ldr	r0, [pc, #72]	; (800cba8 <MX_USB_Device_Init+0x54>)
 800cb5e:	f7fe fed9 	bl	800b914 <USBD_Init>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cb68:	f7f5 f902 	bl	8001d70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cb6c:	490f      	ldr	r1, [pc, #60]	; (800cbac <MX_USB_Device_Init+0x58>)
 800cb6e:	480e      	ldr	r0, [pc, #56]	; (800cba8 <MX_USB_Device_Init+0x54>)
 800cb70:	f7fe ff00 	bl	800b974 <USBD_RegisterClass>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cb7a:	f7f5 f8f9 	bl	8001d70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cb7e:	490c      	ldr	r1, [pc, #48]	; (800cbb0 <MX_USB_Device_Init+0x5c>)
 800cb80:	4809      	ldr	r0, [pc, #36]	; (800cba8 <MX_USB_Device_Init+0x54>)
 800cb82:	f7fe fe21 	bl	800b7c8 <USBD_CDC_RegisterInterface>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cb8c:	f7f5 f8f0 	bl	8001d70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cb90:	4805      	ldr	r0, [pc, #20]	; (800cba8 <MX_USB_Device_Init+0x54>)
 800cb92:	f7fe ff16 	bl	800b9c2 <USBD_Start>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cb9c:	f7f5 f8e8 	bl	8001d70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cba0:	bf00      	nop
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20000138 	.word	0x20000138
 800cba8:	20000490 	.word	0x20000490
 800cbac:	20000018 	.word	0x20000018
 800cbb0:	20000124 	.word	0x20000124

0800cbb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbb8:	2200      	movs	r2, #0
 800cbba:	4905      	ldr	r1, [pc, #20]	; (800cbd0 <CDC_Init_FS+0x1c>)
 800cbbc:	4805      	ldr	r0, [pc, #20]	; (800cbd4 <CDC_Init_FS+0x20>)
 800cbbe:	f7fe fe18 	bl	800b7f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbc2:	4905      	ldr	r1, [pc, #20]	; (800cbd8 <CDC_Init_FS+0x24>)
 800cbc4:	4803      	ldr	r0, [pc, #12]	; (800cbd4 <CDC_Init_FS+0x20>)
 800cbc6:	f7fe fe32 	bl	800b82e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20000b60 	.word	0x20000b60
 800cbd4:	20000490 	.word	0x20000490
 800cbd8:	20000760 	.word	0x20000760

0800cbdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbe0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	2b23      	cmp	r3, #35	; 0x23
 800cc00:	f200 8098 	bhi.w	800cd34 <CDC_Control_FS+0x148>
 800cc04:	a201      	add	r2, pc, #4	; (adr r2, 800cc0c <CDC_Control_FS+0x20>)
 800cc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0a:	bf00      	nop
 800cc0c:	0800cd35 	.word	0x0800cd35
 800cc10:	0800cd35 	.word	0x0800cd35
 800cc14:	0800cd35 	.word	0x0800cd35
 800cc18:	0800cd35 	.word	0x0800cd35
 800cc1c:	0800cd35 	.word	0x0800cd35
 800cc20:	0800cd35 	.word	0x0800cd35
 800cc24:	0800cd35 	.word	0x0800cd35
 800cc28:	0800cd35 	.word	0x0800cd35
 800cc2c:	0800cd35 	.word	0x0800cd35
 800cc30:	0800cd35 	.word	0x0800cd35
 800cc34:	0800cd35 	.word	0x0800cd35
 800cc38:	0800cd35 	.word	0x0800cd35
 800cc3c:	0800cd35 	.word	0x0800cd35
 800cc40:	0800cd35 	.word	0x0800cd35
 800cc44:	0800cd35 	.word	0x0800cd35
 800cc48:	0800cd35 	.word	0x0800cd35
 800cc4c:	0800cd35 	.word	0x0800cd35
 800cc50:	0800cd35 	.word	0x0800cd35
 800cc54:	0800cd35 	.word	0x0800cd35
 800cc58:	0800cd35 	.word	0x0800cd35
 800cc5c:	0800cd35 	.word	0x0800cd35
 800cc60:	0800cd35 	.word	0x0800cd35
 800cc64:	0800cd35 	.word	0x0800cd35
 800cc68:	0800cd35 	.word	0x0800cd35
 800cc6c:	0800cd35 	.word	0x0800cd35
 800cc70:	0800cd35 	.word	0x0800cd35
 800cc74:	0800cd35 	.word	0x0800cd35
 800cc78:	0800cd35 	.word	0x0800cd35
 800cc7c:	0800cd35 	.word	0x0800cd35
 800cc80:	0800cd35 	.word	0x0800cd35
 800cc84:	0800cd35 	.word	0x0800cd35
 800cc88:	0800cd35 	.word	0x0800cd35
 800cc8c:	0800cc9d 	.word	0x0800cc9d
 800cc90:	0800cce1 	.word	0x0800cce1
 800cc94:	0800cd35 	.word	0x0800cd35
 800cc98:	0800cd35 	.word	0x0800cd35
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	3301      	adds	r3, #1
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	021b      	lsls	r3, r3, #8
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	3302      	adds	r3, #2
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	041b      	lsls	r3, r3, #16
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	3303      	adds	r3, #3
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	061b      	lsls	r3, r3, #24
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4b20      	ldr	r3, [pc, #128]	; (800cd44 <CDC_Control_FS+0x158>)
 800ccc4:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	791a      	ldrb	r2, [r3, #4]
 800ccca:	4b1e      	ldr	r3, [pc, #120]	; (800cd44 <CDC_Control_FS+0x158>)
 800cccc:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	795a      	ldrb	r2, [r3, #5]
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <CDC_Control_FS+0x158>)
 800ccd4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	799a      	ldrb	r2, [r3, #6]
 800ccda:	4b1a      	ldr	r3, [pc, #104]	; (800cd44 <CDC_Control_FS+0x158>)
 800ccdc:	719a      	strb	r2, [r3, #6]

    break;
 800ccde:	e02a      	b.n	800cd36 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800cce0:	4b18      	ldr	r3, [pc, #96]	; (800cd44 <CDC_Control_FS+0x158>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ccea:	4b16      	ldr	r3, [pc, #88]	; (800cd44 <CDC_Control_FS+0x158>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	0a1a      	lsrs	r2, r3, #8
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	b2d2      	uxtb	r2, r2
 800ccf6:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <CDC_Control_FS+0x158>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	0c1a      	lsrs	r2, r3, #16
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	3302      	adds	r3, #2
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800cd06:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <CDC_Control_FS+0x158>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	0e1a      	lsrs	r2, r3, #24
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	3303      	adds	r3, #3
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	3304      	adds	r3, #4
 800cd18:	4a0a      	ldr	r2, [pc, #40]	; (800cd44 <CDC_Control_FS+0x158>)
 800cd1a:	7912      	ldrb	r2, [r2, #4]
 800cd1c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	3305      	adds	r3, #5
 800cd22:	4a08      	ldr	r2, [pc, #32]	; (800cd44 <CDC_Control_FS+0x158>)
 800cd24:	7952      	ldrb	r2, [r2, #5]
 800cd26:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	3306      	adds	r3, #6
 800cd2c:	4a05      	ldr	r2, [pc, #20]	; (800cd44 <CDC_Control_FS+0x158>)
 800cd2e:	7992      	ldrb	r2, [r2, #6]
 800cd30:	701a      	strb	r2, [r3, #0]

    break;
 800cd32:	e000      	b.n	800cd36 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd34:	bf00      	nop
  }

  return (USBD_OK);
 800cd36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr
 800cd44:	2000011c 	.word	0x2000011c

0800cd48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	received_data = true;
 800cd52:	4b0a      	ldr	r3, [pc, #40]	; (800cd7c <CDC_Receive_FS+0x34>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	701a      	strb	r2, [r3, #0]
	received_data_length = *Len;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <CDC_Receive_FS+0x38>)
 800cd60:	801a      	strh	r2, [r3, #0]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4807      	ldr	r0, [pc, #28]	; (800cd84 <CDC_Receive_FS+0x3c>)
 800cd66:	f7fe fd62 	bl	800b82e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd6a:	4806      	ldr	r0, [pc, #24]	; (800cd84 <CDC_Receive_FS+0x3c>)
 800cd6c:	f7fe fda8 	bl	800b8c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	20000f62 	.word	0x20000f62
 800cd80:	20000f60 	.word	0x20000f60
 800cd84:	20000490 	.word	0x20000490

0800cd88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd98:	4b0d      	ldr	r3, [pc, #52]	; (800cdd0 <CDC_Transmit_FS+0x48>)
 800cd9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d001      	beq.n	800cdae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e00b      	b.n	800cdc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdae:	887b      	ldrh	r3, [r7, #2]
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	4806      	ldr	r0, [pc, #24]	; (800cdd0 <CDC_Transmit_FS+0x48>)
 800cdb6:	f7fe fd1c 	bl	800b7f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdba:	4805      	ldr	r0, [pc, #20]	; (800cdd0 <CDC_Transmit_FS+0x48>)
 800cdbc:	f7fe fd50 	bl	800b860 <USBD_CDC_TransmitPacket>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20000490 	.word	0x20000490

0800cdd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cde6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	371c      	adds	r7, #28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2212      	movs	r2, #18
 800ce08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ce0a:	4b03      	ldr	r3, [pc, #12]	; (800ce18 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	20000158 	.word	0x20000158

0800ce1c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	4603      	mov	r3, r0
 800ce24:	6039      	str	r1, [r7, #0]
 800ce26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2204      	movs	r2, #4
 800ce2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce2e:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	2000016c 	.word	0x2000016c

0800ce40 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	6039      	str	r1, [r7, #0]
 800ce4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	4907      	ldr	r1, [pc, #28]	; (800ce74 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ce56:	4808      	ldr	r0, [pc, #32]	; (800ce78 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ce58:	f7ff fd9b 	bl	800c992 <USBD_GetString>
 800ce5c:	e004      	b.n	800ce68 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4904      	ldr	r1, [pc, #16]	; (800ce74 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ce62:	4805      	ldr	r0, [pc, #20]	; (800ce78 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ce64:	f7ff fd95 	bl	800c992 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce68:	4b02      	ldr	r3, [pc, #8]	; (800ce74 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20000f64 	.word	0x20000f64
 800ce78:	0800db60 	.word	0x0800db60

0800ce7c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	6039      	str	r1, [r7, #0]
 800ce86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	4904      	ldr	r1, [pc, #16]	; (800ce9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ce8c:	4804      	ldr	r0, [pc, #16]	; (800cea0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ce8e:	f7ff fd80 	bl	800c992 <USBD_GetString>
  return USBD_StrDesc;
 800ce92:	4b02      	ldr	r3, [pc, #8]	; (800ce9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	20000f64 	.word	0x20000f64
 800cea0:	0800db78 	.word	0x0800db78

0800cea4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	221a      	movs	r2, #26
 800ceb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ceb6:	f000 f843 	bl	800cf40 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ceba:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20000170 	.word	0x20000170

0800cec8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	6039      	str	r1, [r7, #0]
 800ced2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d105      	bne.n	800cee6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	4907      	ldr	r1, [pc, #28]	; (800cefc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cede:	4808      	ldr	r0, [pc, #32]	; (800cf00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cee0:	f7ff fd57 	bl	800c992 <USBD_GetString>
 800cee4:	e004      	b.n	800cef0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	4904      	ldr	r1, [pc, #16]	; (800cefc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ceea:	4805      	ldr	r0, [pc, #20]	; (800cf00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ceec:	f7ff fd51 	bl	800c992 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef0:	4b02      	ldr	r3, [pc, #8]	; (800cefc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000f64 	.word	0x20000f64
 800cf00:	0800db8c 	.word	0x0800db8c

0800cf04 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	6039      	str	r1, [r7, #0]
 800cf0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf10:	79fb      	ldrb	r3, [r7, #7]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d105      	bne.n	800cf22 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	4907      	ldr	r1, [pc, #28]	; (800cf38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cf1a:	4808      	ldr	r0, [pc, #32]	; (800cf3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cf1c:	f7ff fd39 	bl	800c992 <USBD_GetString>
 800cf20:	e004      	b.n	800cf2c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	4904      	ldr	r1, [pc, #16]	; (800cf38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cf26:	4805      	ldr	r0, [pc, #20]	; (800cf3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cf28:	f7ff fd33 	bl	800c992 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf2c:	4b02      	ldr	r3, [pc, #8]	; (800cf38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20000f64 	.word	0x20000f64
 800cf3c:	0800db98 	.word	0x0800db98

0800cf40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf46:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <Get_SerialNum+0x44>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf4c:	4b0e      	ldr	r3, [pc, #56]	; (800cf88 <Get_SerialNum+0x48>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf52:	4b0e      	ldr	r3, [pc, #56]	; (800cf8c <Get_SerialNum+0x4c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf58:	68fa      	ldr	r2, [r7, #12]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf66:	2208      	movs	r2, #8
 800cf68:	4909      	ldr	r1, [pc, #36]	; (800cf90 <Get_SerialNum+0x50>)
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 f814 	bl	800cf98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf70:	2204      	movs	r2, #4
 800cf72:	4908      	ldr	r1, [pc, #32]	; (800cf94 <Get_SerialNum+0x54>)
 800cf74:	68b8      	ldr	r0, [r7, #8]
 800cf76:	f000 f80f 	bl	800cf98 <IntToUnicode>
  }
}
 800cf7a:	bf00      	nop
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	1fff7590 	.word	0x1fff7590
 800cf88:	1fff7594 	.word	0x1fff7594
 800cf8c:	1fff7598 	.word	0x1fff7598
 800cf90:	20000172 	.word	0x20000172
 800cf94:	20000182 	.word	0x20000182

0800cf98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
 800cfae:	e027      	b.n	800d000 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	0f1b      	lsrs	r3, r3, #28
 800cfb4:	2b09      	cmp	r3, #9
 800cfb6:	d80b      	bhi.n	800cfd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	0f1b      	lsrs	r3, r3, #28
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3230      	adds	r2, #48	; 0x30
 800cfca:	b2d2      	uxtb	r2, r2
 800cfcc:	701a      	strb	r2, [r3, #0]
 800cfce:	e00a      	b.n	800cfe6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	0f1b      	lsrs	r3, r3, #28
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	4619      	mov	r1, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	440b      	add	r3, r1
 800cfe0:	3237      	adds	r2, #55	; 0x37
 800cfe2:	b2d2      	uxtb	r2, r2
 800cfe4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfec:	7dfb      	ldrb	r3, [r7, #23]
 800cfee:	005b      	lsls	r3, r3, #1
 800cff0:	3301      	adds	r3, #1
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	4413      	add	r3, r2
 800cff6:	2200      	movs	r2, #0
 800cff8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	3301      	adds	r3, #1
 800cffe:	75fb      	strb	r3, [r7, #23]
 800d000:	7dfa      	ldrb	r2, [r7, #23]
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	429a      	cmp	r2, r3
 800d006:	d3d3      	bcc.n	800cfb0 <IntToUnicode+0x18>
  }
}
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	371c      	adds	r7, #28
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
	...

0800d018 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b094      	sub	sp, #80	; 0x50
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d020:	f107 030c 	add.w	r3, r7, #12
 800d024:	2244      	movs	r2, #68	; 0x44
 800d026:	2100      	movs	r1, #0
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 fafb 	bl	800d624 <memset>
  if(pcdHandle->Instance==USB)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a15      	ldr	r2, [pc, #84]	; (800d088 <HAL_PCD_MspInit+0x70>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d122      	bne.n	800d07e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d03c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d03e:	2300      	movs	r3, #0
 800d040:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d042:	f107 030c 	add.w	r3, r7, #12
 800d046:	4618      	mov	r0, r3
 800d048:	f7fb f93c 	bl	80082c4 <HAL_RCCEx_PeriphCLKConfig>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d052:	f7f4 fe8d 	bl	8001d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d056:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <HAL_PCD_MspInit+0x74>)
 800d058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d05a:	4a0c      	ldr	r2, [pc, #48]	; (800d08c <HAL_PCD_MspInit+0x74>)
 800d05c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d060:	6593      	str	r3, [r2, #88]	; 0x58
 800d062:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <HAL_PCD_MspInit+0x74>)
 800d064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d06a:	60bb      	str	r3, [r7, #8]
 800d06c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d06e:	2200      	movs	r2, #0
 800d070:	2100      	movs	r1, #0
 800d072:	2014      	movs	r0, #20
 800d074:	f7f6 ffa7 	bl	8003fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d078:	2014      	movs	r0, #20
 800d07a:	f7f6 ffbe 	bl	8003ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d07e:	bf00      	nop
 800d080:	3750      	adds	r7, #80	; 0x50
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	40005c00 	.word	0x40005c00
 800d08c:	40021000 	.word	0x40021000

0800d090 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	f7fe fcd6 	bl	800ba58 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d0c6:	78fa      	ldrb	r2, [r7, #3]
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	4413      	add	r3, r2
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	440b      	add	r3, r1
 800d0d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	78fb      	ldrb	r3, [r7, #3]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	f7fe fd10 	bl	800bb02 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d0e2:	bf00      	nop
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b082      	sub	sp, #8
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d0fc:	78fa      	ldrb	r2, [r7, #3]
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	4613      	mov	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	440b      	add	r3, r1
 800d10a:	333c      	adds	r3, #60	; 0x3c
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	78fb      	ldrb	r3, [r7, #3]
 800d110:	4619      	mov	r1, r3
 800d112:	f7fe fd59 	bl	800bbc8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fe fe6d 	bl	800be0c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d132:	bf00      	nop
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d142:	2301      	movs	r3, #1
 800d144:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d001      	beq.n	800d152 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d14e:	f7f4 fe0f 	bl	8001d70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d158:	7bfa      	ldrb	r2, [r7, #15]
 800d15a:	4611      	mov	r1, r2
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fe17 	bl	800bd90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe fdc3 	bl	800bcf4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d16e:	bf00      	nop
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
	...

0800d178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fe12 	bl	800bdb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d005      	beq.n	800d1a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d194:	4b04      	ldr	r3, [pc, #16]	; (800d1a8 <HAL_PCD_SuspendCallback+0x30>)
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	4a03      	ldr	r2, [pc, #12]	; (800d1a8 <HAL_PCD_SuspendCallback+0x30>)
 800d19a:	f043 0306 	orr.w	r3, r3, #6
 800d19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	e000ed00 	.word	0xe000ed00

0800d1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d007      	beq.n	800d1cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1bc:	4b08      	ldr	r3, [pc, #32]	; (800d1e0 <HAL_PCD_ResumeCallback+0x34>)
 800d1be:	691b      	ldr	r3, [r3, #16]
 800d1c0:	4a07      	ldr	r2, [pc, #28]	; (800d1e0 <HAL_PCD_ResumeCallback+0x34>)
 800d1c2:	f023 0306 	bic.w	r3, r3, #6
 800d1c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d1c8:	f000 f9fa 	bl	800d5c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fe02 	bl	800bddc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	e000ed00 	.word	0xe000ed00

0800d1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d1ec:	4a2b      	ldr	r2, [pc, #172]	; (800d29c <USBD_LL_Init+0xb8>)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a29      	ldr	r2, [pc, #164]	; (800d29c <USBD_LL_Init+0xb8>)
 800d1f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d1fc:	4b27      	ldr	r3, [pc, #156]	; (800d29c <USBD_LL_Init+0xb8>)
 800d1fe:	4a28      	ldr	r2, [pc, #160]	; (800d2a0 <USBD_LL_Init+0xbc>)
 800d200:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d202:	4b26      	ldr	r3, [pc, #152]	; (800d29c <USBD_LL_Init+0xb8>)
 800d204:	2208      	movs	r2, #8
 800d206:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d208:	4b24      	ldr	r3, [pc, #144]	; (800d29c <USBD_LL_Init+0xb8>)
 800d20a:	2202      	movs	r2, #2
 800d20c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d20e:	4b23      	ldr	r3, [pc, #140]	; (800d29c <USBD_LL_Init+0xb8>)
 800d210:	2202      	movs	r2, #2
 800d212:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d214:	4b21      	ldr	r3, [pc, #132]	; (800d29c <USBD_LL_Init+0xb8>)
 800d216:	2200      	movs	r2, #0
 800d218:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d21a:	4b20      	ldr	r3, [pc, #128]	; (800d29c <USBD_LL_Init+0xb8>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d220:	4b1e      	ldr	r3, [pc, #120]	; (800d29c <USBD_LL_Init+0xb8>)
 800d222:	2200      	movs	r2, #0
 800d224:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d226:	4b1d      	ldr	r3, [pc, #116]	; (800d29c <USBD_LL_Init+0xb8>)
 800d228:	2200      	movs	r2, #0
 800d22a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d22c:	481b      	ldr	r0, [pc, #108]	; (800d29c <USBD_LL_Init+0xb8>)
 800d22e:	f7f8 fd6a 	bl	8005d06 <HAL_PCD_Init>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d238:	f7f4 fd9a 	bl	8001d70 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d242:	2318      	movs	r3, #24
 800d244:	2200      	movs	r2, #0
 800d246:	2100      	movs	r1, #0
 800d248:	f7fa fa23 	bl	8007692 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d252:	2358      	movs	r3, #88	; 0x58
 800d254:	2200      	movs	r2, #0
 800d256:	2180      	movs	r1, #128	; 0x80
 800d258:	f7fa fa1b 	bl	8007692 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d262:	23c0      	movs	r3, #192	; 0xc0
 800d264:	2200      	movs	r2, #0
 800d266:	2181      	movs	r1, #129	; 0x81
 800d268:	f7fa fa13 	bl	8007692 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d272:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d276:	2200      	movs	r2, #0
 800d278:	2101      	movs	r1, #1
 800d27a:	f7fa fa0a 	bl	8007692 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d284:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d288:	2200      	movs	r2, #0
 800d28a:	2182      	movs	r1, #130	; 0x82
 800d28c:	f7fa fa01 	bl	8007692 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20001164 	.word	0x20001164
 800d2a0:	40005c00 	.word	0x40005c00

0800d2a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7f8 fe08 	bl	8005ed0 <HAL_PCD_Start>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f000 f980 	bl	800d5cc <USBD_Get_USB_Status>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	4608      	mov	r0, r1
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	70fb      	strb	r3, [r7, #3]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70bb      	strb	r3, [r7, #2]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d302:	78bb      	ldrb	r3, [r7, #2]
 800d304:	883a      	ldrh	r2, [r7, #0]
 800d306:	78f9      	ldrb	r1, [r7, #3]
 800d308:	f7f8 ff50 	bl	80061ac <HAL_PCD_EP_Open>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d310:	7bfb      	ldrb	r3, [r7, #15]
 800d312:	4618      	mov	r0, r3
 800d314:	f000 f95a 	bl	800d5cc <USBD_Get_USB_Status>
 800d318:	4603      	mov	r3, r0
 800d31a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	460b      	mov	r3, r1
 800d330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d340:	78fa      	ldrb	r2, [r7, #3]
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f7f8 ff97 	bl	8006278 <HAL_PCD_EP_Close>
 800d34a:	4603      	mov	r3, r0
 800d34c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d34e:	7bfb      	ldrb	r3, [r7, #15]
 800d350:	4618      	mov	r0, r3
 800d352:	f000 f93b 	bl	800d5cc <USBD_Get_USB_Status>
 800d356:	4603      	mov	r3, r0
 800d358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d370:	2300      	movs	r3, #0
 800d372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d37e:	78fa      	ldrb	r2, [r7, #3]
 800d380:	4611      	mov	r1, r2
 800d382:	4618      	mov	r0, r3
 800d384:	f7f9 f858 	bl	8006438 <HAL_PCD_EP_SetStall>
 800d388:	4603      	mov	r3, r0
 800d38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 f91c 	bl	800d5cc <USBD_Get_USB_Status>
 800d394:	4603      	mov	r3, r0
 800d396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d398:	7bbb      	ldrb	r3, [r7, #14]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3bc:	78fa      	ldrb	r2, [r7, #3]
 800d3be:	4611      	mov	r1, r2
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f9 f88b 	bl	80064dc <HAL_PCD_EP_ClrStall>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f000 f8fd 	bl	800d5cc <USBD_Get_USB_Status>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	da0c      	bge.n	800d416 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3fc:	78fb      	ldrb	r3, [r7, #3]
 800d3fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	00db      	lsls	r3, r3, #3
 800d40e:	440b      	add	r3, r1
 800d410:	3302      	adds	r3, #2
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	e00b      	b.n	800d42e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d416:	78fb      	ldrb	r3, [r7, #3]
 800d418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d41c:	68f9      	ldr	r1, [r7, #12]
 800d41e:	4613      	mov	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	440b      	add	r3, r1
 800d428:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d42c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d454:	78fa      	ldrb	r2, [r7, #3]
 800d456:	4611      	mov	r1, r2
 800d458:	4618      	mov	r0, r3
 800d45a:	f7f8 fe82 	bl	8006162 <HAL_PCD_SetAddress>
 800d45e:	4603      	mov	r3, r0
 800d460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d462:	7bfb      	ldrb	r3, [r7, #15]
 800d464:	4618      	mov	r0, r3
 800d466:	f000 f8b1 	bl	800d5cc <USBD_Get_USB_Status>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	607a      	str	r2, [r7, #4]
 800d482:	603b      	str	r3, [r7, #0]
 800d484:	460b      	mov	r3, r1
 800d486:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d496:	7af9      	ldrb	r1, [r7, #11]
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	f7f8 ff89 	bl	80063b2 <HAL_PCD_EP_Transmit>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 f890 	bl	800d5cc <USBD_Get_USB_Status>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3718      	adds	r7, #24
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b086      	sub	sp, #24
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	603b      	str	r3, [r7, #0]
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4d8:	7af9      	ldrb	r1, [r7, #11]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	f7f8 ff13 	bl	8006308 <HAL_PCD_EP_Receive>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 f86f 	bl	800d5cc <USBD_Get_USB_Status>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3718      	adds	r7, #24
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	460b      	mov	r3, r1
 800d506:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d50e:	78fa      	ldrb	r2, [r7, #3]
 800d510:	4611      	mov	r1, r2
 800d512:	4618      	mov	r0, r3
 800d514:	f7f8 ff35 	bl	8006382 <HAL_PCD_EP_GetRxCount>
 800d518:	4603      	mov	r3, r0
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d530:	78fb      	ldrb	r3, [r7, #3]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <HAL_PCDEx_LPM_Callback+0x18>
 800d536:	2b01      	cmp	r3, #1
 800d538:	d013      	beq.n	800d562 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d53a:	e023      	b.n	800d584 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d007      	beq.n	800d554 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d544:	f000 f83c 	bl	800d5c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d548:	4b10      	ldr	r3, [pc, #64]	; (800d58c <HAL_PCDEx_LPM_Callback+0x68>)
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	4a0f      	ldr	r2, [pc, #60]	; (800d58c <HAL_PCDEx_LPM_Callback+0x68>)
 800d54e:	f023 0306 	bic.w	r3, r3, #6
 800d552:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fe fc3e 	bl	800bddc <USBD_LL_Resume>
    break;
 800d560:	e010      	b.n	800d584 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe fc21 	bl	800bdb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d005      	beq.n	800d582 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d576:	4b05      	ldr	r3, [pc, #20]	; (800d58c <HAL_PCDEx_LPM_Callback+0x68>)
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	4a04      	ldr	r2, [pc, #16]	; (800d58c <HAL_PCDEx_LPM_Callback+0x68>)
 800d57c:	f043 0306 	orr.w	r3, r3, #6
 800d580:	6113      	str	r3, [r2, #16]
    break;
 800d582:	bf00      	nop
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	e000ed00 	.word	0xe000ed00

0800d590 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d598:	4b03      	ldr	r3, [pc, #12]	; (800d5a8 <USBD_static_malloc+0x18>)
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	370c      	adds	r7, #12
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	20001458 	.word	0x20001458

0800d5ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]

}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d5c4:	f7f3 ffe0 	bl	8001588 <SystemClock_Config>
}
 800d5c8:	bf00      	nop
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	2b03      	cmp	r3, #3
 800d5de:	d817      	bhi.n	800d610 <USBD_Get_USB_Status+0x44>
 800d5e0:	a201      	add	r2, pc, #4	; (adr r2, 800d5e8 <USBD_Get_USB_Status+0x1c>)
 800d5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e6:	bf00      	nop
 800d5e8:	0800d5f9 	.word	0x0800d5f9
 800d5ec:	0800d5ff 	.word	0x0800d5ff
 800d5f0:	0800d605 	.word	0x0800d605
 800d5f4:	0800d60b 	.word	0x0800d60b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d5fc:	e00b      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5fe:	2303      	movs	r3, #3
 800d600:	73fb      	strb	r3, [r7, #15]
    break;
 800d602:	e008      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d604:	2301      	movs	r3, #1
 800d606:	73fb      	strb	r3, [r7, #15]
    break;
 800d608:	e005      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d60a:	2303      	movs	r3, #3
 800d60c:	73fb      	strb	r3, [r7, #15]
    break;
 800d60e:	e002      	b.n	800d616 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d610:	2303      	movs	r3, #3
 800d612:	73fb      	strb	r3, [r7, #15]
    break;
 800d614:	bf00      	nop
  }
  return usb_status;
 800d616:	7bfb      	ldrb	r3, [r7, #15]
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <memset>:
 800d624:	4402      	add	r2, r0
 800d626:	4603      	mov	r3, r0
 800d628:	4293      	cmp	r3, r2
 800d62a:	d100      	bne.n	800d62e <memset+0xa>
 800d62c:	4770      	bx	lr
 800d62e:	f803 1b01 	strb.w	r1, [r3], #1
 800d632:	e7f9      	b.n	800d628 <memset+0x4>

0800d634 <__errno>:
 800d634:	4b01      	ldr	r3, [pc, #4]	; (800d63c <__errno+0x8>)
 800d636:	6818      	ldr	r0, [r3, #0]
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	200001d8 	.word	0x200001d8

0800d640 <__libc_init_array>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	4d0d      	ldr	r5, [pc, #52]	; (800d678 <__libc_init_array+0x38>)
 800d644:	4c0d      	ldr	r4, [pc, #52]	; (800d67c <__libc_init_array+0x3c>)
 800d646:	1b64      	subs	r4, r4, r5
 800d648:	10a4      	asrs	r4, r4, #2
 800d64a:	2600      	movs	r6, #0
 800d64c:	42a6      	cmp	r6, r4
 800d64e:	d109      	bne.n	800d664 <__libc_init_array+0x24>
 800d650:	4d0b      	ldr	r5, [pc, #44]	; (800d680 <__libc_init_array+0x40>)
 800d652:	4c0c      	ldr	r4, [pc, #48]	; (800d684 <__libc_init_array+0x44>)
 800d654:	f000 fa4e 	bl	800daf4 <_init>
 800d658:	1b64      	subs	r4, r4, r5
 800d65a:	10a4      	asrs	r4, r4, #2
 800d65c:	2600      	movs	r6, #0
 800d65e:	42a6      	cmp	r6, r4
 800d660:	d105      	bne.n	800d66e <__libc_init_array+0x2e>
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	f855 3b04 	ldr.w	r3, [r5], #4
 800d668:	4798      	blx	r3
 800d66a:	3601      	adds	r6, #1
 800d66c:	e7ee      	b.n	800d64c <__libc_init_array+0xc>
 800d66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d672:	4798      	blx	r3
 800d674:	3601      	adds	r6, #1
 800d676:	e7f2      	b.n	800d65e <__libc_init_array+0x1e>
 800d678:	0800dbbc 	.word	0x0800dbbc
 800d67c:	0800dbbc 	.word	0x0800dbbc
 800d680:	0800dbbc 	.word	0x0800dbbc
 800d684:	0800dbc0 	.word	0x0800dbc0

0800d688 <memcpy>:
 800d688:	440a      	add	r2, r1
 800d68a:	4291      	cmp	r1, r2
 800d68c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d690:	d100      	bne.n	800d694 <memcpy+0xc>
 800d692:	4770      	bx	lr
 800d694:	b510      	push	{r4, lr}
 800d696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d69e:	4291      	cmp	r1, r2
 800d6a0:	d1f9      	bne.n	800d696 <memcpy+0xe>
 800d6a2:	bd10      	pop	{r4, pc}
 800d6a4:	0000      	movs	r0, r0
	...

0800d6a8 <log>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	ed2d 8b02 	vpush	{d8}
 800d6ae:	ec55 4b10 	vmov	r4, r5, d0
 800d6b2:	f000 f865 	bl	800d780 <__ieee754_log>
 800d6b6:	4622      	mov	r2, r4
 800d6b8:	462b      	mov	r3, r5
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	4629      	mov	r1, r5
 800d6be:	eeb0 8a40 	vmov.f32	s16, s0
 800d6c2:	eef0 8a60 	vmov.f32	s17, s1
 800d6c6:	f7f3 f9fd 	bl	8000ac4 <__aeabi_dcmpun>
 800d6ca:	b998      	cbnz	r0, 800d6f4 <log+0x4c>
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	f7f3 f9ec 	bl	8000ab0 <__aeabi_dcmpgt>
 800d6d8:	b960      	cbnz	r0, 800d6f4 <log+0x4c>
 800d6da:	2200      	movs	r2, #0
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7f3 f9bd 	bl	8000a60 <__aeabi_dcmpeq>
 800d6e6:	b160      	cbz	r0, 800d702 <log+0x5a>
 800d6e8:	f7ff ffa4 	bl	800d634 <__errno>
 800d6ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800d718 <log+0x70>
 800d6f0:	2322      	movs	r3, #34	; 0x22
 800d6f2:	6003      	str	r3, [r0, #0]
 800d6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d6f8:	eef0 0a68 	vmov.f32	s1, s17
 800d6fc:	ecbd 8b02 	vpop	{d8}
 800d700:	bd38      	pop	{r3, r4, r5, pc}
 800d702:	f7ff ff97 	bl	800d634 <__errno>
 800d706:	ecbd 8b02 	vpop	{d8}
 800d70a:	2321      	movs	r3, #33	; 0x21
 800d70c:	6003      	str	r3, [r0, #0]
 800d70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d712:	4803      	ldr	r0, [pc, #12]	; (800d720 <log+0x78>)
 800d714:	f000 b808 	b.w	800d728 <nan>
 800d718:	00000000 	.word	0x00000000
 800d71c:	fff00000 	.word	0xfff00000
 800d720:	0800dbb8 	.word	0x0800dbb8
 800d724:	00000000 	.word	0x00000000

0800d728 <nan>:
 800d728:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d730 <nan+0x8>
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	00000000 	.word	0x00000000
 800d734:	7ff80000 	.word	0x7ff80000

0800d738 <roundf>:
 800d738:	ee10 0a10 	vmov	r0, s0
 800d73c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d740:	3a7f      	subs	r2, #127	; 0x7f
 800d742:	2a16      	cmp	r2, #22
 800d744:	dc15      	bgt.n	800d772 <roundf+0x3a>
 800d746:	2a00      	cmp	r2, #0
 800d748:	da08      	bge.n	800d75c <roundf+0x24>
 800d74a:	3201      	adds	r2, #1
 800d74c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d750:	d101      	bne.n	800d756 <roundf+0x1e>
 800d752:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d756:	ee00 3a10 	vmov	s0, r3
 800d75a:	4770      	bx	lr
 800d75c:	4907      	ldr	r1, [pc, #28]	; (800d77c <roundf+0x44>)
 800d75e:	4111      	asrs	r1, r2
 800d760:	4208      	tst	r0, r1
 800d762:	d0fa      	beq.n	800d75a <roundf+0x22>
 800d764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d768:	4113      	asrs	r3, r2
 800d76a:	4403      	add	r3, r0
 800d76c:	ea23 0301 	bic.w	r3, r3, r1
 800d770:	e7f1      	b.n	800d756 <roundf+0x1e>
 800d772:	2a80      	cmp	r2, #128	; 0x80
 800d774:	d1f1      	bne.n	800d75a <roundf+0x22>
 800d776:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d77a:	4770      	bx	lr
 800d77c:	007fffff 	.word	0x007fffff

0800d780 <__ieee754_log>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	ec51 0b10 	vmov	r0, r1, d0
 800d788:	ed2d 8b04 	vpush	{d8-d9}
 800d78c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d790:	b083      	sub	sp, #12
 800d792:	460d      	mov	r5, r1
 800d794:	da29      	bge.n	800d7ea <__ieee754_log+0x6a>
 800d796:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d79a:	4303      	orrs	r3, r0
 800d79c:	ee10 2a10 	vmov	r2, s0
 800d7a0:	d10c      	bne.n	800d7bc <__ieee754_log+0x3c>
 800d7a2:	49cf      	ldr	r1, [pc, #828]	; (800dae0 <__ieee754_log+0x360>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	f7f3 f81b 	bl	80007e4 <__aeabi_ddiv>
 800d7ae:	ec41 0b10 	vmov	d0, r0, r1
 800d7b2:	b003      	add	sp, #12
 800d7b4:	ecbd 8b04 	vpop	{d8-d9}
 800d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7bc:	2900      	cmp	r1, #0
 800d7be:	da05      	bge.n	800d7cc <__ieee754_log+0x4c>
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	f7f2 fd2d 	bl	8000220 <__aeabi_dsub>
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e7ee      	b.n	800d7aa <__ieee754_log+0x2a>
 800d7cc:	4bc5      	ldr	r3, [pc, #788]	; (800dae4 <__ieee754_log+0x364>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f7f2 fede 	bl	8000590 <__aeabi_dmul>
 800d7d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d7d8:	460d      	mov	r5, r1
 800d7da:	4ac3      	ldr	r2, [pc, #780]	; (800dae8 <__ieee754_log+0x368>)
 800d7dc:	4295      	cmp	r5, r2
 800d7de:	dd06      	ble.n	800d7ee <__ieee754_log+0x6e>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	f7f2 fd1e 	bl	8000224 <__adddf3>
 800d7e8:	e7e1      	b.n	800d7ae <__ieee754_log+0x2e>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e7f5      	b.n	800d7da <__ieee754_log+0x5a>
 800d7ee:	152c      	asrs	r4, r5, #20
 800d7f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d7f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d7f8:	441c      	add	r4, r3
 800d7fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d7fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d806:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d80a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d80e:	ea42 0105 	orr.w	r1, r2, r5
 800d812:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d816:	2200      	movs	r2, #0
 800d818:	4bb4      	ldr	r3, [pc, #720]	; (800daec <__ieee754_log+0x36c>)
 800d81a:	f7f2 fd01 	bl	8000220 <__aeabi_dsub>
 800d81e:	1cab      	adds	r3, r5, #2
 800d820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d824:	2b02      	cmp	r3, #2
 800d826:	4682      	mov	sl, r0
 800d828:	468b      	mov	fp, r1
 800d82a:	f04f 0200 	mov.w	r2, #0
 800d82e:	dc53      	bgt.n	800d8d8 <__ieee754_log+0x158>
 800d830:	2300      	movs	r3, #0
 800d832:	f7f3 f915 	bl	8000a60 <__aeabi_dcmpeq>
 800d836:	b1d0      	cbz	r0, 800d86e <__ieee754_log+0xee>
 800d838:	2c00      	cmp	r4, #0
 800d83a:	f000 8122 	beq.w	800da82 <__ieee754_log+0x302>
 800d83e:	4620      	mov	r0, r4
 800d840:	f7f2 fe3c 	bl	80004bc <__aeabi_i2d>
 800d844:	a390      	add	r3, pc, #576	; (adr r3, 800da88 <__ieee754_log+0x308>)
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	4606      	mov	r6, r0
 800d84c:	460f      	mov	r7, r1
 800d84e:	f7f2 fe9f 	bl	8000590 <__aeabi_dmul>
 800d852:	a38f      	add	r3, pc, #572	; (adr r3, 800da90 <__ieee754_log+0x310>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	4604      	mov	r4, r0
 800d85a:	460d      	mov	r5, r1
 800d85c:	4630      	mov	r0, r6
 800d85e:	4639      	mov	r1, r7
 800d860:	f7f2 fe96 	bl	8000590 <__aeabi_dmul>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4620      	mov	r0, r4
 800d86a:	4629      	mov	r1, r5
 800d86c:	e7ba      	b.n	800d7e4 <__ieee754_log+0x64>
 800d86e:	a38a      	add	r3, pc, #552	; (adr r3, 800da98 <__ieee754_log+0x318>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	4650      	mov	r0, sl
 800d876:	4659      	mov	r1, fp
 800d878:	f7f2 fe8a 	bl	8000590 <__aeabi_dmul>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	2000      	movs	r0, #0
 800d882:	499b      	ldr	r1, [pc, #620]	; (800daf0 <__ieee754_log+0x370>)
 800d884:	f7f2 fccc 	bl	8000220 <__aeabi_dsub>
 800d888:	4652      	mov	r2, sl
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	465b      	mov	r3, fp
 800d890:	4650      	mov	r0, sl
 800d892:	4659      	mov	r1, fp
 800d894:	f7f2 fe7c 	bl	8000590 <__aeabi_dmul>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	4630      	mov	r0, r6
 800d89e:	4639      	mov	r1, r7
 800d8a0:	f7f2 fe76 	bl	8000590 <__aeabi_dmul>
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	460f      	mov	r7, r1
 800d8a8:	b914      	cbnz	r4, 800d8b0 <__ieee754_log+0x130>
 800d8aa:	4632      	mov	r2, r6
 800d8ac:	463b      	mov	r3, r7
 800d8ae:	e0a2      	b.n	800d9f6 <__ieee754_log+0x276>
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f7f2 fe03 	bl	80004bc <__aeabi_i2d>
 800d8b6:	a374      	add	r3, pc, #464	; (adr r3, 800da88 <__ieee754_log+0x308>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4680      	mov	r8, r0
 800d8be:	4689      	mov	r9, r1
 800d8c0:	f7f2 fe66 	bl	8000590 <__aeabi_dmul>
 800d8c4:	a372      	add	r3, pc, #456	; (adr r3, 800da90 <__ieee754_log+0x310>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	460d      	mov	r5, r1
 800d8ce:	4640      	mov	r0, r8
 800d8d0:	4649      	mov	r1, r9
 800d8d2:	f7f2 fe5d 	bl	8000590 <__aeabi_dmul>
 800d8d6:	e0a7      	b.n	800da28 <__ieee754_log+0x2a8>
 800d8d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8dc:	f7f2 fca2 	bl	8000224 <__adddf3>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4650      	mov	r0, sl
 800d8e6:	4659      	mov	r1, fp
 800d8e8:	f7f2 ff7c 	bl	80007e4 <__aeabi_ddiv>
 800d8ec:	ec41 0b18 	vmov	d8, r0, r1
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f7f2 fde3 	bl	80004bc <__aeabi_i2d>
 800d8f6:	ec53 2b18 	vmov	r2, r3, d8
 800d8fa:	ec41 0b19 	vmov	d9, r0, r1
 800d8fe:	ec51 0b18 	vmov	r0, r1, d8
 800d902:	f7f2 fe45 	bl	8000590 <__aeabi_dmul>
 800d906:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d90a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4680      	mov	r8, r0
 800d916:	4689      	mov	r9, r1
 800d918:	f7f2 fe3a 	bl	8000590 <__aeabi_dmul>
 800d91c:	a360      	add	r3, pc, #384	; (adr r3, 800daa0 <__ieee754_log+0x320>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	f7f2 fe33 	bl	8000590 <__aeabi_dmul>
 800d92a:	a35f      	add	r3, pc, #380	; (adr r3, 800daa8 <__ieee754_log+0x328>)
 800d92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d930:	f7f2 fc78 	bl	8000224 <__adddf3>
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	f7f2 fe2a 	bl	8000590 <__aeabi_dmul>
 800d93c:	a35c      	add	r3, pc, #368	; (adr r3, 800dab0 <__ieee754_log+0x330>)
 800d93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d942:	f7f2 fc6f 	bl	8000224 <__adddf3>
 800d946:	4632      	mov	r2, r6
 800d948:	463b      	mov	r3, r7
 800d94a:	f7f2 fe21 	bl	8000590 <__aeabi_dmul>
 800d94e:	a35a      	add	r3, pc, #360	; (adr r3, 800dab8 <__ieee754_log+0x338>)
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f7f2 fc66 	bl	8000224 <__adddf3>
 800d958:	4642      	mov	r2, r8
 800d95a:	464b      	mov	r3, r9
 800d95c:	f7f2 fe18 	bl	8000590 <__aeabi_dmul>
 800d960:	a357      	add	r3, pc, #348	; (adr r3, 800dac0 <__ieee754_log+0x340>)
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	4680      	mov	r8, r0
 800d968:	4689      	mov	r9, r1
 800d96a:	4630      	mov	r0, r6
 800d96c:	4639      	mov	r1, r7
 800d96e:	f7f2 fe0f 	bl	8000590 <__aeabi_dmul>
 800d972:	a355      	add	r3, pc, #340	; (adr r3, 800dac8 <__ieee754_log+0x348>)
 800d974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d978:	f7f2 fc54 	bl	8000224 <__adddf3>
 800d97c:	4632      	mov	r2, r6
 800d97e:	463b      	mov	r3, r7
 800d980:	f7f2 fe06 	bl	8000590 <__aeabi_dmul>
 800d984:	a352      	add	r3, pc, #328	; (adr r3, 800dad0 <__ieee754_log+0x350>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fc4b 	bl	8000224 <__adddf3>
 800d98e:	4632      	mov	r2, r6
 800d990:	463b      	mov	r3, r7
 800d992:	f7f2 fdfd 	bl	8000590 <__aeabi_dmul>
 800d996:	460b      	mov	r3, r1
 800d998:	4602      	mov	r2, r0
 800d99a:	4649      	mov	r1, r9
 800d99c:	4640      	mov	r0, r8
 800d99e:	f7f2 fc41 	bl	8000224 <__adddf3>
 800d9a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d9a6:	9b01      	ldr	r3, [sp, #4]
 800d9a8:	3551      	adds	r5, #81	; 0x51
 800d9aa:	431d      	orrs	r5, r3
 800d9ac:	2d00      	cmp	r5, #0
 800d9ae:	4680      	mov	r8, r0
 800d9b0:	4689      	mov	r9, r1
 800d9b2:	dd48      	ble.n	800da46 <__ieee754_log+0x2c6>
 800d9b4:	4b4e      	ldr	r3, [pc, #312]	; (800daf0 <__ieee754_log+0x370>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	4650      	mov	r0, sl
 800d9ba:	4659      	mov	r1, fp
 800d9bc:	f7f2 fde8 	bl	8000590 <__aeabi_dmul>
 800d9c0:	4652      	mov	r2, sl
 800d9c2:	465b      	mov	r3, fp
 800d9c4:	f7f2 fde4 	bl	8000590 <__aeabi_dmul>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	460f      	mov	r7, r1
 800d9d0:	4640      	mov	r0, r8
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	f7f2 fc26 	bl	8000224 <__adddf3>
 800d9d8:	ec53 2b18 	vmov	r2, r3, d8
 800d9dc:	f7f2 fdd8 	bl	8000590 <__aeabi_dmul>
 800d9e0:	4680      	mov	r8, r0
 800d9e2:	4689      	mov	r9, r1
 800d9e4:	b964      	cbnz	r4, 800da00 <__ieee754_log+0x280>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	f7f2 fc17 	bl	8000220 <__aeabi_dsub>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4650      	mov	r0, sl
 800d9f8:	4659      	mov	r1, fp
 800d9fa:	f7f2 fc11 	bl	8000220 <__aeabi_dsub>
 800d9fe:	e6d6      	b.n	800d7ae <__ieee754_log+0x2e>
 800da00:	a321      	add	r3, pc, #132	; (adr r3, 800da88 <__ieee754_log+0x308>)
 800da02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da06:	ec51 0b19 	vmov	r0, r1, d9
 800da0a:	f7f2 fdc1 	bl	8000590 <__aeabi_dmul>
 800da0e:	a320      	add	r3, pc, #128	; (adr r3, 800da90 <__ieee754_log+0x310>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	4604      	mov	r4, r0
 800da16:	460d      	mov	r5, r1
 800da18:	ec51 0b19 	vmov	r0, r1, d9
 800da1c:	f7f2 fdb8 	bl	8000590 <__aeabi_dmul>
 800da20:	4642      	mov	r2, r8
 800da22:	464b      	mov	r3, r9
 800da24:	f7f2 fbfe 	bl	8000224 <__adddf3>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	4630      	mov	r0, r6
 800da2e:	4639      	mov	r1, r7
 800da30:	f7f2 fbf6 	bl	8000220 <__aeabi_dsub>
 800da34:	4652      	mov	r2, sl
 800da36:	465b      	mov	r3, fp
 800da38:	f7f2 fbf2 	bl	8000220 <__aeabi_dsub>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	4620      	mov	r0, r4
 800da42:	4629      	mov	r1, r5
 800da44:	e7d9      	b.n	800d9fa <__ieee754_log+0x27a>
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	4650      	mov	r0, sl
 800da4c:	4659      	mov	r1, fp
 800da4e:	f7f2 fbe7 	bl	8000220 <__aeabi_dsub>
 800da52:	ec53 2b18 	vmov	r2, r3, d8
 800da56:	f7f2 fd9b 	bl	8000590 <__aeabi_dmul>
 800da5a:	4606      	mov	r6, r0
 800da5c:	460f      	mov	r7, r1
 800da5e:	2c00      	cmp	r4, #0
 800da60:	f43f af23 	beq.w	800d8aa <__ieee754_log+0x12a>
 800da64:	a308      	add	r3, pc, #32	; (adr r3, 800da88 <__ieee754_log+0x308>)
 800da66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6a:	ec51 0b19 	vmov	r0, r1, d9
 800da6e:	f7f2 fd8f 	bl	8000590 <__aeabi_dmul>
 800da72:	a307      	add	r3, pc, #28	; (adr r3, 800da90 <__ieee754_log+0x310>)
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	ec51 0b19 	vmov	r0, r1, d9
 800da80:	e727      	b.n	800d8d2 <__ieee754_log+0x152>
 800da82:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800dad8 <__ieee754_log+0x358>
 800da86:	e694      	b.n	800d7b2 <__ieee754_log+0x32>
 800da88:	fee00000 	.word	0xfee00000
 800da8c:	3fe62e42 	.word	0x3fe62e42
 800da90:	35793c76 	.word	0x35793c76
 800da94:	3dea39ef 	.word	0x3dea39ef
 800da98:	55555555 	.word	0x55555555
 800da9c:	3fd55555 	.word	0x3fd55555
 800daa0:	df3e5244 	.word	0xdf3e5244
 800daa4:	3fc2f112 	.word	0x3fc2f112
 800daa8:	96cb03de 	.word	0x96cb03de
 800daac:	3fc74664 	.word	0x3fc74664
 800dab0:	94229359 	.word	0x94229359
 800dab4:	3fd24924 	.word	0x3fd24924
 800dab8:	55555593 	.word	0x55555593
 800dabc:	3fe55555 	.word	0x3fe55555
 800dac0:	d078c69f 	.word	0xd078c69f
 800dac4:	3fc39a09 	.word	0x3fc39a09
 800dac8:	1d8e78af 	.word	0x1d8e78af
 800dacc:	3fcc71c5 	.word	0x3fcc71c5
 800dad0:	9997fa04 	.word	0x9997fa04
 800dad4:	3fd99999 	.word	0x3fd99999
	...
 800dae0:	c3500000 	.word	0xc3500000
 800dae4:	43500000 	.word	0x43500000
 800dae8:	7fefffff 	.word	0x7fefffff
 800daec:	3ff00000 	.word	0x3ff00000
 800daf0:	3fe00000 	.word	0x3fe00000

0800daf4 <_init>:
 800daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf6:	bf00      	nop
 800daf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dafa:	bc08      	pop	{r3}
 800dafc:	469e      	mov	lr, r3
 800dafe:	4770      	bx	lr

0800db00 <_fini>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	bf00      	nop
 800db04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db06:	bc08      	pop	{r3}
 800db08:	469e      	mov	lr, r3
 800db0a:	4770      	bx	lr
