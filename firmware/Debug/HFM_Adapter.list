
HFM_Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009454  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009684  08009684  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08009684  08009684  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009684  08009684  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800968c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  2000018c  08009818  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014b8  08009818  000214b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016134  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038fd  00000000  00000000  00036333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  00039c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0f  00000000  00000000  0003aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000530f  00000000  00000000  0003bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a166  00000000  00000000  00040ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf5f3  00000000  00000000  0005b164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cb0  00000000  00000000  0012a758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009614 	.word	0x08009614

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08009614 	.word	0x08009614

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb45 	bl	80008aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f816 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f952 	bl	80004cc <MX_GPIO_Init>
  MX_ADC2_Init();
 8000228:	f000 f85e 	bl	80002e8 <MX_ADC2_Init>
  MX_DAC1_Init();
 800022c:	f000 f8c2 	bl	80003b4 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000230:	f000 f904 	bl	800043c <MX_I2C2_Init>
  MX_USB_Device_Init();
 8000234:	f008 fc72 	bl	8008b1c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  AT24CXX_Init();
 8000238:	f000 f994 	bl	8000564 <AT24CXX_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (received_data)
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <main+0x34>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0fb      	beq.n	800023c <main+0x24>
	  {
		  // do stuff with new received data....
		  received_data = false;
 8000244:	4b01      	ldr	r3, [pc, #4]	; (800024c <main+0x34>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
	  if (received_data)
 800024a:	e7f7      	b.n	800023c <main+0x24>
 800024c:	20000da2 	.word	0x20000da2

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2238      	movs	r2, #56	; 0x38
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f009 f99e 	bl	80095a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000272:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000276:	f003 fdcd 	bl	8003e14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800027a:	2321      	movs	r3, #33	; 0x21
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	2303      	movs	r3, #3
 800028e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000290:	2302      	movs	r3, #2
 8000292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000294:	2318      	movs	r3, #24
 8000296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000298:	2302      	movs	r3, #2
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029c:	2302      	movs	r3, #2
 800029e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a0:	2302      	movs	r3, #2
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0318 	add.w	r3, r7, #24
 80002a8:	4618      	mov	r0, r3
 80002aa:	f003 fe57 	bl	8003f5c <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002b4:	f000 f974 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2303      	movs	r3, #3
 80002be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2104      	movs	r1, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f004 f95b 	bl	800458c <HAL_RCC_ClockConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002dc:	f000 f960 	bl	80005a0 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3750      	adds	r7, #80	; 0x50
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	463b      	mov	r3, r7
 80002f0:	2220      	movs	r2, #32
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f009 f953 	bl	80095a0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002fa:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC2_Init+0xc0>)
 80002fc:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <MX_ADC2_Init+0xc4>)
 80002fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000302:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000306:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC2_Init+0xc0>)
 800030a:	2208      	movs	r2, #8
 800030c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000314:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <MX_ADC2_Init+0xc0>)
 800031c:	2200      	movs	r2, #0
 800031e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000322:	2204      	movs	r2, #4
 8000324:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000328:	2200      	movs	r2, #0
 800032a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_ADC2_Init+0xc0>)
 800032e:	2200      	movs	r2, #0
 8000330:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000332:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000334:	2201      	movs	r2, #1
 8000336:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC2_Init+0xc0>)
 800033a:	2200      	movs	r2, #0
 800033c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000342:	2200      	movs	r2, #0
 8000344:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000348:	2200      	movs	r2, #0
 800034a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_ADC2_Init+0xc0>)
 800034e:	2200      	movs	r2, #0
 8000350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000356:	2200      	movs	r2, #0
 8000358:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_ADC2_Init+0xc0>)
 800035c:	2200      	movs	r2, #0
 800035e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000364:	f000 fd0e 	bl	8000d84 <HAL_ADC_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800036e:	f000 f917 	bl	80005a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_ADC2_Init+0xc8>)
 8000374:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800038a:	463b      	mov	r3, r7
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC2_Init+0xc0>)
 8000390:	f000 fe82 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800039a:	f000 f901 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200001a8 	.word	0x200001a8
 80003ac:	50000100 	.word	0x50000100
 80003b0:	04300002 	.word	0x04300002

080003b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08c      	sub	sp, #48	; 0x30
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003ba:	463b      	mov	r3, r7
 80003bc:	2230      	movs	r2, #48	; 0x30
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f009 f8ed 	bl	80095a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003c6:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_DAC1_Init+0x80>)
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <MX_DAC1_Init+0x84>)
 80003ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003cc:	4819      	ldr	r0, [pc, #100]	; (8000434 <MX_DAC1_Init+0x80>)
 80003ce:	f001 fb62 	bl	8001a96 <HAL_DAC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003d8:	f000 f8e2 	bl	80005a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80003dc:	2302      	movs	r3, #2
 80003de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <MX_DAC1_Init+0x80>)
 8000408:	f001 fb68 	bl	8001adc <HAL_DAC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000412:	f000 f8c5 	bl	80005a0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000416:	463b      	mov	r3, r7
 8000418:	2210      	movs	r2, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_DAC1_Init+0x80>)
 800041e:	f001 fb5d 	bl	8001adc <HAL_DAC_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000428:	f000 f8ba 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3730      	adds	r7, #48	; 0x30
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000214 	.word	0x20000214
 8000438:	50000800 	.word	0x50000800

0800043c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <MX_I2C2_Init+0x80>)
 8000442:	4a1f      	ldr	r2, [pc, #124]	; (80004c0 <MX_I2C2_Init+0x84>)
 8000444:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0070215B;
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <MX_I2C2_Init+0x80>)
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <MX_I2C2_Init+0x88>)
 800044a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <MX_I2C2_Init+0x80>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000452:	4b1a      	ldr	r3, [pc, #104]	; (80004bc <MX_I2C2_Init+0x80>)
 8000454:	2201      	movs	r2, #1
 8000456:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <MX_I2C2_Init+0x80>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <MX_I2C2_Init+0x80>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <MX_I2C2_Init+0x80>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <MX_I2C2_Init+0x80>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <MX_I2C2_Init+0x80>)
 8000472:	2200      	movs	r2, #0
 8000474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <MX_I2C2_Init+0x80>)
 8000478:	f001 fe72 	bl	8002160 <HAL_I2C_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000482:	f000 f88d 	bl	80005a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000486:	2100      	movs	r1, #0
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <MX_I2C2_Init+0x80>)
 800048a:	f001 fef8 	bl	800227e <HAL_I2CEx_ConfigAnalogFilter>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000494:	f000 f884 	bl	80005a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000498:	2100      	movs	r1, #0
 800049a:	4808      	ldr	r0, [pc, #32]	; (80004bc <MX_I2C2_Init+0x80>)
 800049c:	f001 ff3a 	bl	8002314 <HAL_I2CEx_ConfigDigitalFilter>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 f87b 	bl	80005a0 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C2);
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <MX_I2C2_Init+0x8c>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <MX_I2C2_Init+0x8c>)
 80004b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000228 	.word	0x20000228
 80004c0:	40005800 	.word	0x40005800
 80004c4:	0070215b 	.word	0x0070215b
 80004c8:	40010000 	.word	0x40010000

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_GPIO_Init+0x90>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a1d      	ldr	r2, [pc, #116]	; (800055c <MX_GPIO_Init+0x90>)
 80004e8:	f043 0320 	orr.w	r3, r3, #32
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_GPIO_Init+0x90>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0320 	and.w	r3, r3, #32
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_GPIO_Init+0x90>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a17      	ldr	r2, [pc, #92]	; (800055c <MX_GPIO_Init+0x90>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_GPIO_Init+0x90>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_GPIO_Init+0x90>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <MX_GPIO_Init+0x90>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_GPIO_Init+0x90>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0x94>)
 8000532:	f001 fdfd 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RUN_Pin */
  GPIO_InitStruct.Pin = RUN_Pin;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x94>)
 8000550:	f001 fc6c 	bl	8001e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400

08000564 <AT24CXX_Init>:

/* USER CODE BEGIN 4 */

static void AT24CXX_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	eeprom_chip.at24cxx_address = 0xA0;
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <AT24CXX_Init+0x34>)
 800056a:	22a0      	movs	r2, #160	; 0xa0
 800056c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	eeprom_chip.at24cxx_page_number = 512;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <AT24CXX_Init+0x34>)
 8000572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000576:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	eeprom_chip.at24cxx_page_size = 64;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <AT24CXX_Init+0x34>)
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	eeprom_chip.i2c_device = hi2c2;
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <AT24CXX_Init+0x34>)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <AT24CXX_Init+0x38>)
 8000586:	4610      	mov	r0, r2
 8000588:	4619      	mov	r1, r3
 800058a:	234c      	movs	r3, #76	; 0x4c
 800058c:	461a      	mov	r2, r3
 800058e:	f009 f833 	bl	80095f8 <memcpy>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000274 	.word	0x20000274
 800059c:	20000228 	.word	0x20000228

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_MspInit+0x44>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6613      	str	r3, [r2, #96]	; 0x60
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_MspInit+0x44>)
 80005c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ce:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <HAL_MspInit+0x44>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	6593      	str	r3, [r2, #88]	; 0x58
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_MspInit+0x44>)
 80005d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09a      	sub	sp, #104	; 0x68
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	2244      	movs	r2, #68	; 0x44
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f008 ffc3 	bl	80095a0 <memset>
  if(hadc->Instance==ADC2)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a1e      	ldr	r2, [pc, #120]	; (8000698 <HAL_ADC_MspInit+0xa4>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d134      	bne.n	800068e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000628:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4618      	mov	r0, r3
 8000636:	f004 f999 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000640:	f7ff ffae 	bl	80005a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_ADC_MspInit+0xa8>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_ADC_MspInit+0xa8>)
 800064a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800064e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_ADC_MspInit+0xa8>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_ADC_MspInit+0xa8>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_ADC_MspInit+0xa8>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_ADC_MspInit+0xa8>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000674:	2303      	movs	r3, #3
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000678:	2303      	movs	r3, #3
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000684:	4619      	mov	r1, r3
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 fbcf 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3768      	adds	r7, #104	; 0x68
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	50000100 	.word	0x50000100
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <HAL_DAC_MspInit+0x74>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d124      	bne.n	800070c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_DAC_MspInit+0x78>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_DAC_MspInit+0x78>)
 80006c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_DAC_MspInit+0x78>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_DAC_MspInit+0x78>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_DAC_MspInit+0x78>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_DAC_MspInit+0x78>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006f2:	2330      	movs	r3, #48	; 0x30
 80006f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f001 fb90 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	50000800 	.word	0x50000800
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09a      	sub	sp, #104	; 0x68
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2244      	movs	r2, #68	; 0x44
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f008 ff2f 	bl	80095a0 <memset>
  if(hi2c->Instance==I2C2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <HAL_I2C_MspInit+0xa8>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d137      	bne.n	80007bc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4618      	mov	r0, r3
 800075a:	f004 f907 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000764:	f7ff ff1c 	bl	80005a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000780:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000784:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000792:	2304      	movs	r3, #4
 8000794:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f001 fb44 	bl	8001e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 80007aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007ae:	6593      	str	r3, [r2, #88]	; 0x58
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_I2C_MspInit+0xac>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007bc:	bf00      	nop
 80007be:	3768      	adds	r7, #104	; 0x68
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40005800 	.word	0x40005800
 80007c8:	40021000 	.word	0x40021000

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f89a 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <USB_LP_IRQHandler+0x10>)
 8000826:	f001 fec8 	bl	80025ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000fa4 	.word	0x20000fa4

08000834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0b      	ldr	r4, [pc, #44]	; (80008a4 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffd7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f008 fe93 	bl	80095b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fcc5 	bl	8000218 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   r0, =_estack
 8000890:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800089c:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 80008a0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80008a4:	200014b8 	.word	0x200014b8

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>

080008aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f001 f8af 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f80e 	bl	80008dc <HAL_InitTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e001      	b.n	80008d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008cc:	f7ff fe6e 	bl	80005ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d0:	79fb      	ldrb	r3, [r7, #7]

}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_InitTick+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d022      	beq.n	8000936 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_InitTick+0x6c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_InitTick+0x68>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f001 f8ba 	bl	8001a7e <HAL_SYSTICK_Config>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10f      	bne.n	8000930 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b0f      	cmp	r3, #15
 8000914:	d809      	bhi.n	800092a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	2200      	movs	r2, #0
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
 800091e:	f001 f886 	bl	8001a2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_InitTick+0x70>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	e007      	b.n	800093a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e004      	b.n	800093a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e001      	b.n	800093a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000008 	.word	0x20000008
 8000948:	20000000 	.word	0x20000000
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_IncTick+0x1c>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x20>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a03      	ldr	r2, [pc, #12]	; (800096c <HAL_IncTick+0x1c>)
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200002c8 	.word	0x200002c8
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200002c8 	.word	0x200002c8

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff ffee 	bl	8000974 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d004      	beq.n	80009b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_Delay+0x40>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b0:	bf00      	nop
 80009b2:	f7ff ffdf 	bl	8000974 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d8f7      	bhi.n	80009b2 <HAL_Delay+0x26>
  {
  }
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000008 	.word	0x20000008

080009d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	609a      	str	r2, [r3, #8]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3360      	adds	r3, #96	; 0x60
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <LL_ADC_SetOffset+0x44>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a70:	bf00      	nop
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	03fff000 	.word	0x03fff000

08000a80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3360      	adds	r3, #96	; 0x60
 8000a8e:	461a      	mov	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3360      	adds	r3, #96	; 0x60
 8000abc:	461a      	mov	r2, r3
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ad6:	bf00      	nop
 8000ad8:	371c      	adds	r7, #28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b087      	sub	sp, #28
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3360      	adds	r3, #96	; 0x60
 8000af2:	461a      	mov	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	431a      	orrs	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000b0c:	bf00      	nop
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3360      	adds	r3, #96	; 0x60
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	615a      	str	r2, [r3, #20]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3330      	adds	r3, #48	; 0x30
 8000b84:	461a      	mov	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	4413      	add	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	f003 031f 	and.w	r3, r3, #31
 8000b9e:	211f      	movs	r1, #31
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	0e9b      	lsrs	r3, r3, #26
 8000bac:	f003 011f 	and.w	r1, r3, #31
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	f003 031f 	and.w	r3, r3, #31
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bc0:	bf00      	nop
 8000bc2:	371c      	adds	r7, #28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3314      	adds	r3, #20
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	0e5b      	lsrs	r3, r3, #25
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	4413      	add	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	0d1b      	lsrs	r3, r3, #20
 8000bf4:	f003 031f 	and.w	r3, r3, #31
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	401a      	ands	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	0d1b      	lsrs	r3, r3, #20
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c16:	bf00      	nop
 8000c18:	371c      	adds	r7, #28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d10a      	bne.n	8000c4e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	407f0000 	.word	0x407f0000

08000c74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6093      	str	r3, [r2, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cac:	d101      	bne.n	8000cb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cfc:	d101      	bne.n	8000d02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d101      	bne.n	8000d28 <LL_ADC_IsEnabled+0x18>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <LL_ADC_IsEnabled+0x1a>
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d101      	bne.n	8000d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	2b08      	cmp	r3, #8
 8000d6e:	d101      	bne.n	8000d74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e177      	b.n	800108e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fc21 	bl	80005f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff67 	bl	8000c98 <LL_ADC_IsDeepPowerDownEnabled>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d004      	beq.n	8000dda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff4d 	bl	8000c74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff82 	bl	8000ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d115      	bne.n	8000e16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff66 	bl	8000cc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000df4:	4b9c      	ldr	r3, [pc, #624]	; (8001068 <HAL_ADC_Init+0x2e4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	099b      	lsrs	r3, r3, #6
 8000dfa:	4a9c      	ldr	r2, [pc, #624]	; (800106c <HAL_ADC_Init+0x2e8>)
 8000dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000e00:	099b      	lsrs	r3, r3, #6
 8000e02:	3301      	adds	r3, #1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e08:	e002      	b.n	8000e10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f9      	bne.n	8000e0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff64 	bl	8000ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10d      	bne.n	8000e42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2a:	f043 0210 	orr.w	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff75 	bl	8000d36 <LL_ADC_REG_IsConversionOngoing>
 8000e4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 8110 	bne.w	800107c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 810c 	bne.w	800107c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e6c:	f043 0202 	orr.w	r2, r3, #2
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff49 	bl	8000d10 <LL_ADC_IsEnabled>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d111      	bne.n	8000ea8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e88:	f7ff ff42 	bl	8000d10 <LL_ADC_IsEnabled>
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	4878      	ldr	r0, [pc, #480]	; (8001070 <HAL_ADC_Init+0x2ec>)
 8000e90:	f7ff ff3e 	bl	8000d10 <LL_ADC_IsEnabled>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4323      	orrs	r3, r4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4874      	ldr	r0, [pc, #464]	; (8001074 <HAL_ADC_Init+0x2f0>)
 8000ea4:	f7ff fd94 	bl	80009d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f5b      	ldrb	r3, [r3, #29]
 8000eac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000eb2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000eb8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ebe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ec6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d106      	bne.n	8000ee4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	3b01      	subs	r3, #1
 8000edc:	045b      	lsls	r3, r3, #17
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	4b5c      	ldr	r3, [pc, #368]	; (8001078 <HAL_ADC_Init+0x2f4>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	69b9      	ldr	r1, [r7, #24]
 8000f10:	430b      	orrs	r3, r1
 8000f12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff01 	bl	8000d36 <LL_ADC_REG_IsConversionOngoing>
 8000f34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff0e 	bl	8000d5c <LL_ADC_INJ_IsConversionOngoing>
 8000f40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d16d      	bne.n	8001024 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d16a      	bne.n	8001024 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f52:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f5a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f6a:	f023 0302 	bic.w	r3, r3, #2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	430b      	orrs	r3, r1
 8000f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d017      	beq.n	8000fb0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6911      	ldr	r1, [r2, #16]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000fae:	e013      	b.n	8000fd8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d118      	bne.n	8001014 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ff8:	4311      	orrs	r1, r2
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ffe:	4311      	orrs	r1, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001004:	430a      	orrs	r2, r1
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0201 	orr.w	r2, r2, #1
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	e007      	b.n	8001024 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10c      	bne.n	8001046 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f023 010f 	bic.w	r1, r3, #15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
 8001044:	e007      	b.n	8001056 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 020f 	bic.w	r2, r2, #15
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	65da      	str	r2, [r3, #92]	; 0x5c
 8001066:	e011      	b.n	800108c <HAL_ADC_Init+0x308>
 8001068:	20000000 	.word	0x20000000
 800106c:	053e2d63 	.word	0x053e2d63
 8001070:	50000100 	.word	0x50000100
 8001074:	50000300 	.word	0x50000300
 8001078:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	f043 0210 	orr.w	r2, r3, #16
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800108c:	7ffb      	ldrb	r3, [r7, #31]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop

08001098 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0b6      	sub	sp, #216	; 0xd8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x22>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e3c8      	b.n	800184c <HAL_ADC_ConfigChannel+0x7b4>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe35 	bl	8000d36 <LL_ADC_REG_IsConversionOngoing>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f040 83ad 	bne.w	800182e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	f7ff fd47 	bl	8000b74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe23 	bl	8000d36 <LL_ADC_REG_IsConversionOngoing>
 80010f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe2f 	bl	8000d5c <LL_ADC_INJ_IsConversionOngoing>
 80010fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001102:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 81d9 	bne.w	80014be <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800110c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001110:	2b00      	cmp	r3, #0
 8001112:	f040 81d4 	bne.w	80014be <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800111e:	d10f      	bne.n	8001140 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fd4e 	bl	8000bcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fd08 	bl	8000b4e <LL_ADC_SetSamplingTimeCommonConfig>
 800113e:	e00e      	b.n	800115e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6819      	ldr	r1, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	461a      	mov	r2, r3
 800114e:	f7ff fd3d 	bl	8000bcc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fcf8 	bl	8000b4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d022      	beq.n	80011c6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6919      	ldr	r1, [r3, #16]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001190:	f7ff fc52 	bl	8000a38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6919      	ldr	r1, [r3, #16]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f7ff fc9e 	bl	8000ae2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	7f1b      	ldrb	r3, [r3, #28]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d102      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x124>
 80011b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ba:	e000      	b.n	80011be <HAL_ADC_ConfigChannel+0x126>
 80011bc:	2300      	movs	r3, #0
 80011be:	461a      	mov	r2, r3
 80011c0:	f7ff fcaa 	bl	8000b18 <LL_ADC_SetOffsetSaturation>
 80011c4:	e17b      	b.n	80014be <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fc57 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10a      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x15a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fc4c 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	0e9b      	lsrs	r3, r3, #26
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	e01e      	b.n	8001230 <HAL_ADC_ConfigChannel+0x198>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fc41 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001214:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001220:	2320      	movs	r3, #32
 8001222:	e004      	b.n	800122e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x1b0>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0e9b      	lsrs	r3, r3, #26
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	e018      	b.n	800127a <HAL_ADC_ConfigChannel+0x1e2>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800125c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800126c:	2320      	movs	r3, #32
 800126e:	e004      	b.n	800127a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001270:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800127a:	429a      	cmp	r2, r3
 800127c:	d106      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fc10 	bl	8000aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fbf4 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10a      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x220>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2101      	movs	r1, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fbe9 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	0e9b      	lsrs	r3, r3, #26
 80012b2:	f003 021f 	and.w	r2, r3, #31
 80012b6:	e01e      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x25e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fbde 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80012e6:	2320      	movs	r3, #32
 80012e8:	e004      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80012ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <HAL_ADC_ConfigChannel+0x276>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0e9b      	lsrs	r3, r3, #26
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	e018      	b.n	8001340 <HAL_ADC_ConfigChannel+0x2a8>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001322:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800132a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001332:	2320      	movs	r3, #32
 8001334:	e004      	b.n	8001340 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001340:	429a      	cmp	r2, r3
 8001342:	d106      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2200      	movs	r2, #0
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fbad 	bl	8000aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2102      	movs	r1, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fb91 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10a      	bne.n	800137e <HAL_ADC_ConfigChannel+0x2e6>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb86 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	0e9b      	lsrs	r3, r3, #26
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	e01e      	b.n	80013bc <HAL_ADC_ConfigChannel+0x324>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2102      	movs	r1, #2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fb7b 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800139c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80013a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80013ac:	2320      	movs	r3, #32
 80013ae:	e004      	b.n	80013ba <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80013b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x33c>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0e9b      	lsrs	r3, r3, #26
 80013ce:	f003 031f 	and.w	r3, r3, #31
 80013d2:	e016      	b.n	8001402 <HAL_ADC_ConfigChannel+0x36a>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80013f4:	2320      	movs	r3, #32
 80013f6:	e004      	b.n	8001402 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80013f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001402:	429a      	cmp	r2, r3
 8001404:	d106      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	2102      	movs	r1, #2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fb4c 	bl	8000aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2103      	movs	r1, #3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb30 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10a      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x3a8>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2103      	movs	r1, #3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb25 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	0e9b      	lsrs	r3, r3, #26
 800143a:	f003 021f 	and.w	r2, r3, #31
 800143e:	e017      	b.n	8001470 <HAL_ADC_ConfigChannel+0x3d8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2103      	movs	r1, #3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb1a 	bl	8000a80 <LL_ADC_GetOffsetChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800145a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800145c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001462:	2320      	movs	r3, #32
 8001464:	e003      	b.n	800146e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x3f0>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0e9b      	lsrs	r3, r3, #26
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	e011      	b.n	80014ac <HAL_ADC_ConfigChannel+0x414>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001490:	fa93 f3a3 	rbit	r3, r3
 8001494:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001498:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800149a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80014a0:	2320      	movs	r3, #32
 80014a2:	e003      	b.n	80014ac <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80014a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d106      	bne.n	80014be <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	2103      	movs	r1, #3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff faf7 	bl	8000aac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fc24 	bl	8000d10 <LL_ADC_IsEnabled>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 8140 	bne.w	8001750 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	461a      	mov	r2, r3
 80014de:	f7ff fba1 	bl	8000c24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4a8f      	ldr	r2, [pc, #572]	; (8001724 <HAL_ADC_ConfigChannel+0x68c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	f040 8131 	bne.w	8001750 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10b      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x47e>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	0e9b      	lsrs	r3, r3, #26
 8001504:	3301      	adds	r3, #1
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	2b09      	cmp	r3, #9
 800150c:	bf94      	ite	ls
 800150e:	2301      	movls	r3, #1
 8001510:	2300      	movhi	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	e019      	b.n	800154a <HAL_ADC_ConfigChannel+0x4b2>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001526:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800152e:	2320      	movs	r3, #32
 8001530:	e003      	b.n	800153a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2b09      	cmp	r3, #9
 8001542:	bf94      	ite	ls
 8001544:	2301      	movls	r3, #1
 8001546:	2300      	movhi	r3, #0
 8001548:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800154a:	2b00      	cmp	r3, #0
 800154c:	d079      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <HAL_ADC_ConfigChannel+0x4d2>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0e9b      	lsrs	r3, r3, #26
 8001560:	3301      	adds	r3, #1
 8001562:	069b      	lsls	r3, r3, #26
 8001564:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001568:	e015      	b.n	8001596 <HAL_ADC_ConfigChannel+0x4fe>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800157a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001582:	2320      	movs	r3, #32
 8001584:	e003      	b.n	800158e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3301      	adds	r3, #1
 8001590:	069b      	lsls	r3, r3, #26
 8001592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x51e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0e9b      	lsrs	r3, r3, #26
 80015a8:	3301      	adds	r3, #1
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	e017      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x54e>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80015ce:	2320      	movs	r3, #32
 80015d0:	e003      	b.n	80015da <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80015d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	ea42 0103 	orr.w	r1, r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10a      	bne.n	800160c <HAL_ADC_ConfigChannel+0x574>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0e9b      	lsrs	r3, r3, #26
 80015fc:	3301      	adds	r3, #1
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	051b      	lsls	r3, r3, #20
 800160a:	e018      	b.n	800163e <HAL_ADC_ConfigChannel+0x5a6>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001624:	2320      	movs	r3, #32
 8001626:	e003      	b.n	8001630 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f003 021f 	and.w	r2, r3, #31
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800163e:	430b      	orrs	r3, r1
 8001640:	e081      	b.n	8001746 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800164a:	2b00      	cmp	r3, #0
 800164c:	d107      	bne.n	800165e <HAL_ADC_ConfigChannel+0x5c6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0e9b      	lsrs	r3, r3, #26
 8001654:	3301      	adds	r3, #1
 8001656:	069b      	lsls	r3, r3, #26
 8001658:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800165c:	e015      	b.n	800168a <HAL_ADC_ConfigChannel+0x5f2>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001676:	2320      	movs	r3, #32
 8001678:	e003      	b.n	8001682 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	069b      	lsls	r3, r3, #26
 8001686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x612>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0e9b      	lsrs	r3, r3, #26
 800169c:	3301      	adds	r3, #1
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	e017      	b.n	80016da <HAL_ADC_ConfigChannel+0x642>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	61fb      	str	r3, [r7, #28]
  return result;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80016c2:	2320      	movs	r3, #32
 80016c4:	e003      	b.n	80016ce <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	ea42 0103 	orr.w	r1, r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10d      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x66e>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	3301      	adds	r3, #1
 80016f2:	f003 021f 	and.w	r2, r3, #31
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	3b1e      	subs	r3, #30
 80016fe:	051b      	lsls	r3, r3, #20
 8001700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001704:	e01e      	b.n	8001744 <HAL_ADC_ConfigChannel+0x6ac>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	613b      	str	r3, [r7, #16]
  return result;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d104      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800171e:	2320      	movs	r3, #32
 8001720:	e006      	b.n	8001730 <HAL_ADC_ConfigChannel+0x698>
 8001722:	bf00      	nop
 8001724:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f003 021f 	and.w	r2, r3, #31
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3b1e      	subs	r3, #30
 800173e:	051b      	lsls	r3, r3, #20
 8001740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001744:	430b      	orrs	r3, r1
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	6892      	ldr	r2, [r2, #8]
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff fa3e 	bl	8000bcc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_ADC_ConfigChannel+0x7bc>)
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d071      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800175c:	483e      	ldr	r0, [pc, #248]	; (8001858 <HAL_ADC_ConfigChannel+0x7c0>)
 800175e:	f7ff f95d 	bl	8000a1c <LL_ADC_GetCommonPathInternalCh>
 8001762:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a3c      	ldr	r2, [pc, #240]	; (800185c <HAL_ADC_ConfigChannel+0x7c4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d004      	beq.n	800177a <HAL_ADC_ConfigChannel+0x6e2>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <HAL_ADC_ConfigChannel+0x7c8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d127      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800177a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800177e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d121      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800178e:	d157      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001798:	4619      	mov	r1, r3
 800179a:	482f      	ldr	r0, [pc, #188]	; (8001858 <HAL_ADC_ConfigChannel+0x7c0>)
 800179c:	f7ff f92b 	bl	80009f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_ADC_ConfigChannel+0x7cc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	4a30      	ldr	r2, [pc, #192]	; (8001868 <HAL_ADC_ConfigChannel+0x7d0>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017ba:	e002      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017c8:	e03a      	b.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_ADC_ConfigChannel+0x7d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d113      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x764>
 80017d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <HAL_ADC_ConfigChannel+0x7d8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d02a      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f2:	4619      	mov	r1, r3
 80017f4:	4818      	ldr	r0, [pc, #96]	; (8001858 <HAL_ADC_ConfigChannel+0x7c0>)
 80017f6:	f7ff f8fe 	bl	80009f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017fa:	e021      	b.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <HAL_ADC_ConfigChannel+0x7dc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11c      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a16      	ldr	r2, [pc, #88]	; (8001870 <HAL_ADC_ConfigChannel+0x7d8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d011      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800181c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001824:	4619      	mov	r1, r3
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <HAL_ADC_ConfigChannel+0x7c0>)
 8001828:	f7ff f8e5 	bl	80009f6 <LL_ADC_SetCommonPathInternalCh>
 800182c:	e008      	b.n	8001840 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	f043 0220 	orr.w	r2, r3, #32
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001848:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800184c:	4618      	mov	r0, r3
 800184e:	37d8      	adds	r7, #216	; 0xd8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	80080000 	.word	0x80080000
 8001858:	50000300 	.word	0x50000300
 800185c:	c3210000 	.word	0xc3210000
 8001860:	90c00010 	.word	0x90c00010
 8001864:	20000000 	.word	0x20000000
 8001868:	053e2d63 	.word	0x053e2d63
 800186c:	c7520000 	.word	0xc7520000
 8001870:	50000100 	.word	0x50000100
 8001874:	cb840000 	.word	0xcb840000

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff40 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff90 	bl	800196c <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5f 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff33 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa4 	bl	80019d4 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e014      	b.n	8001ad2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	791b      	ldrb	r3, [r3, #4]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d105      	bne.n	8001abe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe fdf1 	bl	80006a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	795b      	ldrb	r3, [r3, #5]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_DAC_ConfigChannel+0x18>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e192      	b.n	8001e1a <HAL_DAC_ConfigChannel+0x33e>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2202      	movs	r2, #2
 8001afe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d174      	bne.n	8001bf2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b08:	f7fe ff34 	bl	8000974 <HAL_GetTick>
 8001b0c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d134      	bne.n	8001b7e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b14:	e011      	b.n	8001b3a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b16:	f7fe ff2d 	bl	8000974 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d90a      	bls.n	8001b3a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f043 0208 	orr.w	r2, r3, #8
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2203      	movs	r2, #3
 8001b34:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e16f      	b.n	8001e1a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e6      	bne.n	8001b16 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f7fe ff1f 	bl	800098c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
 8001b58:	e01e      	b.n	8001b98 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b5a:	f7fe ff0b 	bl	8000974 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d90a      	bls.n	8001b7e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f043 0208 	orr.w	r2, r3, #8
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2203      	movs	r2, #3
 8001b78:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e14d      	b.n	8001e1a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dbe8      	blt.n	8001b5a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7fe feff 	bl	800098c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	ea02 0103 	and.w	r1, r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	21ff      	movs	r1, #255	; 0xff
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	ea02 0103 	and.w	r1, r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	409a      	lsls	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d11d      	bne.n	8001c36 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	4013      	ands	r3, r2
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2207      	movs	r2, #7
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4e:	4013      	ands	r3, r2
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	e00f      	b.n	8001c80 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	e008      	b.n	8001c80 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001c76:	2301      	movs	r3, #1
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	e001      	b.n	8001c80 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	6a3a      	ldr	r2, [r7, #32]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_DAC_ConfigChannel+0x1d8>
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	e000      	b.n	8001cb6 <HAL_DAC_ConfigChannel+0x1da>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cce:	4013      	ands	r3, r2
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	795b      	ldrb	r3, [r3, #5]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d102      	bne.n	8001ce0 <HAL_DAC_ConfigChannel+0x204>
 8001cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cde:	e000      	b.n	8001ce2 <HAL_DAC_ConfigChannel+0x206>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d114      	bne.n	8001d22 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001cf8:	f002 fde6 	bl	80048c8 <HAL_RCC_GetHCLKFreq>
 8001cfc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_DAC_ConfigChannel+0x348>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d904      	bls.n	8001d10 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0e:	e00f      	b.n	8001d30 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <HAL_DAC_ConfigChannel+0x34c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d90a      	bls.n	8001d2e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e006      	b.n	8001d30 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e000      	b.n	8001d30 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001d2e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	4013      	ands	r3, r2
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6819      	ldr	r1, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	22c0      	movs	r2, #192	; 0xc0
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43da      	mvns	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	ea02 0103 	and.w	r1, r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	09896800 	.word	0x09896800
 8001e28:	04c4b400 	.word	0x04c4b400

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e3a:	e15a      	b.n	80020f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2101      	movs	r1, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 814c 	beq.w	80020ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d005      	beq.n	8001e6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d130      	bne.n	8001ece <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 0201 	and.w	r2, r3, #1
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d017      	beq.n	8001f0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d123      	bne.n	8001f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	6939      	ldr	r1, [r7, #16]
 8001f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0203 	and.w	r2, r3, #3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80a6 	beq.w	80020ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa0:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6613      	str	r3, [r2, #96]	; 0x60
 8001fac:	4b58      	ldr	r3, [pc, #352]	; (8002110 <HAL_GPIO_Init+0x2e4>)
 8001fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb8:	4a56      	ldr	r2, [pc, #344]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe2:	d01f      	beq.n	8002024 <HAL_GPIO_Init+0x1f8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_GPIO_Init+0x2ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d019      	beq.n	8002020 <HAL_GPIO_Init+0x1f4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a4b      	ldr	r2, [pc, #300]	; (800211c <HAL_GPIO_Init+0x2f0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x1f0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	; (8002120 <HAL_GPIO_Init+0x2f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1ec>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a49      	ldr	r2, [pc, #292]	; (8002124 <HAL_GPIO_Init+0x2f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1e8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a48      	ldr	r2, [pc, #288]	; (8002128 <HAL_GPIO_Init+0x2fc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1e4>
 800200c:	2305      	movs	r3, #5
 800200e:	e00a      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002010:	2306      	movs	r3, #6
 8002012:	e008      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002014:	2304      	movs	r3, #4
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002018:	2303      	movs	r3, #3
 800201a:	e004      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 800201c:	2302      	movs	r3, #2
 800201e:	e002      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_GPIO_Init+0x1fa>
 8002024:	2300      	movs	r3, #0
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	f002 0203 	and.w	r2, r2, #3
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	4093      	lsls	r3, r2
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002036:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_GPIO_Init+0x2e8>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_GPIO_Init+0x300>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002068:	4a30      	ldr	r2, [pc, #192]	; (800212c <HAL_GPIO_Init+0x300>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800206e:	4b2f      	ldr	r3, [pc, #188]	; (800212c <HAL_GPIO_Init+0x300>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002092:	4a26      	ldr	r2, [pc, #152]	; (800212c <HAL_GPIO_Init+0x300>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_GPIO_Init+0x300>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_GPIO_Init+0x300>)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_GPIO_Init+0x300>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_GPIO_Init+0x300>)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f ae9d 	bne.w	8001e3c <HAL_GPIO_Init+0x10>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000
 8002114:	40010000 	.word	0x40010000
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800
 8002120:	48000c00 	.word	0x48000c00
 8002124:	48001000 	.word	0x48001000
 8002128:	48001400 	.word	0x48001400
 800212c:	40010400 	.word	0x40010400

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e081      	b.n	8002276 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fac8 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e006      	b.n	80021e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d104      	bne.n	80021fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	d138      	bne.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800229e:	2302      	movs	r3, #2
 80022a0:	e032      	b.n	8002308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2224      	movs	r2, #36	; 0x24
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d139      	bne.n	800239e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002334:	2302      	movs	r3, #2
 8002336:	e033      	b.n	80023a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	; 0x24
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002366:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	b08b      	sub	sp, #44	; 0x2c
 80023b0:	af06      	add	r7, sp, #24
 80023b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0d7      	b.n	800256e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f006 fdde 	bl	8008f94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fcc8 	bl	8004d7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e04c      	b.n	800248a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3301      	adds	r3, #1
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	b298      	uxth	r0, r3
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	3336      	adds	r3, #54	; 0x36
 800242e:	4602      	mov	r2, r0
 8002430:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3303      	adds	r3, #3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3338      	adds	r3, #56	; 0x38
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	333c      	adds	r3, #60	; 0x3c
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	3340      	adds	r3, #64	; 0x40
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	3301      	adds	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	d3ad      	bcc.n	80023f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e044      	b.n	8002524 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	440b      	add	r3, r1
 80024d4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	440b      	add	r3, r1
 8002500:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3301      	adds	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	d3b5      	bcc.n	800249a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	687e      	ldr	r6, [r7, #4]
 8002536:	466d      	mov	r5, sp
 8002538:	f106 0410 	add.w	r4, r6, #16
 800253c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	1d33      	adds	r3, r6, #4
 8002546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	f002 fc31 	bl	8004db0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f001 fc29 	bl	8003dbe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002576 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_Start+0x16>
 8002588:	2302      	movs	r3, #2
 800258a:	e012      	b.n	80025b2 <HAL_PCD_Start+0x3c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fbd7 	bl	8004d4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 fdf0 	bl	8007188 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 fdf5 	bl	80071b6 <USB_ReadInterrupts>
 80025cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fb26 	bl	8002c2a <PCD_EP_ISR_Handler>

    return;
 80025de:	e110      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d013      	beq.n	8002612 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	b292      	uxth	r2, r2
 80025fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f006 fd57 	bl	80090b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002608:	2100      	movs	r1, #0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8fc 	bl	8002808 <HAL_PCD_SetAddress>

    return;
 8002610:	e0f7      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002624:	b29a      	uxth	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800262e:	b292      	uxth	r2, r2
 8002630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002634:	e0e5      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002652:	b292      	uxth	r2, r2
 8002654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002658:	e0d3      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d034      	beq.n	80026ce <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	b292      	uxth	r2, r2
 8002678:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002684:	b29a      	uxth	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0208 	bic.w	r2, r2, #8
 800268e:	b292      	uxth	r2, r2
 8002690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026a6:	2100      	movs	r1, #0
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f006 fef9 	bl	80094a0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f006 fd3a 	bl	8009128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026c6:	b292      	uxth	r2, r2
 80026c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026cc:	e099      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d027      	beq.n	8002728 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0208 	orr.w	r2, r2, #8
 80026ea:	b292      	uxth	r2, r2
 80026ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002702:	b292      	uxth	r2, r2
 8002704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002710:	b29a      	uxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0204 	orr.w	r2, r2, #4
 800271a:	b292      	uxth	r2, r2
 800271c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f006 fce7 	bl	80090f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002726:	e06c      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d040      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002744:	b292      	uxth	r2, r2
 8002746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d12b      	bne.n	80027ac <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0204 	orr.w	r2, r2, #4
 8002766:	b292      	uxth	r2, r2
 8002768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0208 	orr.w	r2, r2, #8
 800277e:	b292      	uxth	r2, r2
 8002780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002794:	b29b      	uxth	r3, r3
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027a2:	2101      	movs	r1, #1
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f006 fe7b 	bl	80094a0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80027aa:	e02a      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f006 fca1 	bl	80090f4 <HAL_PCD_SuspendCallback>
    return;
 80027b2:	e026      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00f      	beq.n	80027de <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027d0:	b292      	uxth	r2, r2
 80027d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f006 fc5f 	bl	800909a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027dc:	e011      	b.n	8002802 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00c      	beq.n	8002802 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027fa:	b292      	uxth	r2, r2
 80027fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002800:	bf00      	nop
  }
}
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_PCD_SetAddress+0x1a>
 800281e:	2302      	movs	r3, #2
 8002820:	e013      	b.n	800284a <HAL_PCD_SetAddress+0x42>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f004 fc90 	bl	8007160 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	4608      	mov	r0, r1
 800285c:	4611      	mov	r1, r2
 800285e:	461a      	mov	r2, r3
 8002860:	4603      	mov	r3, r0
 8002862:	70fb      	strb	r3, [r7, #3]
 8002864:	460b      	mov	r3, r1
 8002866:	803b      	strh	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	da0e      	bge.n	8002896 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	705a      	strb	r2, [r3, #1]
 8002894:	e00e      	b.n	80028b4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 0207 	and.w	r2, r3, #7
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028c0:	883a      	ldrh	r2, [r7, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	78ba      	ldrb	r2, [r7, #2]
 80028ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	785b      	ldrb	r3, [r3, #1]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028de:	78bb      	ldrb	r3, [r7, #2]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d102      	bne.n	80028ea <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_EP_Open+0xa6>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e00e      	b.n	8002916 <HAL_PCD_EP_Open+0xc4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f002 fa74 	bl	8004df4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002914:	7afb      	ldrb	r3, [r7, #11]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800292a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800292e:	2b00      	cmp	r3, #0
 8002930:	da0e      	bge.n	8002950 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	705a      	strb	r2, [r3, #1]
 800294e:	e00e      	b.n	800296e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 0207 	and.w	r2, r3, #7
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_PCD_EP_Close+0x6a>
 8002984:	2302      	movs	r3, #2
 8002986:	e00e      	b.n	80029a6 <HAL_PCD_EP_Close+0x88>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68f9      	ldr	r1, [r7, #12]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fdc0 	bl	800551c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	460b      	mov	r3, r1
 80029bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f003 0207 	and.w	r2, r3, #7
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029fa:	7afb      	ldrb	r3, [r7, #11]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 ff73 	bl	80058f6 <USB_EPStartXfer>
 8002a10:	e005      	b.n	8002a1e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6979      	ldr	r1, [r7, #20]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 ff6c 	bl	80058f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 0207 	and.w	r2, r3, #7
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	460b      	mov	r3, r1
 8002a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 ff18 	bl	80058f6 <USB_EPStartXfer>
 8002ac6:	e005      	b.n	8002ad4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 ff11 	bl	80058f6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 0207 	and.w	r2, r3, #7
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d901      	bls.n	8002afc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e03e      	b.n	8002b7a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	da0e      	bge.n	8002b22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	705a      	strb	r2, [r3, #1]
 8002b20:	e00c      	b.n	8002b3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_PCD_EP_SetStall+0x7e>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e00e      	b.n	8002b7a <HAL_PCD_EP_SetStall+0x9c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 f9f9 	bl	8006f62 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d901      	bls.n	8002ba0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e040      	b.n	8002c22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	da0e      	bge.n	8002bc6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	705a      	strb	r2, [r3, #1]
 8002bc4:	e00e      	b.n	8002be4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 0207 	and.w	r2, r3, #7
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_PCD_EP_ClrStall+0x82>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e00e      	b.n	8002c22 <HAL_PCD_EP_ClrStall+0xa0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 f9f6 	bl	8007004 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b096      	sub	sp, #88	; 0x58
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c32:	e39c      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002c4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 815e 	bne.w	8002f14 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d150      	bne.n	8002d06 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	81fb      	strh	r3, [r7, #14]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3328      	adds	r3, #40	; 0x28
 8002c8c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f006 f9cd 	bl	8009066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 834a 	beq.w	800336e <PCD_EP_ISR_Handler+0x744>
 8002cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8345 	bne.w	800336e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d04:	e333      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d032      	beq.n	8002d8a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f004 fa7b 	bl	800725a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d70:	4013      	ands	r3, r2
 8002d72:	823b      	strh	r3, [r7, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	8a3a      	ldrh	r2, [r7, #16]
 8002d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f006 f942 	bl	800900c <HAL_PCD_SetupStageCallback>
 8002d88:	e2f1      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d8a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f280 82ed 	bge.w	800336e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002da0:	4013      	ands	r3, r2
 8002da2:	83fb      	strh	r3, [r7, #30]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	8bfa      	ldrh	r2, [r7, #30]
 8002daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dae:	b292      	uxth	r2, r2
 8002db0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d019      	beq.n	8002e16 <PCD_EP_ISR_Handler+0x1ec>
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d015      	beq.n	8002e16 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df0:	6959      	ldr	r1, [r3, #20]
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f004 fa2d 	bl	800725a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	441a      	add	r2, r3
 8002e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f006 f90d 	bl	8009030 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 82a3 	bne.w	800336e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e4e:	d918      	bls.n	8002e82 <PCD_EP_ISR_Handler+0x258>
 8002e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	647b      	str	r3, [r7, #68]	; 0x44
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <PCD_EP_ISR_Handler+0x240>
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	3b01      	subs	r3, #1
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	029b      	lsls	r3, r3, #10
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	e029      	b.n	8002ed6 <PCD_EP_ISR_Handler+0x2ac>
 8002e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d112      	bne.n	8002eb0 <PCD_EP_ISR_Handler+0x286>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	e012      	b.n	8002ed6 <PCD_EP_ISR_Handler+0x2ac>
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <PCD_EP_ISR_Handler+0x2a0>
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	827b      	strh	r3, [r7, #18]
 8002ee8:	8a7b      	ldrh	r3, [r7, #18]
 8002eea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002eee:	827b      	strh	r3, [r7, #18]
 8002ef0:	8a7b      	ldrh	r3, [r7, #18]
 8002ef2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ef6:	827b      	strh	r3, [r7, #18]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	8a7b      	ldrh	r3, [r7, #18]
 8002efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	8013      	strh	r3, [r2, #0]
 8002f12:	e22c      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f28:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f280 80f6 	bge.w	800311e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f48:	4013      	ands	r3, r2
 8002f4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f68:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	7b1b      	ldrb	r3, [r3, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d123      	bne.n	8002fce <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002faa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002fae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 808e 	beq.w	80030d4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbe:	6959      	ldr	r1, [r3, #20]
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc2:	88da      	ldrh	r2, [r3, #6]
 8002fc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fc8:	f004 f947 	bl	800725a <USB_ReadPMA>
 8002fcc:	e082      	b.n	80030d4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d10a      	bne.n	8002fec <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002fd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f9d3 	bl	800338a <HAL_PCD_EP_DB_Receive>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002fea:	e073      	b.n	80030d4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800301c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003028:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800302c:	b29b      	uxth	r3, r3
 800302e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d022      	beq.n	8003090 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	4413      	add	r3, r2
 8003064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003072:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02c      	beq.n	80030d4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	6959      	ldr	r1, [r3, #20]
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	891a      	ldrh	r2, [r3, #8]
 8003086:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800308a:	f004 f8e6 	bl	800725a <USB_ReadPMA>
 800308e:	e021      	b.n	80030d4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80030b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	6959      	ldr	r1, [r3, #20]
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	895a      	ldrh	r2, [r3, #10]
 80030cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030d0:	f004 f8c3 	bl	800725a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030dc:	441a      	add	r2, r3
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80030e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80030ea:	441a      	add	r2, r3
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <PCD_EP_ISR_Handler+0x4da>
 80030f8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	429a      	cmp	r2, r3
 8003102:	d206      	bcs.n	8003112 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f005 ff90 	bl	8009030 <HAL_PCD_DataOutStageCallback>
 8003110:	e005      	b.n	800311e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fbec 	bl	80058f6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800311e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8121 	beq.w	800336e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800312c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	441a      	add	r2, r3
 800316c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003178:	b29b      	uxth	r3, r3
 800317a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800317c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f000 80a2 	beq.w	80032ca <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	7b1b      	ldrb	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8093 	beq.w	80032bc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003196:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d046      	beq.n	8003230 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a4:	785b      	ldrb	r3, [r3, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d126      	bne.n	80031f8 <PCD_EP_ISR_Handler+0x5ce>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	4413      	add	r3, r2
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	00da      	lsls	r2, r3, #3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	4413      	add	r3, r2
 80031cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031d0:	623b      	str	r3, [r7, #32]
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031dc:	b29a      	uxth	r2, r3
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	801a      	strh	r2, [r3, #0]
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	801a      	strh	r2, [r3, #0]
 80031f6:	e061      	b.n	80032bc <PCD_EP_ISR_Handler+0x692>
 80031f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d15d      	bne.n	80032bc <PCD_EP_ISR_Handler+0x692>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	4413      	add	r3, r2
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	00da      	lsls	r2, r3, #3
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	4413      	add	r3, r2
 8003222:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	2200      	movs	r2, #0
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e045      	b.n	80032bc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003238:	785b      	ldrb	r3, [r3, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d126      	bne.n	800328c <PCD_EP_ISR_Handler+0x662>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	4413      	add	r3, r2
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	00da      	lsls	r2, r3, #3
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	4413      	add	r3, r2
 8003260:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003270:	b29a      	uxth	r2, r3
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	801a      	strh	r2, [r3, #0]
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003284:	b29a      	uxth	r2, r3
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	e017      	b.n	80032bc <PCD_EP_ISR_Handler+0x692>
 800328c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <PCD_EP_ISR_Handler+0x692>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800329c:	b29b      	uxth	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a2:	4413      	add	r3, r2
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	00da      	lsls	r2, r3, #3
 80032ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ae:	4413      	add	r3, r2
 80032b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f005 fecf 	bl	8009066 <HAL_PCD_DataInStageCallback>
 80032c8:	e051      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80032ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d144      	bne.n	8003360 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032de:	b29b      	uxth	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80032fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003306:	429a      	cmp	r2, r3
 8003308:	d907      	bls.n	800331a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003312:	1ad2      	subs	r2, r2, r3
 8003314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003316:	619a      	str	r2, [r3, #24]
 8003318:	e002      	b.n	8003320 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800331a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d106      	bne.n	8003336 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f005 fe99 	bl	8009066 <HAL_PCD_DataInStageCallback>
 8003334:	e01b      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800333e:	441a      	add	r2, r3
 8003340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003342:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800334c:	441a      	add	r2, r3
 800334e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003350:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003358:	4618      	mov	r0, r3
 800335a:	f002 facc 	bl	80058f6 <USB_EPStartXfer>
 800335e:	e006      	b.n	800336e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003360:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003364:	461a      	mov	r2, r3
 8003366:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f917 	bl	800359c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003376:	b29b      	uxth	r3, r3
 8003378:	b21b      	sxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f6ff ac5a 	blt.w	8002c34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3758      	adds	r7, #88	; 0x58
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b088      	sub	sp, #32
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	4613      	mov	r3, r2
 8003396:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d07c      	beq.n	800349c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	4413      	add	r3, r2
 80033bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	8b7b      	ldrh	r3, [r7, #26]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d306      	bcc.n	80033e0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	8b7b      	ldrh	r3, [r7, #26]
 80033d8:	1ad2      	subs	r2, r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	619a      	str	r2, [r3, #24]
 80033de:	e002      	b.n	80033e6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d123      	bne.n	8003436 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	833b      	strh	r3, [r7, #24]
 800340a:	8b3b      	ldrh	r3, [r7, #24]
 800340c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003410:	833b      	strh	r3, [r7, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	8b3b      	ldrh	r3, [r7, #24]
 8003422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01f      	beq.n	8003480 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	82fb      	strh	r3, [r7, #22]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	441a      	add	r2, r3
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003480:	8b7b      	ldrh	r3, [r7, #26]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8085 	beq.w	8003592 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6959      	ldr	r1, [r3, #20]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	891a      	ldrh	r2, [r3, #8]
 8003494:	8b7b      	ldrh	r3, [r7, #26]
 8003496:	f003 fee0 	bl	800725a <USB_ReadPMA>
 800349a:	e07a      	b.n	8003592 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	4413      	add	r3, r2
 80034b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	8b7b      	ldrh	r3, [r7, #26]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d306      	bcc.n	80034da <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	8b7b      	ldrh	r3, [r7, #26]
 80034d2:	1ad2      	subs	r2, r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	619a      	str	r2, [r3, #24]
 80034d8:	e002      	b.n	80034e0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d123      	bne.n	8003530 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	83fb      	strh	r3, [r7, #30]
 8003504:	8bfb      	ldrh	r3, [r7, #30]
 8003506:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800350a:	83fb      	strh	r3, [r7, #30]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	8bfb      	ldrh	r3, [r7, #30]
 800351c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11f      	bne.n	800357a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003554:	83bb      	strh	r3, [r7, #28]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	8bbb      	ldrh	r3, [r7, #28]
 8003566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800357a:	8b7b      	ldrh	r3, [r7, #26]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6959      	ldr	r1, [r3, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	895a      	ldrh	r2, [r3, #10]
 800358c:	8b7b      	ldrh	r3, [r7, #26]
 800358e:	f003 fe64 	bl	800725a <USB_ReadPMA>
    }
  }

  return count;
 8003592:	8b7b      	ldrh	r3, [r7, #26]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0a2      	sub	sp, #136	; 0x88
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 81c5 	beq.w	8003940 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d907      	bls.n	80035fa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035f2:	1ad2      	subs	r2, r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	619a      	str	r2, [r3, #24]
 80035f8:	e002      	b.n	8003600 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f040 80b9 	bne.w	800377c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d126      	bne.n	8003660 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	4413      	add	r3, r2
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	00da      	lsls	r2, r3, #3
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	4413      	add	r3, r2
 8003634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003644:	b29a      	uxth	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003658:	b29a      	uxth	r2, r3
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	e01a      	b.n	8003696 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d116      	bne.n	8003696 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	4413      	add	r3, r2
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	00da      	lsls	r2, r3, #3
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	4413      	add	r3, r2
 800368a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	2200      	movs	r2, #0
 8003694:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d126      	bne.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x156>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4413      	add	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	00da      	lsls	r2, r3, #3
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4413      	add	r3, r2
 80036c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	801a      	strh	r2, [r3, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	801a      	strh	r2, [r3, #0]
 80036f0:	e017      	b.n	8003722 <HAL_PCD_EP_DB_Transmit+0x186>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d113      	bne.n	8003722 <HAL_PCD_EP_DB_Transmit+0x186>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	4413      	add	r3, r2
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	00da      	lsls	r2, r3, #3
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	4413      	add	r3, r2
 8003716:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2200      	movs	r2, #0
 8003720:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	4619      	mov	r1, r3
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f005 fc9c 	bl	8009066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 82d2 	beq.w	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	827b      	strh	r3, [r7, #18]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	8a7b      	ldrh	r3, [r7, #18]
 8003766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003776:	b29b      	uxth	r3, r3
 8003778:	8013      	strh	r3, [r2, #0]
 800377a:	e2b0      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d021      	beq.n	80037ca <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 8284 	bne.w	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037de:	441a      	add	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037ec:	441a      	add	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d309      	bcc.n	8003812 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	621a      	str	r2, [r3, #32]
 8003810:	e015      	b.n	800383e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800381a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800381e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003828:	e009      	b.n	800383e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d155      	bne.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x356>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	63bb      	str	r3, [r7, #56]	; 0x38
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	4413      	add	r3, r2
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00da      	lsls	r2, r3, #3
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	4413      	add	r3, r2
 8003868:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
 800386e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003870:	2b3e      	cmp	r3, #62	; 0x3e
 8003872:	d916      	bls.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x306>
 8003874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	64bb      	str	r3, [r7, #72]	; 0x48
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	3b01      	subs	r3, #1
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388c:	b29b      	uxth	r3, r3
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	b29b      	uxth	r3, r3
 8003892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389a:	b29a      	uxth	r2, r3
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e043      	b.n	800392a <HAL_PCD_EP_DB_Transmit+0x38e>
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d112      	bne.n	80038ce <HAL_PCD_EP_DB_Transmit+0x332>
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	801a      	strh	r2, [r3, #0]
 80038cc:	e02d      	b.n	800392a <HAL_PCD_EP_DB_Transmit+0x38e>
 80038ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d0:	085b      	lsrs	r3, r3, #1
 80038d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_PCD_EP_DB_Transmit+0x348>
 80038de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e0:	3301      	adds	r3, #1
 80038e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	029b      	lsls	r3, r3, #10
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	e01b      	b.n	800392a <HAL_PCD_EP_DB_Transmit+0x38e>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d117      	bne.n	800392a <HAL_PCD_EP_DB_Transmit+0x38e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003908:	b29b      	uxth	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	4413      	add	r3, r2
 8003910:	643b      	str	r3, [r7, #64]	; 0x40
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	00da      	lsls	r2, r3, #3
 8003918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391a:	4413      	add	r3, r2
 800391c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003924:	b29a      	uxth	r2, r3
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6959      	ldr	r1, [r3, #20]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	891a      	ldrh	r2, [r3, #8]
 8003936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003938:	b29b      	uxth	r3, r3
 800393a:	f003 fc4c 	bl	80071d6 <USB_WritePMA>
 800393e:	e1ce      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003948:	b29b      	uxth	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	4413      	add	r3, r2
 800395a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003970:	429a      	cmp	r2, r3
 8003972:	d307      	bcc.n	8003984 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800397c:	1ad2      	subs	r2, r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	619a      	str	r2, [r3, #24]
 8003982:	e002      	b.n	800398a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 80c4 	bne.w	8003b1c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d126      	bne.n	80039ea <HAL_PCD_EP_DB_Transmit+0x44e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b0:	4413      	add	r3, r2
 80039b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00da      	lsls	r2, r3, #3
 80039ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039bc:	4413      	add	r3, r2
 80039be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	e01a      	b.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x484>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d116      	bne.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x484>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	673b      	str	r3, [r7, #112]	; 0x70
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a06:	4413      	add	r3, r2
 8003a08:	673b      	str	r3, [r7, #112]	; 0x70
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	00da      	lsls	r2, r3, #3
 8003a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a12:	4413      	add	r3, r2
 8003a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d12f      	bne.n	8003a8e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a46:	4413      	add	r3, r2
 8003a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00da      	lsls	r2, r3, #3
 8003a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a56:	4413      	add	r3, r2
 8003a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a72:	801a      	strh	r2, [r3, #0]
 8003a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e017      	b.n	8003abe <HAL_PCD_EP_DB_Transmit+0x522>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	785b      	ldrb	r3, [r3, #1]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d113      	bne.n	8003abe <HAL_PCD_EP_DB_Transmit+0x522>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aa4:	4413      	add	r3, r2
 8003aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00da      	lsls	r2, r3, #3
 8003aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ab6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aba:	2200      	movs	r2, #0
 8003abc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f005 face 	bl	8009066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 8104 	bne.w	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
 8003b1a:	e0e0      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d121      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 80b4 	bne.w	8003cde <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b7e:	441a      	add	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d309      	bcc.n	8003bb2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	621a      	str	r2, [r3, #32]
 8003bb0:	e015      	b.n	8003bde <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003bba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bc8:	e009      	b.n	8003bde <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	663b      	str	r3, [r7, #96]	; 0x60
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d155      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c00:	4413      	add	r3, r2
 8003c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	00da      	lsls	r2, r3, #3
 8003c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c12:	657b      	str	r3, [r7, #84]	; 0x54
 8003c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c16:	2b3e      	cmp	r3, #62	; 0x3e
 8003c18:	d916      	bls.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x694>
 8003c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	e040      	b.n	8003cca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d112      	bne.n	8003c74 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5c:	801a      	strh	r2, [r3, #0]
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	e02a      	b.n	8003cca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	677b      	str	r3, [r7, #116]	; 0x74
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c86:	3301      	adds	r3, #1
 8003c88:	677b      	str	r3, [r7, #116]	; 0x74
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	029b      	lsls	r3, r3, #10
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e018      	b.n	8003cca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d114      	bne.n	8003cca <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cae:	4413      	add	r3, r2
 8003cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cba:	4413      	add	r3, r2
 8003cbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6959      	ldr	r1, [r3, #20]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	895a      	ldrh	r2, [r3, #10]
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f003 fa7c 	bl	80071d6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf8:	823b      	strh	r3, [r7, #16]
 8003cfa:	8a3b      	ldrh	r3, [r7, #16]
 8003cfc:	f083 0310 	eor.w	r3, r3, #16
 8003d00:	823b      	strh	r3, [r7, #16]
 8003d02:	8a3b      	ldrh	r3, [r7, #16]
 8003d04:	f083 0320 	eor.w	r3, r3, #32
 8003d08:	823b      	strh	r3, [r7, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	441a      	add	r2, r3
 8003d18:	8a3b      	ldrh	r3, [r7, #16]
 8003d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3788      	adds	r7, #136	; 0x88
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	817b      	strh	r3, [r7, #10]
 8003d46:	4613      	mov	r3, r2
 8003d48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d4a:	897b      	ldrh	r3, [r7, #10]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4413      	add	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e009      	b.n	8003d82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d6e:	897a      	ldrh	r2, [r7, #10]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d82:	893b      	ldrh	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	80da      	strh	r2, [r3, #6]
 8003d96:	e00b      	b.n	8003db0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d141      	bne.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e22:	4b4b      	ldr	r3, [pc, #300]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d131      	bne.n	8003e94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e30:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e36:	4a46      	ldr	r2, [pc, #280]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e48:	4a41      	ldr	r2, [pc, #260]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e50:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2232      	movs	r2, #50	; 0x32
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e66:	e002      	b.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d102      	bne.n	8003e82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f2      	bne.n	8003e68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e8e:	d158      	bne.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e057      	b.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e94:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9a:	4a2d      	ldr	r2, [pc, #180]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ea4:	e04d      	b.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eac:	d141      	bne.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d131      	bne.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec2:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ecc:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2232      	movs	r2, #50	; 0x32
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	0c9b      	lsrs	r3, r3, #18
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef2:	e002      	b.n	8003efa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d102      	bne.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f2      	bne.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d112      	bne.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e011      	b.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f30:	e007      	b.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f3a:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40007000 	.word	0x40007000
 8003f54:	20000000 	.word	0x20000000
 8003f58:	431bde83 	.word	0x431bde83

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e306      	b.n	800457c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d075      	beq.n	8004066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7a:	4b97      	ldr	r3, [pc, #604]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f84:	4b94      	ldr	r3, [pc, #592]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	d102      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3e>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d002      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x44>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05b      	beq.n	8004064 <HAL_RCC_OscConfig+0x108>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d157      	bne.n	8004064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e2e1      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x74>
 8003fc2:	4b85      	ldr	r3, [pc, #532]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a84      	ldr	r2, [pc, #528]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e01d      	b.n	800400c <HAL_RCC_OscConfig+0xb0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x98>
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7e      	ldr	r2, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0xb0>
 8003ff4:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a77      	ldr	r2, [pc, #476]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a74      	ldr	r2, [pc, #464]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fc fcae 	bl	8000974 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fc fcaa 	bl	8000974 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e2a6      	b.n	800457c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0xc0>
 800403a:	e014      	b.n	8004066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fc fc9a 	bl	8000974 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fc fc96 	bl	8000974 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e292      	b.n	800457c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004056:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0xe8>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d075      	beq.n	800415e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004072:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800407c:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d102      	bne.n	8004092 <HAL_RCC_OscConfig+0x136>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d002      	beq.n	8004098 <HAL_RCC_OscConfig+0x13c>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d11f      	bne.n	80040d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_OscConfig+0x154>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e265      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	4946      	ldr	r1, [pc, #280]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_RCC_OscConfig+0x280>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc fc07 	bl	80008dc <HAL_InitTick>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d043      	beq.n	800415c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e251      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fc fc42 	bl	8000974 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fc fc3e 	bl	8000974 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e23a      	b.n	800457c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004106:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	492d      	ldr	r1, [pc, #180]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e01a      	b.n	800415e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800412e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fc fc1e 	bl	8000974 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413c:	f7fc fc1a 	bl	8000974 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e216      	b.n	800457c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1e0>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d041      	beq.n	80041ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01c      	beq.n	80041ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fc fbf7 	bl	8000974 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418a:	f7fc fbf3 	bl	8000974 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e1ef      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ef      	beq.n	800418a <HAL_RCC_OscConfig+0x22e>
 80041aa:	e020      	b.n	80041ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fc fbda 	bl	8000974 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c2:	e00d      	b.n	80041e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fc fbd6 	bl	8000974 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d906      	bls.n	80041e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1d2      	b.n	800457c <HAL_RCC_OscConfig+0x620>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e0:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ea      	bne.n	80041c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80a6 	beq.w	8004348 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x2b4>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x2b6>
 8004210:	2300      	movs	r3, #0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	4a7e      	ldr	r2, [pc, #504]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6593      	str	r3, [r2, #88]	; 0x58
 8004222:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800422e:	2301      	movs	r3, #1
 8004230:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004232:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d118      	bne.n	8004270 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423e:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fc fb93 	bl	8000974 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fc fb8f 	bl	8000974 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e18b      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004264:	4b6c      	ldr	r3, [pc, #432]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d108      	bne.n	800428a <HAL_RCC_OscConfig+0x32e>
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	4a65      	ldr	r2, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004288:	e024      	b.n	80042d4 <HAL_RCC_OscConfig+0x378>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d110      	bne.n	80042b4 <HAL_RCC_OscConfig+0x358>
 8004292:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	4a5e      	ldr	r2, [pc, #376]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_OscConfig+0x378>
 80042b4:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a56      	ldr	r2, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a52      	ldr	r2, [pc, #328]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d016      	beq.n	800430a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fc fb4a 	bl	8000974 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fc fb46 	bl	8000974 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e140      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ed      	beq.n	80042e4 <HAL_RCC_OscConfig+0x388>
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7fc fb33 	bl	8000974 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004310:	e00a      	b.n	8004328 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7fc fb2f 	bl	8000974 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e129      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004328:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ed      	bne.n	8004312 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004336:	7ffb      	ldrb	r3, [r7, #31]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004346:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d03c      	beq.n	80043ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01c      	beq.n	8004396 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004362:	4a2c      	ldr	r2, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fc fb02 	bl	8000974 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004374:	f7fc fafe 	bl	8000974 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0fa      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ef      	beq.n	8004374 <HAL_RCC_OscConfig+0x418>
 8004394:	e01b      	b.n	80043ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fc fae5 	bl	8000974 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ae:	f7fc fae1 	bl	8000974 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0dd      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ef      	bne.n	80043ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80d1 	beq.w	800457a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f000 808b 	beq.w	80044fc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d15e      	bne.n	80044ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fc fabb 	bl	8000974 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fc fab7 	bl	8000974 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0b3      	b.n	800457c <HAL_RCC_OscConfig+0x620>
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ec      	bne.n	8004402 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4b56      	ldr	r3, [pc, #344]	; (8004588 <HAL_RCC_OscConfig+0x62c>)
 800442e:	4013      	ands	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6a11      	ldr	r1, [r2, #32]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004438:	3a01      	subs	r2, #1
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004442:	0212      	lsls	r2, r2, #8
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800444a:	0852      	lsrs	r2, r2, #1
 800444c:	3a01      	subs	r2, #1
 800444e:	0552      	lsls	r2, r2, #21
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004456:	0852      	lsrs	r2, r2, #1
 8004458:	3a01      	subs	r2, #1
 800445a:	0652      	lsls	r2, r2, #25
 800445c:	4311      	orrs	r1, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004462:	06d2      	lsls	r2, r2, #27
 8004464:	430a      	orrs	r2, r1
 8004466:	4947      	ldr	r1, [pc, #284]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 8004468:	4313      	orrs	r3, r2
 800446a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800446c:	4b45      	ldr	r3, [pc, #276]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a44      	ldr	r2, [pc, #272]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a41      	ldr	r2, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004482:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fc fa76 	bl	8000974 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fc fa72 	bl	8000974 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e06e      	b.n	800457c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x530>
 80044aa:	e066      	b.n	800457a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a34      	ldr	r2, [pc, #208]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a31      	ldr	r2, [pc, #196]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044c4:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a2e      	ldr	r2, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fc fa4e 	bl	8000974 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fc fa4a 	bl	8000974 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e046      	b.n	800457c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ee:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x580>
 80044fa:	e03e      	b.n	800457a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e039      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_RCC_OscConfig+0x628>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 0203 	and.w	r2, r3, #3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	429a      	cmp	r2, r3
 800451a:	d12c      	bne.n	8004576 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	3b01      	subs	r3, #1
 8004528:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d123      	bne.n	8004576 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d11b      	bne.n	8004576 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d113      	bne.n	8004576 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d109      	bne.n	8004576 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	019f800c 	.word	0x019f800c

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e11e      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b91      	ldr	r3, [pc, #580]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d910      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 020f 	bic.w	r2, r3, #15
 80045ba:	498c      	ldr	r1, [pc, #560]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b8a      	ldr	r3, [pc, #552]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e106      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d073      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d129      	bne.n	800463c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e8:	4b81      	ldr	r3, [pc, #516]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0f4      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045f8:	f000 f972 	bl	80048e0 <RCC_GetSysClockFreqFromPLLSource>
 80045fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4a7c      	ldr	r2, [pc, #496]	; (80047f4 <HAL_RCC_ClockConfig+0x268>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d93f      	bls.n	8004686 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004606:	4b7a      	ldr	r3, [pc, #488]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800461a:	2b00      	cmp	r3, #0
 800461c:	d033      	beq.n	8004686 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004622:	2b00      	cmp	r3, #0
 8004624:	d12f      	bne.n	8004686 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004626:	4b72      	ldr	r3, [pc, #456]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462e:	4a70      	ldr	r2, [pc, #448]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e024      	b.n	8004686 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d107      	bne.n	8004654 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004644:	4b6a      	ldr	r3, [pc, #424]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0c6      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004654:	4b66      	ldr	r3, [pc, #408]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0be      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004664:	f000 f8ce 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 8004668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4a61      	ldr	r2, [pc, #388]	; (80047f4 <HAL_RCC_ClockConfig+0x268>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d909      	bls.n	8004686 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004672:	4b5f      	ldr	r3, [pc, #380]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467a:	4a5d      	ldr	r2, [pc, #372]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 800467c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004680:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004686:	4b5a      	ldr	r3, [pc, #360]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f023 0203 	bic.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4957      	ldr	r1, [pc, #348]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004694:	4313      	orrs	r3, r2
 8004696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fc f96c 	bl	8000974 <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fc f968 	bl	8000974 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e095      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	4b4e      	ldr	r3, [pc, #312]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 020c 	and.w	r2, r3, #12
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d1eb      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d023      	beq.n	800471c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a42      	ldr	r2, [pc, #264]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046f8:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004700:	4a3b      	ldr	r2, [pc, #236]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4936      	ldr	r1, [pc, #216]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
 800471a:	e008      	b.n	800472e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b80      	cmp	r3, #128	; 0x80
 8004720:	d105      	bne.n	800472e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004722:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	4a32      	ldr	r2, [pc, #200]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800472e:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d21d      	bcs.n	8004778 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473c:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 020f 	bic.w	r2, r3, #15
 8004744:	4929      	ldr	r1, [pc, #164]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800474c:	f7fc f912 	bl	8000974 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	e00a      	b.n	800476a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004754:	f7fc f90e 	bl	8000974 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e03b      	b.n	80047e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d1ed      	bne.n	8004754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4917      	ldr	r1, [pc, #92]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	490f      	ldr	r1, [pc, #60]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047b6:	f000 f825 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047ba:	4602      	mov	r2, r0
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_RCC_ClockConfig+0x264>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	490c      	ldr	r1, [pc, #48]	; (80047f8 <HAL_RCC_ClockConfig+0x26c>)
 80047c8:	5ccb      	ldrb	r3, [r1, r3]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <HAL_RCC_ClockConfig+0x270>)
 80047d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_RCC_ClockConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc f87e 	bl	80008dc <HAL_InitTick>
 80047e0:	4603      	mov	r3, r0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40021000 	.word	0x40021000
 80047f4:	04c4b400 	.word	0x04c4b400
 80047f8:	08009674 	.word	0x08009674
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000004 	.word	0x20000004

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800480a:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b04      	cmp	r3, #4
 8004814:	d102      	bne.n	800481c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004816:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e047      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	d102      	bne.n	800482e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004828:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e03e      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d136      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3301      	adds	r3, #1
 8004850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d10c      	bne.n	8004872 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004858:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004862:	68d2      	ldr	r2, [r2, #12]
 8004864:	0a12      	lsrs	r2, r2, #8
 8004866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	617b      	str	r3, [r7, #20]
      break;
 8004870:	e00c      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004872:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	4a10      	ldr	r2, [pc, #64]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	0a12      	lsrs	r2, r2, #8
 8004880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
      break;
 800488a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0e5b      	lsrs	r3, r3, #25
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	3301      	adds	r3, #1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e001      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048ac:	693b      	ldr	r3, [r7, #16]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	00f42400 	.word	0x00f42400
 80048c4:	016e3600 	.word	0x016e3600

080048c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000

080048e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048e6:	4b1e      	ldr	r3, [pc, #120]	; (8004960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d10c      	bne.n	800491e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490e:	68d2      	ldr	r2, [r2, #12]
 8004910:	0a12      	lsrs	r2, r2, #8
 8004912:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	617b      	str	r3, [r7, #20]
    break;
 800491c:	e00c      	b.n	8004938 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800491e:	4a12      	ldr	r2, [pc, #72]	; (8004968 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004928:	68d2      	ldr	r2, [r2, #12]
 800492a:	0a12      	lsrs	r2, r2, #8
 800492c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
    break;
 8004936:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	0e5b      	lsrs	r3, r3, #25
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	3301      	adds	r3, #1
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004952:	687b      	ldr	r3, [r7, #4]
}
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40021000 	.word	0x40021000
 8004964:	016e3600 	.word	0x016e3600
 8004968:	00f42400 	.word	0x00f42400

0800496c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004974:	2300      	movs	r3, #0
 8004976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004978:	2300      	movs	r3, #0
 800497a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8098 	beq.w	8004aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498a:	2300      	movs	r3, #0
 800498c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498e:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499a:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	4a3f      	ldr	r2, [pc, #252]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a4:	6593      	str	r3, [r2, #88]	; 0x58
 80049a6:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b2:	2301      	movs	r3, #1
 80049b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b6:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a39      	ldr	r2, [pc, #228]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c2:	f7fb ffd7 	bl	8000974 <HAL_GetTick>
 80049c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049c8:	e009      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ca:	f7fb ffd3 	bl	8000974 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d902      	bls.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	74fb      	strb	r3, [r7, #19]
        break;
 80049dc:	e005      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049de:	4b30      	ldr	r3, [pc, #192]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d159      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049f0:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01e      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d019      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a0c:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a18:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a38:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d016      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fb ff93 	bl	8000974 <HAL_GetTick>
 8004a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a50:	e00b      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a52:	f7fb ff8f 	bl	8000974 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d902      	bls.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	74fb      	strb	r3, [r7, #19]
            break;
 8004a68:	e006      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6a:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ec      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a94:	e008      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a96:	7cfb      	ldrb	r3, [r7, #19]
 8004a98:	74bb      	strb	r3, [r7, #18]
 8004a9a:	e005      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa8:	7c7b      	ldrb	r3, [r7, #17]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	4ba6      	ldr	r3, [pc, #664]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	4aa5      	ldr	r2, [pc, #660]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac6:	4ba0      	ldr	r3, [pc, #640]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f023 0203 	bic.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	499c      	ldr	r1, [pc, #624]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae8:	4b97      	ldr	r3, [pc, #604]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 020c 	bic.w	r2, r3, #12
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4994      	ldr	r1, [pc, #592]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b0a:	4b8f      	ldr	r3, [pc, #572]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	498b      	ldr	r1, [pc, #556]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b2c:	4b86      	ldr	r3, [pc, #536]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	4983      	ldr	r1, [pc, #524]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b4e:	4b7e      	ldr	r3, [pc, #504]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	497a      	ldr	r1, [pc, #488]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b70:	4b75      	ldr	r3, [pc, #468]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	4972      	ldr	r1, [pc, #456]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b92:	4b6d      	ldr	r3, [pc, #436]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	4969      	ldr	r1, [pc, #420]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb4:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4961      	ldr	r1, [pc, #388]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd6:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	4958      	ldr	r1, [pc, #352]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	4950      	ldr	r1, [pc, #320]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c16:	d105      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b4b      	ldr	r3, [pc, #300]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a4a      	ldr	r2, [pc, #296]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c30:	4b45      	ldr	r3, [pc, #276]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	4942      	ldr	r1, [pc, #264]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c50:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a3c      	ldr	r2, [pc, #240]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c68:	4b37      	ldr	r3, [pc, #220]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	4934      	ldr	r1, [pc, #208]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c86:	d105      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c88:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4a2e      	ldr	r2, [pc, #184]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca0:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	4926      	ldr	r1, [pc, #152]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	4918      	ldr	r1, [pc, #96]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1e:	490a      	ldr	r1, [pc, #40]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000

08004d4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d5c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d82:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004db0:	b084      	sub	sp, #16
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	f107 0014 	add.w	r0, r7, #20
 8004dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	b004      	add	sp, #16
 8004df0:	4770      	bx	lr
	...

08004df4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b09d      	sub	sp, #116	; 0x74
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	78db      	ldrb	r3, [r3, #3]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d81f      	bhi.n	8004e66 <USB_ActivateEndpoint+0x72>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <USB_ActivateEndpoint+0x38>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e6f 	.word	0x08004e6f
 8004e38:	08004e4b 	.word	0x08004e4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e48:	e012      	b.n	8004e70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e52:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e56:	e00b      	b.n	8004e70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e64:	e004      	b.n	8004e70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004e6c:	e000      	b.n	8004e70 <USB_ActivateEndpoint+0x7c>
      break;
 8004e6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	b21b      	sxth	r3, r3
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	b21a      	sxth	r2, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b21b      	sxth	r3, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	b21b      	sxth	r3, r3
 8004eb6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	7b1b      	ldrb	r3, [r3, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 8149 	bne.w	8005178 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8084 	beq.w	8004ff8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	4413      	add	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	00da      	lsls	r2, r3, #3
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	88db      	ldrh	r3, [r3, #6]
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	827b      	strh	r3, [r7, #18]
 8004f32:	8a7b      	ldrh	r3, [r7, #18]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <USB_ActivateEndpoint+0x180>
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	823b      	strh	r3, [r7, #16]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	8a3b      	ldrh	r3, [r7, #16]
 8004f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d020      	beq.n	8004fbe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f92:	81bb      	strh	r3, [r7, #12]
 8004f94:	89bb      	ldrh	r3, [r7, #12]
 8004f96:	f083 0320 	eor.w	r3, r3, #32
 8004f9a:	81bb      	strh	r3, [r7, #12]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	89bb      	ldrh	r3, [r7, #12]
 8004fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	8013      	strh	r3, [r2, #0]
 8004fbc:	e2a6      	b.n	800550c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd4:	81fb      	strh	r3, [r7, #14]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	441a      	add	r2, r3
 8004fe0:	89fb      	ldrh	r3, [r7, #14]
 8004fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8013      	strh	r3, [r2, #0]
 8004ff6:	e289      	b.n	800550c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005002:	b29b      	uxth	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	4413      	add	r3, r2
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	00da      	lsls	r2, r3, #3
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	4413      	add	r3, r2
 8005016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	88db      	ldrh	r3, [r3, #6]
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	4413      	add	r3, r2
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	00da      	lsls	r2, r3, #3
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	4413      	add	r3, r2
 800504a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b3e      	cmp	r3, #62	; 0x3e
 8005056:	d918      	bls.n	800508a <USB_ActivateEndpoint+0x296>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <USB_ActivateEndpoint+0x27e>
 800506c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800506e:	3b01      	subs	r3, #1
 8005070:	66bb      	str	r3, [r7, #104]	; 0x68
 8005072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005074:	b29b      	uxth	r3, r3
 8005076:	029b      	lsls	r3, r3, #10
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e029      	b.n	80050de <USB_ActivateEndpoint+0x2ea>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d112      	bne.n	80050b8 <USB_ActivateEndpoint+0x2c4>
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800509c:	b29a      	uxth	r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e012      	b.n	80050de <USB_ActivateEndpoint+0x2ea>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <USB_ActivateEndpoint+0x2de>
 80050cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050ce:	3301      	adds	r3, #1
 80050d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	029b      	lsls	r3, r3, #10
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80050ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01b      	beq.n	800512e <USB_ActivateEndpoint+0x33a>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	843b      	strh	r3, [r7, #32]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	441a      	add	r2, r3
 8005118:	8c3b      	ldrh	r3, [r7, #32]
 800511a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	83fb      	strh	r3, [r7, #30]
 8005146:	8bfb      	ldrh	r3, [r7, #30]
 8005148:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800514c:	83fb      	strh	r3, [r7, #30]
 800514e:	8bfb      	ldrh	r3, [r7, #30]
 8005150:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005154:	83fb      	strh	r3, [r7, #30]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	8bfb      	ldrh	r3, [r7, #30]
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]
 8005176:	e1c9      	b.n	800550c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d11e      	bne.n	80051be <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
 80051bc:	e01d      	b.n	80051fa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800520a:	4413      	add	r3, r2
 800520c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	00da      	lsls	r2, r3, #3
 8005214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005216:	4413      	add	r3, r2
 8005218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521c:	65bb      	str	r3, [r7, #88]	; 0x58
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	891b      	ldrh	r3, [r3, #8]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	657b      	str	r3, [r7, #84]	; 0x54
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523e:	4413      	add	r3, r2
 8005240:	657b      	str	r3, [r7, #84]	; 0x54
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	00da      	lsls	r2, r3, #3
 8005248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524a:	4413      	add	r3, r2
 800524c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	895b      	ldrh	r3, [r3, #10]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	b29b      	uxth	r3, r3
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005260:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 8093 	bne.w	8005392 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800527c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <USB_ActivateEndpoint+0x4cc>
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80052ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <USB_ActivateEndpoint+0x51c>
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	877b      	strh	r3, [r7, #58]	; 0x3a
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	873b      	strh	r3, [r7, #56]	; 0x38
 8005328:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800532a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800532e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005330:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005332:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005336:	873b      	strh	r3, [r7, #56]	; 0x38
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800537c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]
 8005390:	e0bc      	b.n	800550c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80053a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01d      	beq.n	80053ea <USB_ActivateEndpoint+0x5f6>
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01d      	beq.n	8005442 <USB_ActivateEndpoint+0x64e>
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	78db      	ldrb	r3, [r3, #3]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d024      	beq.n	8005494 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005460:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005464:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005468:	f083 0320 	eor.w	r3, r3, #32
 800546c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]
 8005492:	e01d      	b.n	80054d0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80054bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	441a      	add	r2, r3
 80054f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80054f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	b29b      	uxth	r3, r3
 800550a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800550c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005510:	4618      	mov	r0, r3
 8005512:	3774      	adds	r7, #116	; 0x74
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800551c:	b480      	push	{r7}
 800551e:	b08d      	sub	sp, #52	; 0x34
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	7b1b      	ldrb	r3, [r3, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 808e 	bne.w	800564c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d044      	beq.n	80055c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	81bb      	strh	r3, [r7, #12]
 8005546:	89bb      	ldrh	r3, [r7, #12]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <USB_DeactivateEndpoint+0x6c>
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	817b      	strh	r3, [r7, #10]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	441a      	add	r2, r3
 8005572:	897b      	ldrh	r3, [r7, #10]
 8005574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005584:	b29b      	uxth	r3, r3
 8005586:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559e:	813b      	strh	r3, [r7, #8]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	893b      	ldrh	r3, [r7, #8]
 80055ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]
 80055c0:	e192      	b.n	80058e8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	827b      	strh	r3, [r7, #18]
 80055d0:	8a7b      	ldrh	r3, [r7, #18]
 80055d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01b      	beq.n	8005612 <USB_DeactivateEndpoint+0xf6>
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f0:	823b      	strh	r3, [r7, #16]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	8a3b      	ldrh	r3, [r7, #16]
 80055fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	81fb      	strh	r3, [r7, #14]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	441a      	add	r2, r3
 8005634:	89fb      	ldrh	r3, [r7, #14]
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
 800564a:	e14d      	b.n	80058e8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 80a5 	bne.w	80057a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	843b      	strh	r3, [r7, #32]
 8005664:	8c3b      	ldrh	r3, [r7, #32]
 8005666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01b      	beq.n	80056a6 <USB_DeactivateEndpoint+0x18a>
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005684:	83fb      	strh	r3, [r7, #30]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	8bfb      	ldrh	r3, [r7, #30]
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	83bb      	strh	r3, [r7, #28]
 80056b4:	8bbb      	ldrh	r3, [r7, #28]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <USB_DeactivateEndpoint+0x1da>
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d4:	837b      	strh	r3, [r7, #26]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	8b7b      	ldrh	r3, [r7, #26]
 80056e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570c:	833b      	strh	r3, [r7, #24]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	441a      	add	r2, r3
 8005718:	8b3b      	ldrh	r3, [r7, #24]
 800571a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800571e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800572a:	b29b      	uxth	r3, r3
 800572c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	82fb      	strh	r3, [r7, #22]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	8afb      	ldrh	r3, [r7, #22]
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800575e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577c:	82bb      	strh	r3, [r7, #20]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	441a      	add	r2, r3
 8005788:	8abb      	ldrh	r3, [r7, #20]
 800578a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800578e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579a:	b29b      	uxth	r3, r3
 800579c:	8013      	strh	r3, [r2, #0]
 800579e:	e0a3      	b.n	80058e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <USB_DeactivateEndpoint+0x2d4>
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80057fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <USB_DeactivateEndpoint+0x324>
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005838:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005874:	b29b      	uxth	r3, r3
 8005876:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800589c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3734      	adds	r7, #52	; 0x34
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b0c2      	sub	sp, #264	; 0x108
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005904:	6018      	str	r0, [r3, #0]
 8005906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	f040 867b 	bne.w	8006618 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d908      	bls.n	8005950 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800593e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800594e:	e007      	b.n	8005960 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	7b1b      	ldrb	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13a      	bne.n	80059e6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6959      	ldr	r1, [r3, #20]
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	88da      	ldrh	r2, [r3, #6]
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598c:	b29b      	uxth	r3, r3
 800598e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005992:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005996:	6800      	ldr	r0, [r0, #0]
 8005998:	f001 fc1d 	bl	80071d6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800599c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4413      	add	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	00da      	lsls	r2, r3, #3
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	f000 bde3 	b.w	80065ac <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	78db      	ldrb	r3, [r3, #3]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	f040 843a 	bne.w	800626c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	f240 83b7 	bls.w	8006184 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a82:	1ad2      	subs	r2, r2, r3
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 81b3 	beq.w	8005e1e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d16d      	bne.n	8005bb0 <USB_EPStartXfer+0x2ba>
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	4413      	add	r3, r2
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	00da      	lsls	r2, r3, #3
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	2b3e      	cmp	r3, #62	; 0x3e
 8005b16:	d91c      	bls.n	8005b52 <USB_EPStartXfer+0x25c>
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d104      	bne.n	8005b38 <USB_EPStartXfer+0x242>
 8005b2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b32:	3b01      	subs	r3, #1
 8005b34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e053      	b.n	8005bfa <USB_EPStartXfer+0x304>
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d112      	bne.n	8005b80 <USB_EPStartXfer+0x28a>
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e03c      	b.n	8005bfa <USB_EPStartXfer+0x304>
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <USB_EPStartXfer+0x2aa>
 8005b96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ba0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	e024      	b.n	8005bfa <USB_EPStartXfer+0x304>
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d11c      	bne.n	8005bfa <USB_EPStartXfer+0x304>
 8005bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	4413      	add	r3, r2
 8005bd6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	00da      	lsls	r2, r3, #3
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	4413      	add	r3, r2
 8005bea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	895b      	ldrh	r3, [r3, #10]
 8005c06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6959      	ldr	r1, [r3, #20]
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c28:	6800      	ldr	r0, [r0, #0]
 8005c2a:	f001 fad4 	bl	80071d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	441a      	add	r2, r3
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d90f      	bls.n	8005c88 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	1ad2      	subs	r2, r2, r3
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	621a      	str	r2, [r3, #32]
 8005c86:	e00e      	b.n	8005ca6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d16d      	bne.n	8005d92 <USB_EPStartXfer+0x49c>
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00da      	lsls	r2, r3, #3
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	4413      	add	r3, r2
 8005cec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf8:	d91c      	bls.n	8005d34 <USB_EPStartXfer+0x43e>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <USB_EPStartXfer+0x424>
 8005d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d14:	3b01      	subs	r3, #1
 8005d16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e059      	b.n	8005de8 <USB_EPStartXfer+0x4f2>
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d112      	bne.n	8005d62 <USB_EPStartXfer+0x46c>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	e042      	b.n	8005de8 <USB_EPStartXfer+0x4f2>
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <USB_EPStartXfer+0x48c>
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	e02a      	b.n	8005de8 <USB_EPStartXfer+0x4f2>
 8005d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d122      	bne.n	8005de8 <USB_EPStartXfer+0x4f2>
 8005da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	623b      	str	r3, [r7, #32]
 8005dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00da      	lsls	r2, r3, #3
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	891b      	ldrh	r3, [r3, #8]
 8005df4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6959      	ldr	r1, [r3, #20]
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e16:	6800      	ldr	r0, [r0, #0]
 8005e18:	f001 f9dd 	bl	80071d6 <USB_WritePMA>
 8005e1c:	e3c6      	b.n	80065ac <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d16d      	bne.n	8005f0a <USB_EPStartXfer+0x614>
 8005e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e4e:	4413      	add	r3, r2
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e70:	d91c      	bls.n	8005eac <USB_EPStartXfer+0x5b6>
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <USB_EPStartXfer+0x59c>
 8005e88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e059      	b.n	8005f60 <USB_EPStartXfer+0x66a>
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d112      	bne.n	8005eda <USB_EPStartXfer+0x5e4>
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	e042      	b.n	8005f60 <USB_EPStartXfer+0x66a>
 8005eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <USB_EPStartXfer+0x604>
 8005ef0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	029b      	lsls	r3, r3, #10
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	e02a      	b.n	8005f60 <USB_EPStartXfer+0x66a>
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d122      	bne.n	8005f60 <USB_EPStartXfer+0x66a>
 8005f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	653b      	str	r3, [r7, #80]	; 0x50
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f3a:	4413      	add	r3, r2
 8005f3c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	00da      	lsls	r2, r3, #3
 8005f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	891b      	ldrh	r3, [r3, #8]
 8005f6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6959      	ldr	r1, [r3, #20]
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f8e:	6800      	ldr	r0, [r0, #0]
 8005f90:	f001 f921 	bl	80071d6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa4:	441a      	add	r2, r3
 8005fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d90f      	bls.n	8005fee <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6a1a      	ldr	r2, [r3, #32]
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fde:	1ad2      	subs	r2, r2, r3
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	621a      	str	r2, [r3, #32]
 8005fec:	e00e      	b.n	800600c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2200      	movs	r2, #0
 800600a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d16d      	bne.n	8006104 <USB_EPStartXfer+0x80e>
 8006028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	63bb      	str	r3, [r7, #56]	; 0x38
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	4413      	add	r3, r2
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	00da      	lsls	r2, r3, #3
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	4413      	add	r3, r2
 800605e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	2b3e      	cmp	r3, #62	; 0x3e
 800606a:	d91c      	bls.n	80060a6 <USB_EPStartXfer+0x7b0>
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <USB_EPStartXfer+0x796>
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	3b01      	subs	r3, #1
 8006088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	b29b      	uxth	r3, r3
 8006092:	029b      	lsls	r3, r3, #10
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609e:	b29a      	uxth	r2, r3
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e053      	b.n	800614e <USB_EPStartXfer+0x858>
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d112      	bne.n	80060d4 <USB_EPStartXfer+0x7de>
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	e03c      	b.n	800614e <USB_EPStartXfer+0x858>
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <USB_EPStartXfer+0x7fe>
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	3301      	adds	r3, #1
 80060f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	029b      	lsls	r3, r3, #10
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e024      	b.n	800614e <USB_EPStartXfer+0x858>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d11c      	bne.n	800614e <USB_EPStartXfer+0x858>
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006128:	4413      	add	r3, r2
 800612a:	643b      	str	r3, [r7, #64]	; 0x40
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	00da      	lsls	r2, r3, #3
 800613a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800613c:	4413      	add	r3, r2
 800613e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006148:	b29a      	uxth	r2, r3
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	895b      	ldrh	r3, [r3, #10]
 800615a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6959      	ldr	r1, [r3, #20]
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616e:	b29b      	uxth	r3, r3
 8006170:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006174:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006178:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	f001 f82a 	bl	80071d6 <USB_WritePMA>
 8006182:	e213      	b.n	80065ac <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006210:	4413      	add	r3, r2
 8006212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	00da      	lsls	r2, r3, #3
 8006222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006224:	4413      	add	r3, r2
 8006226:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800622a:	65bb      	str	r3, [r7, #88]	; 0x58
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006230:	b29a      	uxth	r2, r3
 8006232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006234:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	891b      	ldrh	r3, [r3, #8]
 8006242:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6959      	ldr	r1, [r3, #20]
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006256:	b29b      	uxth	r3, r3
 8006258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800625c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006260:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006264:	6800      	ldr	r0, [r0, #0]
 8006266:	f000 ffb6 	bl	80071d6 <USB_WritePMA>
 800626a:	e19f      	b.n	80065ac <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800626c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6a1a      	ldr	r2, [r3, #32]
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80bc 	beq.w	800642a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	673b      	str	r3, [r7, #112]	; 0x70
 80062be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d16d      	bne.n	80063aa <USB_EPStartXfer+0xab4>
 80062ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ee:	4413      	add	r3, r2
 80062f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	00da      	lsls	r2, r3, #3
 8006300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006302:	4413      	add	r3, r2
 8006304:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006308:	667b      	str	r3, [r7, #100]	; 0x64
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630e:	2b3e      	cmp	r3, #62	; 0x3e
 8006310:	d91c      	bls.n	800634c <USB_EPStartXfer+0xa56>
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <USB_EPStartXfer+0xa3c>
 8006328:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800632c:	3b01      	subs	r3, #1
 800632e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006332:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006336:	b29b      	uxth	r3, r3
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	b29b      	uxth	r3, r3
 800633c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006344:	b29a      	uxth	r2, r3
 8006346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e053      	b.n	80063f4 <USB_EPStartXfer+0xafe>
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006350:	2b00      	cmp	r3, #0
 8006352:	d112      	bne.n	800637a <USB_EPStartXfer+0xa84>
 8006354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800635e:	b29a      	uxth	r2, r3
 8006360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006372:	b29a      	uxth	r2, r3
 8006374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006376:	801a      	strh	r2, [r3, #0]
 8006378:	e03c      	b.n	80063f4 <USB_EPStartXfer+0xafe>
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <USB_EPStartXfer+0xaa4>
 8006390:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006394:	3301      	adds	r3, #1
 8006396:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800639a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800639e:	b29b      	uxth	r3, r3
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	e024      	b.n	80063f4 <USB_EPStartXfer+0xafe>
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d11c      	bne.n	80063f4 <USB_EPStartXfer+0xafe>
 80063ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ce:	4413      	add	r3, r2
 80063d0:	673b      	str	r3, [r7, #112]	; 0x70
 80063d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	00da      	lsls	r2, r3, #3
 80063e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e2:	4413      	add	r3, r2
 80063e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	895b      	ldrh	r3, [r3, #10]
 8006400:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6959      	ldr	r1, [r3, #20]
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006414:	b29b      	uxth	r3, r3
 8006416:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800641a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800641e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006422:	6800      	ldr	r0, [r0, #0]
 8006424:	f000 fed7 	bl	80071d6 <USB_WritePMA>
 8006428:	e0c0      	b.n	80065ac <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800642a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d16d      	bne.n	8006516 <USB_EPStartXfer+0xc20>
 800643a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800645a:	4413      	add	r3, r2
 800645c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800645e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	00da      	lsls	r2, r3, #3
 800646c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800646e:	4413      	add	r3, r2
 8006470:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006474:	67bb      	str	r3, [r7, #120]	; 0x78
 8006476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647a:	2b3e      	cmp	r3, #62	; 0x3e
 800647c:	d91c      	bls.n	80064b8 <USB_EPStartXfer+0xbc2>
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <USB_EPStartXfer+0xba8>
 8006494:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006498:	3b01      	subs	r3, #1
 800649a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800649e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	029b      	lsls	r3, r3, #10
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e05f      	b.n	8006578 <USB_EPStartXfer+0xc82>
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d112      	bne.n	80064e6 <USB_EPStartXfer+0xbf0>
 80064c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ce:	801a      	strh	r2, [r3, #0]
 80064d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e048      	b.n	8006578 <USB_EPStartXfer+0xc82>
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <USB_EPStartXfer+0xc10>
 80064fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006500:	3301      	adds	r3, #1
 8006502:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006506:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800650a:	b29b      	uxth	r3, r3
 800650c:	029b      	lsls	r3, r3, #10
 800650e:	b29a      	uxth	r2, r3
 8006510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	e030      	b.n	8006578 <USB_EPStartXfer+0xc82>
 8006516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d128      	bne.n	8006578 <USB_EPStartXfer+0xc82>
 8006526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800654a:	4413      	add	r3, r2
 800654c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	00da      	lsls	r2, r3, #3
 800655e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006562:	4413      	add	r3, r2
 8006564:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006576:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	891b      	ldrh	r3, [r3, #8]
 8006584:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6959      	ldr	r1, [r3, #20]
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006598:	b29b      	uxth	r3, r3
 800659a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800659e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	f000 fe15 	bl	80071d6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d2:	817b      	strh	r3, [r7, #10]
 80065d4:	897b      	ldrh	r3, [r7, #10]
 80065d6:	f083 0310 	eor.w	r3, r3, #16
 80065da:	817b      	strh	r3, [r7, #10]
 80065dc:	897b      	ldrh	r3, [r7, #10]
 80065de:	f083 0320 	eor.w	r3, r3, #32
 80065e2:	817b      	strh	r3, [r7, #10]
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	897b      	ldrh	r3, [r7, #10]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]
 8006614:	f000 bc9f 	b.w	8006f56 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 80ae 	bne.w	8006786 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800662a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d917      	bls.n	8006676 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800664a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	619a      	str	r2, [r3, #24]
 8006674:	e00e      	b.n	8006694 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	00da      	lsls	r2, r3, #3
 80066cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	2b3e      	cmp	r3, #62	; 0x3e
 80066e0:	d91d      	bls.n	800671e <USB_EPStartXfer+0xe28>
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <USB_EPStartXfer+0xe0c>
 80066f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066fc:	3b01      	subs	r3, #1
 80066fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006702:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006706:	b29b      	uxth	r3, r3
 8006708:	029b      	lsls	r3, r3, #10
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006714:	b29a      	uxth	r2, r3
 8006716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e3e1      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	2b00      	cmp	r3, #0
 8006724:	d116      	bne.n	8006754 <USB_EPStartXfer+0xe5e>
 8006726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006732:	b29a      	uxth	r2, r3
 8006734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674a:	b29a      	uxth	r2, r3
 800674c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e3c6      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <USB_EPStartXfer+0xe7e>
 800676a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800676e:	3301      	adds	r3, #1
 8006770:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006774:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006778:	b29b      	uxth	r3, r3
 800677a:	029b      	lsls	r3, r3, #10
 800677c:	b29a      	uxth	r2, r3
 800677e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	e3ad      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	2b02      	cmp	r3, #2
 8006794:	f040 8200 	bne.w	8006b98 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 8091 	bne.w	80068cc <USB_EPStartXfer+0xfd6>
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067ce:	4413      	add	r3, r2
 80067d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	00da      	lsls	r2, r3, #3
 80067e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067e6:	4413      	add	r3, r2
 80067e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b3e      	cmp	r3, #62	; 0x3e
 80067fe:	d925      	bls.n	800684c <USB_EPStartXfer+0xf56>
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <USB_EPStartXfer+0xf3a>
 8006826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682a:	3b01      	subs	r3, #1
 800682c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006834:	b29b      	uxth	r3, r3
 8006836:	029b      	lsls	r3, r3, #10
 8006838:	b29b      	uxth	r3, r3
 800683a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	e074      	b.n	8006936 <USB_EPStartXfer+0x1040>
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d116      	bne.n	800688a <USB_EPStartXfer+0xf94>
 800685c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006868:	b29a      	uxth	r2, r3
 800686a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800686e:	801a      	strh	r2, [r3, #0]
 8006870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006880:	b29a      	uxth	r2, r3
 8006882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e055      	b.n	8006936 <USB_EPStartXfer+0x1040>
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <USB_EPStartXfer+0xfc4>
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	3301      	adds	r3, #1
 80068b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	b29b      	uxth	r3, r3
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	e034      	b.n	8006936 <USB_EPStartXfer+0x1040>
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d12c      	bne.n	8006936 <USB_EPStartXfer+0x1040>
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006900:	4413      	add	r3, r2
 8006902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	00da      	lsls	r2, r3, #3
 8006914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006918:	4413      	add	r3, r2
 800691a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800691e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 8091 	bne.w	8006a78 <USB_EPStartXfer+0x1182>
 8006956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006972:	b29b      	uxth	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800697a:	4413      	add	r3, r2
 800697c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	00da      	lsls	r2, r3, #3
 800698e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006992:	4413      	add	r3, r2
 8006994:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800699c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b3e      	cmp	r3, #62	; 0x3e
 80069aa:	d925      	bls.n	80069f8 <USB_EPStartXfer+0x1102>
 80069ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <USB_EPStartXfer+0x10e6>
 80069d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d6:	3b01      	subs	r3, #1
 80069d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	029b      	lsls	r3, r3, #10
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e06d      	b.n	8006ad4 <USB_EPStartXfer+0x11de>
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d116      	bne.n	8006a36 <USB_EPStartXfer+0x1140>
 8006a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	e04e      	b.n	8006ad4 <USB_EPStartXfer+0x11de>
 8006a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <USB_EPStartXfer+0x1170>
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a60:	3301      	adds	r3, #1
 8006a62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e02d      	b.n	8006ad4 <USB_EPStartXfer+0x11de>
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d125      	bne.n	8006ad4 <USB_EPStartXfer+0x11de>
 8006a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	00da      	lsls	r2, r3, #3
 8006ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006abc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ad2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 81fe 	beq.w	8006ee2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <USB_EPStartXfer+0x1228>
 8006b12:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 81db 	bne.w	8006ee2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006b2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 81d4 	bne.w	8006ee2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
 8006b96:	e1a4      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	78db      	ldrb	r3, [r3, #3]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	f040 819a 	bne.w	8006ede <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d917      	bls.n	8006bf6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	619a      	str	r2, [r3, #24]
 8006bf4:	e00e      	b.n	8006c14 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2200      	movs	r2, #0
 8006c12:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d178      	bne.n	8006d16 <USB_EPStartXfer+0x1420>
 8006c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c48:	4413      	add	r3, r2
 8006c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	00da      	lsls	r2, r3, #3
 8006c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c70:	d91d      	bls.n	8006cae <USB_EPStartXfer+0x13b8>
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <USB_EPStartXfer+0x139c>
 8006c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006caa:	801a      	strh	r2, [r3, #0]
 8006cac:	e064      	b.n	8006d78 <USB_EPStartXfer+0x1482>
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d116      	bne.n	8006ce4 <USB_EPStartXfer+0x13ee>
 8006cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc8:	801a      	strh	r2, [r3, #0]
 8006cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce0:	801a      	strh	r2, [r3, #0]
 8006ce2:	e049      	b.n	8006d78 <USB_EPStartXfer+0x1482>
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <USB_EPStartXfer+0x140e>
 8006cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfe:	3301      	adds	r3, #1
 8006d00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	029b      	lsls	r3, r3, #10
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	e030      	b.n	8006d78 <USB_EPStartXfer+0x1482>
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d128      	bne.n	8006d78 <USB_EPStartXfer+0x1482>
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	00da      	lsls	r2, r3, #3
 8006d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d62:	4413      	add	r3, r2
 8006d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d178      	bne.n	8006e88 <USB_EPStartXfer+0x1592>
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dba:	4413      	add	r3, r2
 8006dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	00da      	lsls	r2, r3, #3
 8006dce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	2b3e      	cmp	r3, #62	; 0x3e
 8006de2:	d91d      	bls.n	8006e20 <USB_EPStartXfer+0x152a>
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df2:	f003 031f 	and.w	r3, r3, #31
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d104      	bne.n	8006e04 <USB_EPStartXfer+0x150e>
 8006dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	e060      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d116      	bne.n	8006e56 <USB_EPStartXfer+0x1560>
 8006e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e52:	801a      	strh	r2, [r3, #0]
 8006e54:	e045      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <USB_EPStartXfer+0x1580>
 8006e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e70:	3301      	adds	r3, #1
 8006e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	029b      	lsls	r3, r3, #10
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e02c      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d124      	bne.n	8006ee2 <USB_EPStartXfer+0x15ec>
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006eae:	4413      	add	r3, r2
 8006eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00da      	lsls	r2, r3, #3
 8006ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006eda:	801a      	strh	r2, [r3, #0]
 8006edc:	e001      	b.n	8006ee2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e03a      	b.n	8006f58 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d020      	beq.n	8006fb6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8a:	81bb      	strh	r3, [r7, #12]
 8006f8c:	89bb      	ldrh	r3, [r7, #12]
 8006f8e:	f083 0310 	eor.w	r3, r3, #16
 8006f92:	81bb      	strh	r3, [r7, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	89bb      	ldrh	r3, [r7, #12]
 8006fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	8013      	strh	r3, [r2, #0]
 8006fb4:	e01f      	b.n	8006ff6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	81fb      	strh	r3, [r7, #14]
 8006fce:	89fb      	ldrh	r3, [r7, #14]
 8006fd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fd4:	81fb      	strh	r3, [r7, #14]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	7b1b      	ldrb	r3, [r3, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 809d 	bne.w	8007152 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d04c      	beq.n	80070ba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	823b      	strh	r3, [r7, #16]
 800702e:	8a3b      	ldrh	r3, [r7, #16]
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01b      	beq.n	8007070 <USB_EPClearStall+0x6c>
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800704a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704e:	81fb      	strh	r3, [r7, #14]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007068:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	78db      	ldrb	r3, [r3, #3]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d06c      	beq.n	8007152 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708e:	81bb      	strh	r3, [r7, #12]
 8007090:	89bb      	ldrh	r3, [r7, #12]
 8007092:	f083 0320 	eor.w	r3, r3, #32
 8007096:	81bb      	strh	r3, [r7, #12]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	89bb      	ldrh	r3, [r7, #12]
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
 80070b8:	e04b      	b.n	8007152 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	82fb      	strh	r3, [r7, #22]
 80070c8:	8afb      	ldrh	r3, [r7, #22]
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <USB_EPClearStall+0x106>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	82bb      	strh	r3, [r7, #20]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	8abb      	ldrh	r3, [r7, #20]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	827b      	strh	r3, [r7, #18]
 8007122:	8a7b      	ldrh	r3, [r7, #18]
 8007124:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007128:	827b      	strh	r3, [r7, #18]
 800712a:	8a7b      	ldrh	r3, [r7, #18]
 800712c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007130:	827b      	strh	r3, [r7, #18]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	441a      	add	r2, r3
 800713c:	8a7b      	ldrh	r3, [r7, #18]
 800713e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	b29b      	uxth	r3, r3
 8007150:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2280      	movs	r2, #128	; 0x80
 8007176:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80071c8:	68fb      	ldr	r3, [r7, #12]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b08d      	sub	sp, #52	; 0x34
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	4611      	mov	r1, r2
 80071e2:	461a      	mov	r2, r3
 80071e4:	460b      	mov	r3, r1
 80071e6:	80fb      	strh	r3, [r7, #6]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80071ec:	88bb      	ldrh	r3, [r7, #4]
 80071ee:	3301      	adds	r3, #1
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071fc:	88fa      	ldrh	r2, [r7, #6]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800720c:	e01b      	b.n	8007246 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	3301      	adds	r3, #1
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	b29b      	uxth	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	b29a      	uxth	r2, r3
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	3302      	adds	r3, #2
 8007238:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	3301      	adds	r3, #1
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	3b01      	subs	r3, #1
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e0      	bne.n	800720e <USB_WritePMA+0x38>
  }
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	3734      	adds	r7, #52	; 0x34
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800725a:	b480      	push	{r7}
 800725c:	b08b      	sub	sp, #44	; 0x2c
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	4611      	mov	r1, r2
 8007266:	461a      	mov	r2, r3
 8007268:	460b      	mov	r3, r1
 800726a:	80fb      	strh	r3, [r7, #6]
 800726c:	4613      	mov	r3, r2
 800726e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007270:	88bb      	ldrh	r3, [r7, #4]
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800728a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
 8007290:	e018      	b.n	80072c4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	3302      	adds	r3, #2
 800729e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	0a1b      	lsrs	r3, r3, #8
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	3301      	adds	r3, #1
 80072bc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	3b01      	subs	r3, #1
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e3      	bne.n	8007292 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80072ca:	88bb      	ldrh	r3, [r7, #4]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	701a      	strb	r2, [r3, #0]
  }
}
 80072e6:	bf00      	nop
 80072e8:	372c      	adds	r7, #44	; 0x2c
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007302:	f002 f903 	bl	800950c <USBD_static_malloc>
 8007306:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007316:	2302      	movs	r3, #2
 8007318:	e066      	b.n	80073e8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	7c1b      	ldrb	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d119      	bne.n	800735e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800732a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800732e:	2202      	movs	r2, #2
 8007330:	2181      	movs	r1, #129	; 0x81
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 ff8f 	bl	8009256 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800733e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007342:	2202      	movs	r2, #2
 8007344:	2101      	movs	r1, #1
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 ff85 	bl	8009256 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2210      	movs	r2, #16
 8007358:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800735c:	e016      	b.n	800738c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	2202      	movs	r2, #2
 8007362:	2181      	movs	r1, #129	; 0x81
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 ff76 	bl	8009256 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	2202      	movs	r2, #2
 8007374:	2101      	movs	r1, #1
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f001 ff6d 	bl	8009256 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2210      	movs	r2, #16
 8007388:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800738c:	2308      	movs	r3, #8
 800738e:	2203      	movs	r2, #3
 8007390:	2182      	movs	r1, #130	; 0x82
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 ff5f 	bl	8009256 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	7c1b      	ldrb	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073cc:	2101      	movs	r1, #1
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f002 f831 	bl	8009436 <USBD_LL_PrepareReceive>
 80073d4:	e007      	b.n	80073e6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	2101      	movs	r1, #1
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 f828 	bl	8009436 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073fc:	2181      	movs	r1, #129	; 0x81
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 ff4f 	bl	80092a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800740a:	2101      	movs	r1, #1
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 ff48 	bl	80092a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800741a:	2182      	movs	r1, #130	; 0x82
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 ff40 	bl	80092a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00e      	beq.n	800745a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800744c:	4618      	mov	r0, r3
 800744e:	f002 f86b 	bl	8009528 <USBD_static_free>
    pdev->pClassData = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007474:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007488:	2303      	movs	r3, #3
 800748a:	e0af      	b.n	80075ec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007494:	2b00      	cmp	r3, #0
 8007496:	d03f      	beq.n	8007518 <USBD_CDC_Setup+0xb4>
 8007498:	2b20      	cmp	r3, #32
 800749a:	f040 809f 	bne.w	80075dc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	88db      	ldrh	r3, [r3, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d02e      	beq.n	8007504 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	b25b      	sxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da16      	bge.n	80074de <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80074bc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	88d2      	ldrh	r2, [r2, #6]
 80074c2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	88db      	ldrh	r3, [r3, #6]
 80074c8:	2b07      	cmp	r3, #7
 80074ca:	bf28      	it	cs
 80074cc:	2307      	movcs	r3, #7
 80074ce:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	89fa      	ldrh	r2, [r7, #14]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fa9f 	bl	8008a1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80074dc:	e085      	b.n	80075ea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	785a      	ldrb	r2, [r3, #1]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	88db      	ldrh	r3, [r3, #6]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074f4:	6939      	ldr	r1, [r7, #16]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	88db      	ldrh	r3, [r3, #6]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fab8 	bl	8008a72 <USBD_CtlPrepareRx>
      break;
 8007502:	e072      	b.n	80075ea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	7850      	ldrb	r0, [r2, #1]
 8007510:	2200      	movs	r2, #0
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	4798      	blx	r3
      break;
 8007516:	e068      	b.n	80075ea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b0b      	cmp	r3, #11
 800751e:	d852      	bhi.n	80075c6 <USBD_CDC_Setup+0x162>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <USBD_CDC_Setup+0xc4>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007559 	.word	0x08007559
 800752c:	080075d5 	.word	0x080075d5
 8007530:	080075c7 	.word	0x080075c7
 8007534:	080075c7 	.word	0x080075c7
 8007538:	080075c7 	.word	0x080075c7
 800753c:	080075c7 	.word	0x080075c7
 8007540:	080075c7 	.word	0x080075c7
 8007544:	080075c7 	.word	0x080075c7
 8007548:	080075c7 	.word	0x080075c7
 800754c:	080075c7 	.word	0x080075c7
 8007550:	08007583 	.word	0x08007583
 8007554:	080075ad 	.word	0x080075ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b03      	cmp	r3, #3
 8007562:	d107      	bne.n	8007574 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007564:	f107 030a 	add.w	r3, r7, #10
 8007568:	2202      	movs	r2, #2
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fa54 	bl	8008a1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007572:	e032      	b.n	80075da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f9de 	bl	8008938 <USBD_CtlError>
            ret = USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	75fb      	strb	r3, [r7, #23]
          break;
 8007580:	e02b      	b.n	80075da <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d107      	bne.n	800759e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800758e:	f107 030d 	add.w	r3, r7, #13
 8007592:	2201      	movs	r2, #1
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fa3f 	bl	8008a1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800759c:	e01d      	b.n	80075da <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 f9c9 	bl	8008938 <USBD_CtlError>
            ret = USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	75fb      	strb	r3, [r7, #23]
          break;
 80075aa:	e016      	b.n	80075da <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b03      	cmp	r3, #3
 80075b6:	d00f      	beq.n	80075d8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 f9bc 	bl	8008938 <USBD_CtlError>
            ret = USBD_FAIL;
 80075c0:	2303      	movs	r3, #3
 80075c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075c4:	e008      	b.n	80075d8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f9b5 	bl	8008938 <USBD_CtlError>
          ret = USBD_FAIL;
 80075ce:	2303      	movs	r3, #3
 80075d0:	75fb      	strb	r3, [r7, #23]
          break;
 80075d2:	e002      	b.n	80075da <USBD_CDC_Setup+0x176>
          break;
 80075d4:	bf00      	nop
 80075d6:	e008      	b.n	80075ea <USBD_CDC_Setup+0x186>
          break;
 80075d8:	bf00      	nop
      }
      break;
 80075da:	e006      	b.n	80075ea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f9aa 	bl	8008938 <USBD_CtlError>
      ret = USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	75fb      	strb	r3, [r7, #23]
      break;
 80075e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	e04f      	b.n	80076b6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3318      	adds	r3, #24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d029      	beq.n	8007688 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	3318      	adds	r3, #24
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	78f9      	ldrb	r1, [r7, #3]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	460b      	mov	r3, r1
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	440b      	add	r3, r1
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	4403      	add	r3, r0
 8007654:	3338      	adds	r3, #56	; 0x38
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	fbb2 f1f3 	udiv	r1, r2, r3
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007662:	2b00      	cmp	r3, #0
 8007664:	d110      	bne.n	8007688 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	440b      	add	r3, r1
 8007674:	3318      	adds	r3, #24
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800767a:	78f9      	ldrb	r1, [r7, #3]
 800767c:	2300      	movs	r3, #0
 800767e:	2200      	movs	r2, #0
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 feb7 	bl	80093f4 <USBD_LL_Transmit>
 8007686:	e015      	b.n	80076b4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e015      	b.n	800770c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fec7 	bl	8009478 <USBD_LL_GetRxDataSize>
 80076ea:	4602      	mov	r2, r0
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007706:	4611      	mov	r1, r2
 8007708:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007722:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800772a:	2303      	movs	r3, #3
 800772c:	e01b      	b.n	8007766 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <USBD_CDC_EP0_RxReady+0x50>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800773e:	2bff      	cmp	r3, #255	; 0xff
 8007740:	d010      	beq.n	8007764 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007750:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007758:	b292      	uxth	r2, r2
 800775a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	22ff      	movs	r2, #255	; 0xff
 8007760:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2243      	movs	r2, #67	; 0x43
 800777c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800777e:	4b03      	ldr	r3, [pc, #12]	; (800778c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	20000094 	.word	0x20000094

08007790 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2243      	movs	r2, #67	; 0x43
 800779c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800779e:	4b03      	ldr	r3, [pc, #12]	; (80077ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000050 	.word	0x20000050

080077b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2243      	movs	r2, #67	; 0x43
 80077bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80077be:	4b03      	ldr	r3, [pc, #12]	; (80077cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	200000d8 	.word	0x200000d8

080077d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	220a      	movs	r2, #10
 80077dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80077de:	4b03      	ldr	r3, [pc, #12]	; (80077ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	2000000c 	.word	0x2000000c

080077f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	e004      	b.n	800780e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800782c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	e008      	b.n	800784a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007866:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	e004      	b.n	800787c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007896:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e016      	b.n	80078d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	7c1b      	ldrb	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f001 fdbb 	bl	8009436 <USBD_LL_PrepareReceive>
 80078c0:	e007      	b.n	80078d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	2101      	movs	r1, #1
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 fdb2 	bl	8009436 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	4613      	mov	r3, r2
 80078e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e01f      	b.n	8007934 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	79fa      	ldrb	r2, [r7, #7]
 8007926:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f001 fc19 	bl	8009160 <USBD_LL_Init>
 800792e:	4603      	mov	r3, r0
 8007930:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3718      	adds	r7, #24
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007950:	2303      	movs	r3, #3
 8007952:	e016      	b.n	8007982 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f107 020e 	add.w	r2, r7, #14
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	4602      	mov	r2, r0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 fc44 	bl	8009220 <USBD_LL_Start>
 8007998:	4603      	mov	r3, r0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	78fa      	ldrb	r2, [r7, #3]
 80079dc:	4611      	mov	r1, r2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	4798      	blx	r3
  }

  return USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 ff46 	bl	80088c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d01a      	beq.n	8007a92 <USBD_LL_SetupStage+0x72>
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d822      	bhi.n	8007aa6 <USBD_LL_SetupStage+0x86>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_LL_SetupStage+0x4a>
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d00a      	beq.n	8007a7e <USBD_LL_SetupStage+0x5e>
 8007a68:	e01d      	b.n	8007aa6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9ee 	bl	8007e54 <USBD_StdDevReq>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7c:	e020      	b.n	8007ac0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa52 	bl	8007f30 <USBD_StdItfReq>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a90:	e016      	b.n	8007ac0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa91 	bl	8007fc2 <USBD_StdEPReq>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	e00c      	b.n	8007ac0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fc13 	bl	80092e0 <USBD_LL_StallEP>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]
      break;
 8007abe:	bf00      	nop
  }

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d138      	bne.n	8007b50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ae4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d14a      	bne.n	8007b86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d913      	bls.n	8007b24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	1ad2      	subs	r2, r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	bf28      	it	cs
 8007b16:	4613      	movcs	r3, r2
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 ffc5 	bl	8008aac <USBD_CtlContinueRx>
 8007b22:	e030      	b.n	8007b86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d10b      	bne.n	8007b48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 ffc0 	bl	8008ace <USBD_CtlSendStatus>
 8007b4e:	e01a      	b.n	8007b86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d114      	bne.n	8007b86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00e      	beq.n	8007b86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	7afa      	ldrb	r2, [r7, #11]
 8007b72:	4611      	mov	r1, r2
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	4798      	blx	r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	e000      	b.n	8007b88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d16b      	bne.n	8007c7c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3314      	adds	r3, #20
 8007ba8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d156      	bne.n	8007c62 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d914      	bls.n	8007bea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 ff3a 	bl	8008a50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2200      	movs	r2, #0
 8007be0:	2100      	movs	r1, #0
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f001 fc27 	bl	8009436 <USBD_LL_PrepareReceive>
 8007be8:	e03b      	b.n	8007c62 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d11c      	bne.n	8007c30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d316      	bcc.n	8007c30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d20f      	bcs.n	8007c30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c10:	2200      	movs	r2, #0
 8007c12:	2100      	movs	r1, #0
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 ff1b 	bl	8008a50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c22:	2300      	movs	r3, #0
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 fc04 	bl	8009436 <USBD_LL_PrepareReceive>
 8007c2e:	e018      	b.n	8007c62 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d10b      	bne.n	8007c54 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c54:	2180      	movs	r1, #128	; 0x80
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 fb42 	bl	80092e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 ff49 	bl	8008af4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d122      	bne.n	8007cb2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fe98 	bl	80079a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c7a:	e01a      	b.n	8007cb2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d114      	bne.n	8007cb2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00e      	beq.n	8007cb2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	7afa      	ldrb	r2, [r7, #11]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	e000      	b.n	8007cb4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e02f      	b.n	8007d50 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00f      	beq.n	8007d1a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6852      	ldr	r2, [r2, #4]
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	4611      	mov	r1, r2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d1a:	2340      	movs	r3, #64	; 0x40
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fa98 	bl	8009256 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2240      	movs	r2, #64	; 0x40
 8007d32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d36:	2340      	movs	r3, #64	; 0x40
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fa8a 	bl	8009256 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2240      	movs	r2, #64	; 0x40
 8007d4c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2204      	movs	r2, #4
 8007d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d106      	bne.n	8007dc6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e012      	b.n	8007e10 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d10b      	bne.n	8007e0e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e36:	8a3b      	ldrh	r3, [r7, #16]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	b21a      	sxth	r2, r3
 8007e3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e46:	89fb      	ldrh	r3, [r7, #14]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e6a:	2b40      	cmp	r3, #64	; 0x40
 8007e6c:	d005      	beq.n	8007e7a <USBD_StdDevReq+0x26>
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d853      	bhi.n	8007f1a <USBD_StdDevReq+0xc6>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <USBD_StdDevReq+0x3a>
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	d14f      	bne.n	8007f1a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e04a      	b.n	8007f24 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	785b      	ldrb	r3, [r3, #1]
 8007e92:	2b09      	cmp	r3, #9
 8007e94:	d83b      	bhi.n	8007f0e <USBD_StdDevReq+0xba>
 8007e96:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <USBD_StdDevReq+0x48>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007f05 	.word	0x08007f05
 8007ea4:	08007f0f 	.word	0x08007f0f
 8007ea8:	08007efb 	.word	0x08007efb
 8007eac:	08007f0f 	.word	0x08007f0f
 8007eb0:	08007ecf 	.word	0x08007ecf
 8007eb4:	08007ec5 	.word	0x08007ec5
 8007eb8:	08007f0f 	.word	0x08007f0f
 8007ebc:	08007ee7 	.word	0x08007ee7
 8007ec0:	08007ed9 	.word	0x08007ed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9de 	bl	8008288 <USBD_GetDescriptor>
          break;
 8007ecc:	e024      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb6d 	bl	80085b0 <USBD_SetAddress>
          break;
 8007ed6:	e01f      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fbac 	bl	8008638 <USBD_SetConfig>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ee4:	e018      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc4b 	bl	8008784 <USBD_GetConfig>
          break;
 8007eee:	e013      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fc7c 	bl	80087f0 <USBD_GetStatus>
          break;
 8007ef8:	e00e      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fcab 	bl	8008858 <USBD_SetFeature>
          break;
 8007f02:	e009      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fcba 	bl	8008880 <USBD_ClrFeature>
          break;
 8007f0c:	e004      	b.n	8007f18 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fd11 	bl	8008938 <USBD_CtlError>
          break;
 8007f16:	bf00      	nop
      }
      break;
 8007f18:	e004      	b.n	8007f24 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fd0b 	bl	8008938 <USBD_CtlError>
      break;
 8007f22:	bf00      	nop
  }

  return ret;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop

08007f30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d005      	beq.n	8007f56 <USBD_StdItfReq+0x26>
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	d82f      	bhi.n	8007fae <USBD_StdItfReq+0x7e>
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <USBD_StdItfReq+0x26>
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d12b      	bne.n	8007fae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d81d      	bhi.n	8007fa0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	889b      	ldrh	r3, [r3, #4]
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d813      	bhi.n	8007f96 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	4798      	blx	r3
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	88db      	ldrh	r3, [r3, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d110      	bne.n	8007faa <USBD_StdItfReq+0x7a>
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10d      	bne.n	8007faa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fd9d 	bl	8008ace <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f94:	e009      	b.n	8007faa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fccd 	bl	8008938 <USBD_CtlError>
          break;
 8007f9e:	e004      	b.n	8007faa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fcc8 	bl	8008938 <USBD_CtlError>
          break;
 8007fa8:	e000      	b.n	8007fac <USBD_StdItfReq+0x7c>
          break;
 8007faa:	bf00      	nop
      }
      break;
 8007fac:	e004      	b.n	8007fb8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fcc1 	bl	8008938 <USBD_CtlError>
      break;
 8007fb6:	bf00      	nop
  }

  return ret;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	889b      	ldrh	r3, [r3, #4]
 8007fd4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fde:	2b40      	cmp	r3, #64	; 0x40
 8007fe0:	d007      	beq.n	8007ff2 <USBD_StdEPReq+0x30>
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	f200 8145 	bhi.w	8008272 <USBD_StdEPReq+0x2b0>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00c      	beq.n	8008006 <USBD_StdEPReq+0x44>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	f040 8140 	bne.w	8008272 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]
      break;
 8008004:	e13a      	b.n	800827c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b03      	cmp	r3, #3
 800800c:	d007      	beq.n	800801e <USBD_StdEPReq+0x5c>
 800800e:	2b03      	cmp	r3, #3
 8008010:	f300 8129 	bgt.w	8008266 <USBD_StdEPReq+0x2a4>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d07f      	beq.n	8008118 <USBD_StdEPReq+0x156>
 8008018:	2b01      	cmp	r3, #1
 800801a:	d03c      	beq.n	8008096 <USBD_StdEPReq+0xd4>
 800801c:	e123      	b.n	8008266 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d002      	beq.n	8008030 <USBD_StdEPReq+0x6e>
 800802a:	2b03      	cmp	r3, #3
 800802c:	d016      	beq.n	800805c <USBD_StdEPReq+0x9a>
 800802e:	e02c      	b.n	800808a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00d      	beq.n	8008052 <USBD_StdEPReq+0x90>
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b80      	cmp	r3, #128	; 0x80
 800803a:	d00a      	beq.n	8008052 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f94d 	bl	80092e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008046:	2180      	movs	r1, #128	; 0x80
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 f949 	bl	80092e0 <USBD_LL_StallEP>
 800804e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008050:	e020      	b.n	8008094 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fc6f 	bl	8008938 <USBD_CtlError>
              break;
 800805a:	e01b      	b.n	8008094 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	885b      	ldrh	r3, [r3, #2]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10e      	bne.n	8008082 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <USBD_StdEPReq+0xc0>
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d008      	beq.n	8008082 <USBD_StdEPReq+0xc0>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	88db      	ldrh	r3, [r3, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 f92f 	bl	80092e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fd23 	bl	8008ace <USBD_CtlSendStatus>

              break;
 8008088:	e004      	b.n	8008094 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fc53 	bl	8008938 <USBD_CtlError>
              break;
 8008092:	bf00      	nop
          }
          break;
 8008094:	e0ec      	b.n	8008270 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d002      	beq.n	80080a8 <USBD_StdEPReq+0xe6>
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d016      	beq.n	80080d4 <USBD_StdEPReq+0x112>
 80080a6:	e030      	b.n	800810a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00d      	beq.n	80080ca <USBD_StdEPReq+0x108>
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b80      	cmp	r3, #128	; 0x80
 80080b2:	d00a      	beq.n	80080ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 f911 	bl	80092e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080be:	2180      	movs	r1, #128	; 0x80
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f90d 	bl	80092e0 <USBD_LL_StallEP>
 80080c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080c8:	e025      	b.n	8008116 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fc33 	bl	8008938 <USBD_CtlError>
              break;
 80080d2:	e020      	b.n	8008116 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	885b      	ldrh	r3, [r3, #2]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d11b      	bne.n	8008114 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f917 	bl	800931e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fcec 	bl	8008ace <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008108:	e004      	b.n	8008114 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fc13 	bl	8008938 <USBD_CtlError>
              break;
 8008112:	e000      	b.n	8008116 <USBD_StdEPReq+0x154>
              break;
 8008114:	bf00      	nop
          }
          break;
 8008116:	e0ab      	b.n	8008270 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d002      	beq.n	800812a <USBD_StdEPReq+0x168>
 8008124:	2b03      	cmp	r3, #3
 8008126:	d032      	beq.n	800818e <USBD_StdEPReq+0x1cc>
 8008128:	e097      	b.n	800825a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <USBD_StdEPReq+0x17e>
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	2b80      	cmp	r3, #128	; 0x80
 8008134:	d004      	beq.n	8008140 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fbfd 	bl	8008938 <USBD_CtlError>
                break;
 800813e:	e091      	b.n	8008264 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	da0b      	bge.n	8008160 <USBD_StdEPReq+0x19e>
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	3310      	adds	r3, #16
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	3304      	adds	r3, #4
 800815e:	e00b      	b.n	8008178 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2202      	movs	r2, #2
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fc47 	bl	8008a1a <USBD_CtlSendData>
              break;
 800818c:	e06a      	b.n	8008264 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800818e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da11      	bge.n	80081ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	3324      	adds	r3, #36	; 0x24
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d117      	bne.n	80081e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fbc0 	bl	8008938 <USBD_CtlError>
                  break;
 80081b8:	e054      	b.n	8008264 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	f003 020f 	and.w	r2, r3, #15
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fbad 	bl	8008938 <USBD_CtlError>
                  break;
 80081de:	e041      	b.n	8008264 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da0b      	bge.n	8008200 <USBD_StdEPReq+0x23e>
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	3310      	adds	r3, #16
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	e00b      	b.n	8008218 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	3304      	adds	r3, #4
 8008218:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <USBD_StdEPReq+0x264>
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b80      	cmp	r3, #128	; 0x80
 8008224:	d103      	bne.n	800822e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e00e      	b.n	800824c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f892 	bl	800935c <USBD_LL_IsStallEP>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2201      	movs	r2, #1
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e002      	b.n	800824c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fbe1 	bl	8008a1a <USBD_CtlSendData>
              break;
 8008258:	e004      	b.n	8008264 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fb6b 	bl	8008938 <USBD_CtlError>
              break;
 8008262:	bf00      	nop
          }
          break;
 8008264:	e004      	b.n	8008270 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fb65 	bl	8008938 <USBD_CtlError>
          break;
 800826e:	bf00      	nop
      }
      break;
 8008270:	e004      	b.n	800827c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fb5f 	bl	8008938 <USBD_CtlError>
      break;
 800827a:	bf00      	nop
  }

  return ret;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b0e      	cmp	r3, #14
 80082aa:	f200 8152 	bhi.w	8008552 <USBD_GetDescriptor+0x2ca>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <USBD_GetDescriptor+0x2c>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	08008325 	.word	0x08008325
 80082b8:	0800833d 	.word	0x0800833d
 80082bc:	0800837d 	.word	0x0800837d
 80082c0:	08008553 	.word	0x08008553
 80082c4:	08008553 	.word	0x08008553
 80082c8:	080084f3 	.word	0x080084f3
 80082cc:	0800851f 	.word	0x0800851f
 80082d0:	08008553 	.word	0x08008553
 80082d4:	08008553 	.word	0x08008553
 80082d8:	08008553 	.word	0x08008553
 80082dc:	08008553 	.word	0x08008553
 80082e0:	08008553 	.word	0x08008553
 80082e4:	08008553 	.word	0x08008553
 80082e8:	08008553 	.word	0x08008553
 80082ec:	080082f1 	.word	0x080082f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	7c12      	ldrb	r2, [r2, #16]
 8008308:	f107 0108 	add.w	r1, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008312:	e126      	b.n	8008562 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb0e 	bl	8008938 <USBD_CtlError>
        err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
      break;
 8008322:	e11e      	b.n	8008562 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	7c12      	ldrb	r2, [r2, #16]
 8008330:	f107 0108 	add.w	r1, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
      break;
 800833a:	e112      	b.n	8008562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7c1b      	ldrb	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10d      	bne.n	8008360 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f107 0208 	add.w	r2, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	2202      	movs	r2, #2
 800835c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800835e:	e100      	b.n	8008562 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	f107 0208 	add.w	r2, r7, #8
 800836c:	4610      	mov	r0, r2
 800836e:	4798      	blx	r3
 8008370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3301      	adds	r3, #1
 8008376:	2202      	movs	r2, #2
 8008378:	701a      	strb	r2, [r3, #0]
      break;
 800837a:	e0f2      	b.n	8008562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b05      	cmp	r3, #5
 8008384:	f200 80ac 	bhi.w	80084e0 <USBD_GetDescriptor+0x258>
 8008388:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <USBD_GetDescriptor+0x108>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	080083a9 	.word	0x080083a9
 8008394:	080083dd 	.word	0x080083dd
 8008398:	08008411 	.word	0x08008411
 800839c:	08008445 	.word	0x08008445
 80083a0:	08008479 	.word	0x08008479
 80083a4:	080084ad 	.word	0x080084ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e091      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fab2 	bl	8008938 <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e089      	b.n	80084f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fe:	e077      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa98 	bl	8008938 <USBD_CtlError>
            err++;
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	3301      	adds	r3, #1
 800840c:	72fb      	strb	r3, [r7, #11]
          break;
 800840e:	e06f      	b.n	80084f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008432:	e05d      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa7e 	bl	8008938 <USBD_CtlError>
            err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
          break;
 8008442:	e055      	b.n	80084f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	7c12      	ldrb	r2, [r2, #16]
 800845c:	f107 0108 	add.w	r1, r7, #8
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008466:	e043      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa64 	bl	8008938 <USBD_CtlError>
            err++;
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	3301      	adds	r3, #1
 8008474:	72fb      	strb	r3, [r7, #11]
          break;
 8008476:	e03b      	b.n	80084f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00b      	beq.n	800849c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	7c12      	ldrb	r2, [r2, #16]
 8008490:	f107 0108 	add.w	r1, r7, #8
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800849a:	e029      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa4a 	bl	8008938 <USBD_CtlError>
            err++;
 80084a4:	7afb      	ldrb	r3, [r7, #11]
 80084a6:	3301      	adds	r3, #1
 80084a8:	72fb      	strb	r3, [r7, #11]
          break;
 80084aa:	e021      	b.n	80084f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	7c12      	ldrb	r2, [r2, #16]
 80084c4:	f107 0108 	add.w	r1, r7, #8
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
 80084cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ce:	e00f      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa30 	bl	8008938 <USBD_CtlError>
            err++;
 80084d8:	7afb      	ldrb	r3, [r7, #11]
 80084da:	3301      	adds	r3, #1
 80084dc:	72fb      	strb	r3, [r7, #11]
          break;
 80084de:	e007      	b.n	80084f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa28 	bl	8008938 <USBD_CtlError>
          err++;
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	3301      	adds	r3, #1
 80084ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80084ee:	bf00      	nop
      }
      break;
 80084f0:	e037      	b.n	8008562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	7c1b      	ldrb	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	f107 0208 	add.w	r2, r7, #8
 8008506:	4610      	mov	r0, r2
 8008508:	4798      	blx	r3
 800850a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800850c:	e029      	b.n	8008562 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa11 	bl	8008938 <USBD_CtlError>
        err++;
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	3301      	adds	r3, #1
 800851a:	72fb      	strb	r3, [r7, #11]
      break;
 800851c:	e021      	b.n	8008562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	7c1b      	ldrb	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10d      	bne.n	8008542 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f107 0208 	add.w	r2, r7, #8
 8008532:	4610      	mov	r0, r2
 8008534:	4798      	blx	r3
 8008536:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	2207      	movs	r2, #7
 800853e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008540:	e00f      	b.n	8008562 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f9f7 	bl	8008938 <USBD_CtlError>
        err++;
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	3301      	adds	r3, #1
 800854e:	72fb      	strb	r3, [r7, #11]
      break;
 8008550:	e007      	b.n	8008562 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f9ef 	bl	8008938 <USBD_CtlError>
      err++;
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	3301      	adds	r3, #1
 800855e:	72fb      	strb	r3, [r7, #11]
      break;
 8008560:	bf00      	nop
  }

  if (err != 0U)
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11e      	bne.n	80085a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	88db      	ldrh	r3, [r3, #6]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d016      	beq.n	800859e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008570:	893b      	ldrh	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00e      	beq.n	8008594 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	88da      	ldrh	r2, [r3, #6]
 800857a:	893b      	ldrh	r3, [r7, #8]
 800857c:	4293      	cmp	r3, r2
 800857e:	bf28      	it	cs
 8008580:	4613      	movcs	r3, r2
 8008582:	b29b      	uxth	r3, r3
 8008584:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008586:	893b      	ldrh	r3, [r7, #8]
 8008588:	461a      	mov	r2, r3
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fa44 	bl	8008a1a <USBD_CtlSendData>
 8008592:	e009      	b.n	80085a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9ce 	bl	8008938 <USBD_CtlError>
 800859c:	e004      	b.n	80085a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa95 	bl	8008ace <USBD_CtlSendStatus>
 80085a4:	e000      	b.n	80085a8 <USBD_GetDescriptor+0x320>
    return;
 80085a6:	bf00      	nop
  }
}
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop

080085b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	889b      	ldrh	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d131      	bne.n	8008626 <USBD_SetAddress+0x76>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	88db      	ldrh	r3, [r3, #6]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12d      	bne.n	8008626 <USBD_SetAddress+0x76>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	885b      	ldrh	r3, [r3, #2]
 80085ce:	2b7f      	cmp	r3, #127	; 0x7f
 80085d0:	d829      	bhi.n	8008626 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d104      	bne.n	80085f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f9a3 	bl	8008938 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f2:	e01d      	b.n	8008630 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	7bfa      	ldrb	r2, [r7, #15]
 80085f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fed8 	bl	80093b6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa61 	bl	8008ace <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861a:	e009      	b.n	8008630 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008624:	e004      	b.n	8008630 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f985 	bl	8008938 <USBD_CtlError>
  }
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	4b4c      	ldr	r3, [pc, #304]	; (8008780 <USBD_SetConfig+0x148>)
 800864e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008650:	4b4b      	ldr	r3, [pc, #300]	; (8008780 <USBD_SetConfig+0x148>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d905      	bls.n	8008664 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f96c 	bl	8008938 <USBD_CtlError>
    return USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	e088      	b.n	8008776 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d002      	beq.n	8008676 <USBD_SetConfig+0x3e>
 8008670:	2b03      	cmp	r3, #3
 8008672:	d025      	beq.n	80086c0 <USBD_SetConfig+0x88>
 8008674:	e071      	b.n	800875a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008676:	4b42      	ldr	r3, [pc, #264]	; (8008780 <USBD_SetConfig+0x148>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01c      	beq.n	80086b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800867e:	4b40      	ldr	r3, [pc, #256]	; (8008780 <USBD_SetConfig+0x148>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008688:	4b3d      	ldr	r3, [pc, #244]	; (8008780 <USBD_SetConfig+0x148>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff f992 	bl	80079b8 <USBD_SetClassConfig>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d004      	beq.n	80086a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f949 	bl	8008938 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086a6:	e065      	b.n	8008774 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa10 	bl	8008ace <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086b6:	e05d      	b.n	8008774 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa08 	bl	8008ace <USBD_CtlSendStatus>
      break;
 80086be:	e059      	b.n	8008774 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80086c0:	4b2f      	ldr	r3, [pc, #188]	; (8008780 <USBD_SetConfig+0x148>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d112      	bne.n	80086ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <USBD_SetConfig+0x148>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086da:	4b29      	ldr	r3, [pc, #164]	; (8008780 <USBD_SetConfig+0x148>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff f985 	bl	80079f0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9f1 	bl	8008ace <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086ec:	e042      	b.n	8008774 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80086ee:	4b24      	ldr	r3, [pc, #144]	; (8008780 <USBD_SetConfig+0x148>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d02a      	beq.n	8008752 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff f973 	bl	80079f0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800870a:	4b1d      	ldr	r3, [pc, #116]	; (8008780 <USBD_SetConfig+0x148>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008714:	4b1a      	ldr	r3, [pc, #104]	; (8008780 <USBD_SetConfig+0x148>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff f94c 	bl	80079b8 <USBD_SetClassConfig>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f903 	bl	8008938 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff f958 	bl	80079f0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2202      	movs	r2, #2
 8008744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008748:	e014      	b.n	8008774 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9bf 	bl	8008ace <USBD_CtlSendStatus>
      break;
 8008750:	e010      	b.n	8008774 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f9bb 	bl	8008ace <USBD_CtlSendStatus>
      break;
 8008758:	e00c      	b.n	8008774 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8eb 	bl	8008938 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008762:	4b07      	ldr	r3, [pc, #28]	; (8008780 <USBD_SetConfig+0x148>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff f941 	bl	80079f0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800876e:	2303      	movs	r3, #3
 8008770:	73fb      	strb	r3, [r7, #15]
      break;
 8008772:	bf00      	nop
  }

  return ret;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200002cc 	.word	0x200002cc

08008784 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88db      	ldrh	r3, [r3, #6]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d004      	beq.n	80087a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8cd 	bl	8008938 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800879e:	e023      	b.n	80087e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	dc02      	bgt.n	80087b2 <USBD_GetConfig+0x2e>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc03      	bgt.n	80087b8 <USBD_GetConfig+0x34>
 80087b0:	e015      	b.n	80087de <USBD_GetConfig+0x5a>
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d00b      	beq.n	80087ce <USBD_GetConfig+0x4a>
 80087b6:	e012      	b.n	80087de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3308      	adds	r3, #8
 80087c2:	2201      	movs	r2, #1
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f927 	bl	8008a1a <USBD_CtlSendData>
        break;
 80087cc:	e00c      	b.n	80087e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3304      	adds	r3, #4
 80087d2:	2201      	movs	r2, #1
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f91f 	bl	8008a1a <USBD_CtlSendData>
        break;
 80087dc:	e004      	b.n	80087e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f8a9 	bl	8008938 <USBD_CtlError>
        break;
 80087e6:	bf00      	nop
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008800:	b2db      	uxtb	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	2b02      	cmp	r3, #2
 8008806:	d81e      	bhi.n	8008846 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	88db      	ldrh	r3, [r3, #6]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d004      	beq.n	800881a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f890 	bl	8008938 <USBD_CtlError>
        break;
 8008818:	e01a      	b.n	8008850 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f043 0202 	orr.w	r2, r3, #2
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	330c      	adds	r3, #12
 800883a:	2202      	movs	r2, #2
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f8eb 	bl	8008a1a <USBD_CtlSendData>
      break;
 8008844:	e004      	b.n	8008850 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f875 	bl	8008938 <USBD_CtlError>
      break;
 800884e:	bf00      	nop
  }
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d106      	bne.n	8008878 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f92b 	bl	8008ace <USBD_CtlSendStatus>
  }
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008890:	b2db      	uxtb	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	2b02      	cmp	r3, #2
 8008896:	d80b      	bhi.n	80088b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	885b      	ldrh	r3, [r3, #2]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10c      	bne.n	80088ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f910 	bl	8008ace <USBD_CtlSendStatus>
      }
      break;
 80088ae:	e004      	b.n	80088ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f840 	bl	8008938 <USBD_CtlError>
      break;
 80088b8:	e000      	b.n	80088bc <USBD_ClrFeature+0x3c>
      break;
 80088ba:	bf00      	nop
  }
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f7ff fa92 	bl	8007e18 <SWAPBYTE>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3301      	adds	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f7ff fa85 	bl	8007e18 <SWAPBYTE>
 800890e:	4603      	mov	r3, r0
 8008910:	461a      	mov	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fa78 	bl	8007e18 <SWAPBYTE>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	80da      	strh	r2, [r3, #6]
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008942:	2180      	movs	r1, #128	; 0x80
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fccb 	bl	80092e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800894a:	2100      	movs	r1, #0
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fcc7 	bl	80092e0 <USBD_LL_StallEP>
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d036      	beq.n	80089de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008974:	6938      	ldr	r0, [r7, #16]
 8008976:	f000 f836 	bl	80089e6 <USBD_GetLen>
 800897a:	4603      	mov	r3, r0
 800897c:	3301      	adds	r3, #1
 800897e:	b29b      	uxth	r3, r3
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008988:	7dfb      	ldrb	r3, [r7, #23]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	4413      	add	r3, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	701a      	strb	r2, [r3, #0]
  idx++;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
 8008996:	3301      	adds	r3, #1
 8008998:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	4413      	add	r3, r2
 80089a0:	2203      	movs	r2, #3
 80089a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	3301      	adds	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089aa:	e013      	b.n	80089d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	7812      	ldrb	r2, [r2, #0]
 80089b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	3301      	adds	r3, #1
 80089bc:	613b      	str	r3, [r7, #16]
    idx++;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	3301      	adds	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4413      	add	r3, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	3301      	adds	r3, #1
 80089d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e7      	bne.n	80089ac <USBD_GetString+0x52>
 80089dc:	e000      	b.n	80089e0 <USBD_GetString+0x86>
    return;
 80089de:	bf00      	nop
  }
}
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b085      	sub	sp, #20
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089f6:	e005      	b.n	8008a04 <USBD_GetLen+0x1e>
  {
    len++;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	3301      	adds	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f5      	bne.n	80089f8 <USBD_GetLen+0x12>
  }

  return len;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fcd7 	bl	80093f4 <USBD_LL_Transmit>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	2100      	movs	r1, #0
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 fcc6 	bl	80093f4 <USBD_LL_Transmit>

  return USBD_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2203      	movs	r2, #3
 8008a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 fcca 	bl	8009436 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f000 fcb9 	bl	8009436 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fc85 	bl	80093f4 <USBD_LL_Transmit>

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2205      	movs	r2, #5
 8008b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b04:	2300      	movs	r3, #0
 8008b06:	2200      	movs	r2, #0
 8008b08:	2100      	movs	r1, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fc93 	bl	8009436 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008b20:	2200      	movs	r2, #0
 8008b22:	4912      	ldr	r1, [pc, #72]	; (8008b6c <MX_USB_Device_Init+0x50>)
 8008b24:	4812      	ldr	r0, [pc, #72]	; (8008b70 <MX_USB_Device_Init+0x54>)
 8008b26:	f7fe fed9 	bl	80078dc <USBD_Init>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008b30:	f7f7 fd36 	bl	80005a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008b34:	490f      	ldr	r1, [pc, #60]	; (8008b74 <MX_USB_Device_Init+0x58>)
 8008b36:	480e      	ldr	r0, [pc, #56]	; (8008b70 <MX_USB_Device_Init+0x54>)
 8008b38:	f7fe ff00 	bl	800793c <USBD_RegisterClass>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008b42:	f7f7 fd2d 	bl	80005a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008b46:	490c      	ldr	r1, [pc, #48]	; (8008b78 <MX_USB_Device_Init+0x5c>)
 8008b48:	4809      	ldr	r0, [pc, #36]	; (8008b70 <MX_USB_Device_Init+0x54>)
 8008b4a:	f7fe fe51 	bl	80077f0 <USBD_CDC_RegisterInterface>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008b54:	f7f7 fd24 	bl	80005a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008b58:	4805      	ldr	r0, [pc, #20]	; (8008b70 <MX_USB_Device_Init+0x54>)
 8008b5a:	f7fe ff16 	bl	800798a <USBD_Start>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008b64:	f7f7 fd1c 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008b68:	bf00      	nop
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000138 	.word	0x20000138
 8008b70:	200002d0 	.word	0x200002d0
 8008b74:	20000018 	.word	0x20000018
 8008b78:	20000124 	.word	0x20000124

08008b7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b80:	2200      	movs	r2, #0
 8008b82:	4905      	ldr	r1, [pc, #20]	; (8008b98 <CDC_Init_FS+0x1c>)
 8008b84:	4805      	ldr	r0, [pc, #20]	; (8008b9c <CDC_Init_FS+0x20>)
 8008b86:	f7fe fe48 	bl	800781a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b8a:	4905      	ldr	r1, [pc, #20]	; (8008ba0 <CDC_Init_FS+0x24>)
 8008b8c:	4803      	ldr	r0, [pc, #12]	; (8008b9c <CDC_Init_FS+0x20>)
 8008b8e:	f7fe fe62 	bl	8007856 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	200009a0 	.word	0x200009a0
 8008b9c:	200002d0 	.word	0x200002d0
 8008ba0:	200005a0 	.word	0x200005a0

08008ba4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b23      	cmp	r3, #35	; 0x23
 8008bc8:	f200 8098 	bhi.w	8008cfc <CDC_Control_FS+0x148>
 8008bcc:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <CDC_Control_FS+0x20>)
 8008bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd2:	bf00      	nop
 8008bd4:	08008cfd 	.word	0x08008cfd
 8008bd8:	08008cfd 	.word	0x08008cfd
 8008bdc:	08008cfd 	.word	0x08008cfd
 8008be0:	08008cfd 	.word	0x08008cfd
 8008be4:	08008cfd 	.word	0x08008cfd
 8008be8:	08008cfd 	.word	0x08008cfd
 8008bec:	08008cfd 	.word	0x08008cfd
 8008bf0:	08008cfd 	.word	0x08008cfd
 8008bf4:	08008cfd 	.word	0x08008cfd
 8008bf8:	08008cfd 	.word	0x08008cfd
 8008bfc:	08008cfd 	.word	0x08008cfd
 8008c00:	08008cfd 	.word	0x08008cfd
 8008c04:	08008cfd 	.word	0x08008cfd
 8008c08:	08008cfd 	.word	0x08008cfd
 8008c0c:	08008cfd 	.word	0x08008cfd
 8008c10:	08008cfd 	.word	0x08008cfd
 8008c14:	08008cfd 	.word	0x08008cfd
 8008c18:	08008cfd 	.word	0x08008cfd
 8008c1c:	08008cfd 	.word	0x08008cfd
 8008c20:	08008cfd 	.word	0x08008cfd
 8008c24:	08008cfd 	.word	0x08008cfd
 8008c28:	08008cfd 	.word	0x08008cfd
 8008c2c:	08008cfd 	.word	0x08008cfd
 8008c30:	08008cfd 	.word	0x08008cfd
 8008c34:	08008cfd 	.word	0x08008cfd
 8008c38:	08008cfd 	.word	0x08008cfd
 8008c3c:	08008cfd 	.word	0x08008cfd
 8008c40:	08008cfd 	.word	0x08008cfd
 8008c44:	08008cfd 	.word	0x08008cfd
 8008c48:	08008cfd 	.word	0x08008cfd
 8008c4c:	08008cfd 	.word	0x08008cfd
 8008c50:	08008cfd 	.word	0x08008cfd
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008ca9 	.word	0x08008ca9
 8008c5c:	08008cfd 	.word	0x08008cfd
 8008c60:	08008cfd 	.word	0x08008cfd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	431a      	orrs	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	3302      	adds	r3, #2
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	041b      	lsls	r3, r3, #16
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	3303      	adds	r3, #3
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	061b      	lsls	r3, r3, #24
 8008c86:	4313      	orrs	r3, r2
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <CDC_Control_FS+0x158>)
 8008c8c:	601a      	str	r2, [r3, #0]
		LineCoding.format     = pbuf[4];
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	791a      	ldrb	r2, [r3, #4]
 8008c92:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <CDC_Control_FS+0x158>)
 8008c94:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	795a      	ldrb	r2, [r3, #5]
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <CDC_Control_FS+0x158>)
 8008c9c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype   = pbuf[6];
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	799a      	ldrb	r2, [r3, #6]
 8008ca2:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <CDC_Control_FS+0x158>)
 8008ca4:	719a      	strb	r2, [r3, #6]

    break;
 8008ca6:	e02a      	b.n	8008cfe <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008ca8:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <CDC_Control_FS+0x158>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	0a1a      	lsrs	r2, r3, #8
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008cc0:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	0c1a      	lsrs	r2, r3, #16
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	3302      	adds	r3, #2
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	0e1a      	lsrs	r2, r3, #24
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	3303      	adds	r3, #3
 8008cd8:	b2d2      	uxtb	r2, r2
 8008cda:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <CDC_Control_FS+0x158>)
 8008ce2:	7912      	ldrb	r2, [r2, #4]
 8008ce4:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	3305      	adds	r3, #5
 8008cea:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cec:	7952      	ldrb	r2, [r2, #5]
 8008cee:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	3306      	adds	r3, #6
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <CDC_Control_FS+0x158>)
 8008cf6:	7992      	ldrb	r2, [r2, #6]
 8008cf8:	701a      	strb	r2, [r3, #0]

    break;
 8008cfa:	e000      	b.n	8008cfe <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cfc:	bf00      	nop
  }

  return (USBD_OK);
 8008cfe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	2000011c 	.word	0x2000011c

08008d10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	received_data = true;
 8008d1a:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <CDC_Receive_FS+0x34>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	701a      	strb	r2, [r3, #0]
	received_data_length = *Len;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	4b08      	ldr	r3, [pc, #32]	; (8008d48 <CDC_Receive_FS+0x38>)
 8008d28:	801a      	strh	r2, [r3, #0]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4807      	ldr	r0, [pc, #28]	; (8008d4c <CDC_Receive_FS+0x3c>)
 8008d2e:	f7fe fd92 	bl	8007856 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d32:	4806      	ldr	r0, [pc, #24]	; (8008d4c <CDC_Receive_FS+0x3c>)
 8008d34:	f7fe fda8 	bl	8007888 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000da2 	.word	0x20000da2
 8008d48:	20000da0 	.word	0x20000da0
 8008d4c:	200002d0 	.word	0x200002d0

08008d50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2212      	movs	r2, #18
 8008d84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008d86:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20000158 	.word	0x20000158

08008d98 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	6039      	str	r1, [r7, #0]
 8008da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2204      	movs	r2, #4
 8008da8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008daa:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	2000016c 	.word	0x2000016c

08008dbc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6039      	str	r1, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d105      	bne.n	8008dda <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	4907      	ldr	r1, [pc, #28]	; (8008df0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008dd2:	4808      	ldr	r0, [pc, #32]	; (8008df4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008dd4:	f7ff fdc1 	bl	800895a <USBD_GetString>
 8008dd8:	e004      	b.n	8008de4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4904      	ldr	r1, [pc, #16]	; (8008df0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008dde:	4805      	ldr	r0, [pc, #20]	; (8008df4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008de0:	f7ff fdbb 	bl	800895a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000da4 	.word	0x20000da4
 8008df4:	0800962c 	.word	0x0800962c

08008df8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	4904      	ldr	r1, [pc, #16]	; (8008e18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008e08:	4804      	ldr	r0, [pc, #16]	; (8008e1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008e0a:	f7ff fda6 	bl	800895a <USBD_GetString>
  return USBD_StrDesc;
 8008e0e:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000da4 	.word	0x20000da4
 8008e1c:	08009644 	.word	0x08009644

08008e20 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	6039      	str	r1, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	221a      	movs	r2, #26
 8008e30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e32:	f000 f843 	bl	8008ebc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008e36:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000170 	.word	0x20000170

08008e44 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4907      	ldr	r1, [pc, #28]	; (8008e78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008e5a:	4808      	ldr	r0, [pc, #32]	; (8008e7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008e5c:	f7ff fd7d 	bl	800895a <USBD_GetString>
 8008e60:	e004      	b.n	8008e6c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4904      	ldr	r1, [pc, #16]	; (8008e78 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008e68:	f7ff fd77 	bl	800895a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20000da4 	.word	0x20000da4
 8008e7c:	08009658 	.word	0x08009658

08008e80 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d105      	bne.n	8008e9e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4907      	ldr	r1, [pc, #28]	; (8008eb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008e96:	4808      	ldr	r0, [pc, #32]	; (8008eb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008e98:	f7ff fd5f 	bl	800895a <USBD_GetString>
 8008e9c:	e004      	b.n	8008ea8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	4904      	ldr	r1, [pc, #16]	; (8008eb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008ea2:	4805      	ldr	r0, [pc, #20]	; (8008eb8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008ea4:	f7ff fd59 	bl	800895a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000da4 	.word	0x20000da4
 8008eb8:	08009664 	.word	0x08009664

08008ebc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <Get_SerialNum+0x44>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ec8:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <Get_SerialNum+0x48>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ece:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <Get_SerialNum+0x4c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	4909      	ldr	r1, [pc, #36]	; (8008f0c <Get_SerialNum+0x50>)
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f814 	bl	8008f14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008eec:	2204      	movs	r2, #4
 8008eee:	4908      	ldr	r1, [pc, #32]	; (8008f10 <Get_SerialNum+0x54>)
 8008ef0:	68b8      	ldr	r0, [r7, #8]
 8008ef2:	f000 f80f 	bl	8008f14 <IntToUnicode>
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	1fff7590 	.word	0x1fff7590
 8008f04:	1fff7594 	.word	0x1fff7594
 8008f08:	1fff7598 	.word	0x1fff7598
 8008f0c:	20000172 	.word	0x20000172
 8008f10:	20000182 	.word	0x20000182

08008f14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
 8008f2a:	e027      	b.n	8008f7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	0f1b      	lsrs	r3, r3, #28
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	d80b      	bhi.n	8008f4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	0f1b      	lsrs	r3, r3, #28
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4619      	mov	r1, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	440b      	add	r3, r1
 8008f44:	3230      	adds	r2, #48	; 0x30
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e00a      	b.n	8008f62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	4619      	mov	r1, r3
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	440b      	add	r3, r1
 8008f5c:	3237      	adds	r2, #55	; 0x37
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	75fb      	strb	r3, [r7, #23]
 8008f7c:	7dfa      	ldrb	r2, [r7, #23]
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d3d3      	bcc.n	8008f2c <IntToUnicode+0x18>
  }
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
	...

08008f94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b094      	sub	sp, #80	; 0x50
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f9c:	f107 030c 	add.w	r3, r7, #12
 8008fa0:	2244      	movs	r2, #68	; 0x44
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fafb 	bl	80095a0 <memset>
  if(pcdHandle->Instance==USB)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a15      	ldr	r2, [pc, #84]	; (8009004 <HAL_PCD_MspInit+0x70>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d122      	bne.n	8008ffa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fb8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008fbe:	f107 030c 	add.w	r3, r7, #12
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fb fcd2 	bl	800496c <HAL_RCCEx_PeriphCLKConfig>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008fce:	f7f7 fae7 	bl	80005a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	; (8009008 <HAL_PCD_MspInit+0x74>)
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	4a0c      	ldr	r2, [pc, #48]	; (8009008 <HAL_PCD_MspInit+0x74>)
 8008fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <HAL_PCD_MspInit+0x74>)
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	2014      	movs	r0, #20
 8008ff0:	f7f8 fd1d 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008ff4:	2014      	movs	r0, #20
 8008ff6:	f7f8 fd34 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ffa:	bf00      	nop
 8008ffc:	3750      	adds	r7, #80	; 0x50
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40005c00 	.word	0x40005c00
 8009008:	40021000 	.word	0x40021000

0800900c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f7fe fcfc 	bl	8007a20 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009042:	78fa      	ldrb	r2, [r7, #3]
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	440b      	add	r3, r1
 8009050:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	4619      	mov	r1, r3
 800905a:	f7fe fd36 	bl	8007aca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	440b      	add	r3, r1
 8009086:	333c      	adds	r3, #60	; 0x3c
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	4619      	mov	r1, r3
 800908e:	f7fe fd7f 	bl	8007b90 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fe fe93 	bl	8007dd4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80090ae:	bf00      	nop
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090be:	2301      	movs	r3, #1
 80090c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d001      	beq.n	80090ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090ca:	f7f7 fa69 	bl	80005a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090d4:	7bfa      	ldrb	r2, [r7, #15]
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fe3d 	bl	8007d58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe fde9 	bl	8007cbc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fe38 	bl	8007d78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <HAL_PCD_SuspendCallback+0x30>)
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	4a03      	ldr	r2, [pc, #12]	; (8009124 <HAL_PCD_SuspendCallback+0x30>)
 8009116:	f043 0306 	orr.w	r3, r3, #6
 800911a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	e000ed00 	.word	0xe000ed00

08009128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d007      	beq.n	8009148 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009138:	4b08      	ldr	r3, [pc, #32]	; (800915c <HAL_PCD_ResumeCallback+0x34>)
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	4a07      	ldr	r2, [pc, #28]	; (800915c <HAL_PCD_ResumeCallback+0x34>)
 800913e:	f023 0306 	bic.w	r3, r3, #6
 8009142:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009144:	f000 f9fa 	bl	800953c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fe28 	bl	8007da4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	e000ed00 	.word	0xe000ed00

08009160 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009168:	4a2b      	ldr	r2, [pc, #172]	; (8009218 <USBD_LL_Init+0xb8>)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a29      	ldr	r2, [pc, #164]	; (8009218 <USBD_LL_Init+0xb8>)
 8009174:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009178:	4b27      	ldr	r3, [pc, #156]	; (8009218 <USBD_LL_Init+0xb8>)
 800917a:	4a28      	ldr	r2, [pc, #160]	; (800921c <USBD_LL_Init+0xbc>)
 800917c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800917e:	4b26      	ldr	r3, [pc, #152]	; (8009218 <USBD_LL_Init+0xb8>)
 8009180:	2208      	movs	r2, #8
 8009182:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009184:	4b24      	ldr	r3, [pc, #144]	; (8009218 <USBD_LL_Init+0xb8>)
 8009186:	2202      	movs	r2, #2
 8009188:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800918a:	4b23      	ldr	r3, [pc, #140]	; (8009218 <USBD_LL_Init+0xb8>)
 800918c:	2202      	movs	r2, #2
 800918e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009190:	4b21      	ldr	r3, [pc, #132]	; (8009218 <USBD_LL_Init+0xb8>)
 8009192:	2200      	movs	r2, #0
 8009194:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <USBD_LL_Init+0xb8>)
 8009198:	2200      	movs	r2, #0
 800919a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800919c:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <USBD_LL_Init+0xb8>)
 800919e:	2200      	movs	r2, #0
 80091a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091a2:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <USBD_LL_Init+0xb8>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091a8:	481b      	ldr	r0, [pc, #108]	; (8009218 <USBD_LL_Init+0xb8>)
 80091aa:	f7f9 f8ff 	bl	80023ac <HAL_PCD_Init>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80091b4:	f7f7 f9f4 	bl	80005a0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091be:	2318      	movs	r3, #24
 80091c0:	2200      	movs	r2, #0
 80091c2:	2100      	movs	r1, #0
 80091c4:	f7fa fdb8 	bl	8003d38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091ce:	2358      	movs	r3, #88	; 0x58
 80091d0:	2200      	movs	r2, #0
 80091d2:	2180      	movs	r1, #128	; 0x80
 80091d4:	f7fa fdb0 	bl	8003d38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091de:	23c0      	movs	r3, #192	; 0xc0
 80091e0:	2200      	movs	r2, #0
 80091e2:	2181      	movs	r1, #129	; 0x81
 80091e4:	f7fa fda8 	bl	8003d38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091f2:	2200      	movs	r2, #0
 80091f4:	2101      	movs	r1, #1
 80091f6:	f7fa fd9f 	bl	8003d38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009204:	2200      	movs	r2, #0
 8009206:	2182      	movs	r1, #130	; 0x82
 8009208:	f7fa fd96 	bl	8003d38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000fa4 	.word	0x20000fa4
 800921c:	40005c00 	.word	0x40005c00

08009220 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009236:	4618      	mov	r0, r3
 8009238:	f7f9 f99d 	bl	8002576 <HAL_PCD_Start>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f980 	bl	8009548 <USBD_Get_USB_Status>
 8009248:	4603      	mov	r3, r0
 800924a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924c:	7bbb      	ldrb	r3, [r7, #14]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	4603      	mov	r3, r0
 8009266:	70fb      	strb	r3, [r7, #3]
 8009268:	460b      	mov	r3, r1
 800926a:	70bb      	strb	r3, [r7, #2]
 800926c:	4613      	mov	r3, r2
 800926e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800927e:	78bb      	ldrb	r3, [r7, #2]
 8009280:	883a      	ldrh	r2, [r7, #0]
 8009282:	78f9      	ldrb	r1, [r7, #3]
 8009284:	f7f9 fae5 	bl	8002852 <HAL_PCD_EP_Open>
 8009288:	4603      	mov	r3, r0
 800928a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f95a 	bl	8009548 <USBD_Get_USB_Status>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009298:	7bbb      	ldrb	r3, [r7, #14]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	4611      	mov	r1, r2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7f9 fb2c 	bl	800291e <HAL_PCD_EP_Close>
 80092c6:	4603      	mov	r3, r0
 80092c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f93b 	bl	8009548 <USBD_Get_USB_Status>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	4611      	mov	r1, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f7f9 fbed 	bl	8002ade <HAL_PCD_EP_SetStall>
 8009304:	4603      	mov	r3, r0
 8009306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f91c 	bl	8009548 <USBD_Get_USB_Status>
 8009310:	4603      	mov	r3, r0
 8009312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009314:	7bbb      	ldrb	r3, [r7, #14]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009338:	78fa      	ldrb	r2, [r7, #3]
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f7f9 fc20 	bl	8002b82 <HAL_PCD_EP_ClrStall>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	4618      	mov	r0, r3
 800934a:	f000 f8fd 	bl	8009548 <USBD_Get_USB_Status>
 800934e:	4603      	mov	r3, r0
 8009350:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009352:	7bbb      	ldrb	r3, [r7, #14]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800936e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009374:	2b00      	cmp	r3, #0
 8009376:	da0c      	bge.n	8009392 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	440b      	add	r3, r1
 800938c:	3302      	adds	r3, #2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	e00b      	b.n	80093aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009398:	68f9      	ldr	r1, [r7, #12]
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	440b      	add	r3, r1
 80093a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80093a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7f9 fa17 	bl	8002808 <HAL_PCD_SetAddress>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f8b1 	bl	8009548 <USBD_Get_USB_Status>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	460b      	mov	r3, r1
 8009402:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009412:	7af9      	ldrb	r1, [r7, #11]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	f7f9 fb1e 	bl	8002a58 <HAL_PCD_EP_Transmit>
 800941c:	4603      	mov	r3, r0
 800941e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	4618      	mov	r0, r3
 8009424:	f000 f890 	bl	8009548 <USBD_Get_USB_Status>
 8009428:	4603      	mov	r3, r0
 800942a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800942c:	7dbb      	ldrb	r3, [r7, #22]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	460b      	mov	r3, r1
 8009444:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009454:	7af9      	ldrb	r1, [r7, #11]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	f7f9 faa8 	bl	80029ae <HAL_PCD_EP_Receive>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f86f 	bl	8009548 <USBD_Get_USB_Status>
 800946a:	4603      	mov	r3, r0
 800946c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800946e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800948a:	78fa      	ldrb	r2, [r7, #3]
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f7f9 faca 	bl	8002a28 <HAL_PCD_EP_GetRxCount>
 8009494:	4603      	mov	r3, r0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <HAL_PCDEx_LPM_Callback+0x18>
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d013      	beq.n	80094de <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80094b6:	e023      	b.n	8009500 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80094c0:	f000 f83c 	bl	800953c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c4:	4b10      	ldr	r3, [pc, #64]	; (8009508 <HAL_PCDEx_LPM_Callback+0x68>)
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	4a0f      	ldr	r2, [pc, #60]	; (8009508 <HAL_PCDEx_LPM_Callback+0x68>)
 80094ca:	f023 0306 	bic.w	r3, r3, #6
 80094ce:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fc64 	bl	8007da4 <USBD_LL_Resume>
    break;
 80094dc:	e010      	b.n	8009500 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe fc47 	bl	8007d78 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <HAL_PCDEx_LPM_Callback+0x68>)
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	4a04      	ldr	r2, [pc, #16]	; (8009508 <HAL_PCDEx_LPM_Callback+0x68>)
 80094f8:	f043 0306 	orr.w	r3, r3, #6
 80094fc:	6113      	str	r3, [r2, #16]
    break;
 80094fe:	bf00      	nop
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	e000ed00 	.word	0xe000ed00

0800950c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009514:	4b03      	ldr	r3, [pc, #12]	; (8009524 <USBD_static_malloc+0x18>)
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20001298 	.word	0x20001298

08009528 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]

}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009540:	f7f6 fe86 	bl	8000250 <SystemClock_Config>
}
 8009544:	bf00      	nop
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	2b03      	cmp	r3, #3
 800955a:	d817      	bhi.n	800958c <USBD_Get_USB_Status+0x44>
 800955c:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <USBD_Get_USB_Status+0x1c>)
 800955e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009562:	bf00      	nop
 8009564:	08009575 	.word	0x08009575
 8009568:	0800957b 	.word	0x0800957b
 800956c:	08009581 	.word	0x08009581
 8009570:	08009587 	.word	0x08009587
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
    break;
 8009578:	e00b      	b.n	8009592 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800957a:	2303      	movs	r3, #3
 800957c:	73fb      	strb	r3, [r7, #15]
    break;
 800957e:	e008      	b.n	8009592 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009580:	2301      	movs	r3, #1
 8009582:	73fb      	strb	r3, [r7, #15]
    break;
 8009584:	e005      	b.n	8009592 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009586:	2303      	movs	r3, #3
 8009588:	73fb      	strb	r3, [r7, #15]
    break;
 800958a:	e002      	b.n	8009592 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800958c:	2303      	movs	r3, #3
 800958e:	73fb      	strb	r3, [r7, #15]
    break;
 8009590:	bf00      	nop
  }
  return usb_status;
 8009592:	7bfb      	ldrb	r3, [r7, #15]
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <memset>:
 80095a0:	4402      	add	r2, r0
 80095a2:	4603      	mov	r3, r0
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d100      	bne.n	80095aa <memset+0xa>
 80095a8:	4770      	bx	lr
 80095aa:	f803 1b01 	strb.w	r1, [r3], #1
 80095ae:	e7f9      	b.n	80095a4 <memset+0x4>

080095b0 <__libc_init_array>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	4d0d      	ldr	r5, [pc, #52]	; (80095e8 <__libc_init_array+0x38>)
 80095b4:	4c0d      	ldr	r4, [pc, #52]	; (80095ec <__libc_init_array+0x3c>)
 80095b6:	1b64      	subs	r4, r4, r5
 80095b8:	10a4      	asrs	r4, r4, #2
 80095ba:	2600      	movs	r6, #0
 80095bc:	42a6      	cmp	r6, r4
 80095be:	d109      	bne.n	80095d4 <__libc_init_array+0x24>
 80095c0:	4d0b      	ldr	r5, [pc, #44]	; (80095f0 <__libc_init_array+0x40>)
 80095c2:	4c0c      	ldr	r4, [pc, #48]	; (80095f4 <__libc_init_array+0x44>)
 80095c4:	f000 f826 	bl	8009614 <_init>
 80095c8:	1b64      	subs	r4, r4, r5
 80095ca:	10a4      	asrs	r4, r4, #2
 80095cc:	2600      	movs	r6, #0
 80095ce:	42a6      	cmp	r6, r4
 80095d0:	d105      	bne.n	80095de <__libc_init_array+0x2e>
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d8:	4798      	blx	r3
 80095da:	3601      	adds	r6, #1
 80095dc:	e7ee      	b.n	80095bc <__libc_init_array+0xc>
 80095de:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e2:	4798      	blx	r3
 80095e4:	3601      	adds	r6, #1
 80095e6:	e7f2      	b.n	80095ce <__libc_init_array+0x1e>
 80095e8:	08009684 	.word	0x08009684
 80095ec:	08009684 	.word	0x08009684
 80095f0:	08009684 	.word	0x08009684
 80095f4:	08009688 	.word	0x08009688

080095f8 <memcpy>:
 80095f8:	440a      	add	r2, r1
 80095fa:	4291      	cmp	r1, r2
 80095fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009600:	d100      	bne.n	8009604 <memcpy+0xc>
 8009602:	4770      	bx	lr
 8009604:	b510      	push	{r4, lr}
 8009606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800960a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800960e:	4291      	cmp	r1, r2
 8009610:	d1f9      	bne.n	8009606 <memcpy+0xe>
 8009612:	bd10      	pop	{r4, pc}

08009614 <_init>:
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009616:	bf00      	nop
 8009618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961a:	bc08      	pop	{r3}
 800961c:	469e      	mov	lr, r3
 800961e:	4770      	bx	lr

08009620 <_fini>:
 8009620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009622:	bf00      	nop
 8009624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009626:	bc08      	pop	{r3}
 8009628:	469e      	mov	lr, r3
 800962a:	4770      	bx	lr
