
HFM_Adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009508  08009508  00019508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009560  08009560  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009560  08009560  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009560  08009560  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009560  08009560  00019560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d4  20000184  080096ec  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001458  080096ec  00021458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001601d  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038db  00000000  00000000  00036214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00039af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e09  00000000  00000000  0003ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f5b  00000000  00000000  0003bba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001847f  00000000  00000000  00040afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf4a7  00000000  00000000  00058f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c6c  00000000  00000000  00128424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0012d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080094f0 	.word	0x080094f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080094f0 	.word	0x080094f0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb1d 	bl	800085a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80b 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f948 	bl	80004b8 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000228:	f000 f854 	bl	80002d4 <MX_ADC2_Init>
  MX_DAC1_Init();
 800022c:	f000 f8b8 	bl	80003a0 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000230:	f000 f8fa 	bl	8000428 <MX_I2C2_Init>
  MX_USB_Device_Init();
 8000234:	f008 fc4a 	bl	8008acc <MX_USB_Device_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x20>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b094      	sub	sp, #80	; 0x50
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	f107 0318 	add.w	r3, r7, #24
 8000244:	2238      	movs	r2, #56	; 0x38
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f009 f925 	bl	8009498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000260:	f003 fdb0 	bl	8003dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000264:	2321      	movs	r3, #33	; 0x21
 8000266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	2303      	movs	r3, #3
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800027a:	2302      	movs	r3, #2
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 800027e:	2318      	movs	r3, #24
 8000280:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000282:	2302      	movs	r3, #2
 8000284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000286:	2302      	movs	r3, #2
 8000288:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fe3a 	bl	8003f0c <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800029e:	f000 f957 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2303      	movs	r3, #3
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2104      	movs	r1, #4
 80002ba:	4618      	mov	r0, r3
 80002bc:	f004 f93e 	bl	800453c <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002c6:	f000 f943 	bl	8000550 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3750      	adds	r7, #80	; 0x50
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002da:	463b      	mov	r3, r7
 80002dc:	2220      	movs	r2, #32
 80002de:	2100      	movs	r1, #0
 80002e0:	4618      	mov	r0, r3
 80002e2:	f009 f8d9 	bl	8009498 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <MX_ADC2_Init+0xc0>)
 80002e8:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <MX_ADC2_Init+0xc4>)
 80002ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <MX_ADC2_Init+0xc0>)
 80002ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <MX_ADC2_Init+0xc0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fa:	4b26      	ldr	r3, [pc, #152]	; (8000394 <MX_ADC2_Init+0xc0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000302:	2200      	movs	r2, #0
 8000304:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000308:	2200      	movs	r2, #0
 800030a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_ADC2_Init+0xc0>)
 800030e:	2204      	movs	r2, #4
 8000310:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000314:	2200      	movs	r2, #0
 8000316:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_ADC2_Init+0xc0>)
 800031a:	2200      	movs	r2, #0
 800031c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000320:	2201      	movs	r2, #1
 8000322:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000326:	2200      	movs	r2, #0
 8000328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <MX_ADC2_Init+0xc0>)
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000334:	2200      	movs	r2, #0
 8000336:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_ADC2_Init+0xc0>)
 800033a:	2200      	movs	r2, #0
 800033c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000342:	2200      	movs	r2, #0
 8000344:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_ADC2_Init+0xc0>)
 8000350:	f000 fcf0 	bl	8000d34 <HAL_ADC_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800035a:	f000 f8f9 	bl	8000550 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_ADC2_Init+0xc8>)
 8000360:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000362:	2306      	movs	r3, #6
 8000364:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800036a:	237f      	movs	r3, #127	; 0x7f
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800036e:	2304      	movs	r3, #4
 8000370:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <MX_ADC2_Init+0xc0>)
 800037c:	f000 fe64 	bl	8001048 <HAL_ADC_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000386:	f000 f8e3 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200001a0 	.word	0x200001a0
 8000398:	50000100 	.word	0x50000100
 800039c:	04300002 	.word	0x04300002

080003a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003a6:	463b      	mov	r3, r7
 80003a8:	2230      	movs	r2, #48	; 0x30
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f009 f873 	bl	8009498 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_DAC1_Init+0x80>)
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <MX_DAC1_Init+0x84>)
 80003b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003b8:	4819      	ldr	r0, [pc, #100]	; (8000420 <MX_DAC1_Init+0x80>)
 80003ba:	f001 fb44 	bl	8001a46 <HAL_DAC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003c4:	f000 f8c4 	bl	8000550 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80003c8:	2302      	movs	r3, #2
 80003ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80003e4:	2301      	movs	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	4619      	mov	r1, r3
 80003f2:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_DAC1_Init+0x80>)
 80003f4:	f001 fb4a 	bl	8001a8c <HAL_DAC_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80003fe:	f000 f8a7 	bl	8000550 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000402:	463b      	mov	r3, r7
 8000404:	2210      	movs	r2, #16
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_DAC1_Init+0x80>)
 800040a:	f001 fb3f 	bl	8001a8c <HAL_DAC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000414:	f000 f89c 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3730      	adds	r7, #48	; 0x30
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000020c 	.word	0x2000020c
 8000424:	50000800 	.word	0x50000800

08000428 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_I2C2_Init+0x80>)
 800042e:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <MX_I2C2_Init+0x84>)
 8000430:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0070215B;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000434:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <MX_I2C2_Init+0x88>)
 8000436:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_I2C2_Init+0x80>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000440:	2201      	movs	r2, #1
 8000442:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_I2C2_Init+0x80>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_I2C2_Init+0x80>)
 800045e:	2200      	movs	r2, #0
 8000460:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000462:	4811      	ldr	r0, [pc, #68]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000464:	f001 fe54 	bl	8002110 <HAL_I2C_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800046e:	f000 f86f 	bl	8000550 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000472:	2100      	movs	r1, #0
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000476:	f001 feda 	bl	800222e <HAL_I2CEx_ConfigAnalogFilter>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000480:	f000 f866 	bl	8000550 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000484:	2100      	movs	r1, #0
 8000486:	4808      	ldr	r0, [pc, #32]	; (80004a8 <MX_I2C2_Init+0x80>)
 8000488:	f001 ff1c 	bl	80022c4 <HAL_I2CEx_ConfigDigitalFilter>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000492:	f000 f85d 	bl	8000550 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C2);
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <MX_I2C2_Init+0x8c>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	4a06      	ldr	r2, [pc, #24]	; (80004b4 <MX_I2C2_Init+0x8c>)
 800049c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000220 	.word	0x20000220
 80004ac:	40005800 	.word	0x40005800
 80004b0:	0070215b 	.word	0x0070215b
 80004b4:	40010000 	.word	0x40010000

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ce:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_GPIO_Init+0x90>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <MX_GPIO_Init+0x90>)
 80004d4:	f043 0320 	orr.w	r3, r3, #32
 80004d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004da:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <MX_GPIO_Init+0x90>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	f003 0320 	and.w	r3, r3, #32
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_GPIO_Init+0x90>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <MX_GPIO_Init+0x90>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_GPIO_Init+0x90>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_GPIO_Init+0x90>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a11      	ldr	r2, [pc, #68]	; (8000548 <MX_GPIO_Init+0x90>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_GPIO_Init+0x90>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUN_GPIO_Port, RUN_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <MX_GPIO_Init+0x94>)
 800051e:	f001 fddf 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RUN_Pin */
  GPIO_InitStruct.Pin = RUN_Pin;
 8000522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_GPIO_Init+0x94>)
 800053c:	f001 fc4e 	bl	8001ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	48000400 	.word	0x48000400

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x44>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x44>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6613      	str	r3, [r2, #96]	; 0x60
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x44>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <HAL_MspInit+0x44>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <HAL_MspInit+0x44>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	6593      	str	r3, [r2, #88]	; 0x58
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_MspInit+0x44>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b09a      	sub	sp, #104	; 0x68
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2244      	movs	r2, #68	; 0x44
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f008 ff67 	bl	8009498 <memset>
  if(hadc->Instance==ADC2)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <HAL_ADC_MspInit+0xa4>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d134      	bne.n	800063e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80005da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 f999 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80005f0:	f7ff ffae 	bl	8000550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_ADC_MspInit+0xa8>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_ADC_MspInit+0xa8>)
 80005fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_ADC_MspInit+0xa8>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_ADC_MspInit+0xa8>)
 800060e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_ADC_MspInit+0xa8>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_ADC_MspInit+0xa8>)
 800061a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000624:	2303      	movs	r3, #3
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000628:	2303      	movs	r3, #3
 800062a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000634:	4619      	mov	r1, r3
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 fbcf 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3768      	adds	r7, #104	; 0x68
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	50000100 	.word	0x50000100
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <HAL_DAC_MspInit+0x74>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d124      	bne.n	80006bc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_DAC_MspInit+0x78>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <HAL_DAC_MspInit+0x78>)
 8000678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_DAC_MspInit+0x78>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_DAC_MspInit+0x78>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_DAC_MspInit+0x78>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_DAC_MspInit+0x78>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006a2:	2330      	movs	r3, #48	; 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f001 fb90 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	50000800 	.word	0x50000800
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09a      	sub	sp, #104	; 0x68
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	2244      	movs	r2, #68	; 0x44
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f008 fed3 	bl	8009498 <memset>
  if(hi2c->Instance==I2C2)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <HAL_I2C_MspInit+0xa8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d137      	bne.n	800076c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4618      	mov	r0, r3
 800070a:	f004 f907 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000714:	f7ff ff1c 	bl	8000550 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_I2C_MspInit+0xac>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <HAL_I2C_MspInit+0xac>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_I2C_MspInit+0xac>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000734:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000742:	2304      	movs	r3, #4
 8000744:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800074a:	4619      	mov	r1, r3
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 fb44 	bl	8001ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_I2C_MspInit+0xac>)
 8000756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <HAL_I2C_MspInit+0xac>)
 800075a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800075e:	6593      	str	r3, [r2, #88]	; 0x58
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_I2C_MspInit+0xac>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3768      	adds	r7, #104	; 0x68
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40005800 	.word	0x40005800
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 f89a 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <USB_LP_IRQHandler+0x10>)
 80007d6:	f001 fec8 	bl	800256a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000f44 	.word	0x20000f44

080007e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800080a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0e      	ldr	r2, [pc, #56]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0b      	ldr	r4, [pc, #44]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000832:	f7ff ffd7 	bl	80007e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000836:	f008 fe37 	bl	80094a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fced 	bl	8000218 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   r0, =_estack
 8000840:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800084c:	08009568 	.word	0x08009568
  ldr r2, =_sbss
 8000850:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000854:	20001458 	.word	0x20001458

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>

0800085a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f001 f8af 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f80e 	bl	800088c <HAL_InitTick>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e001      	b.n	8000880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087c:	f7ff fe6e 	bl	800055c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000880:	79fb      	ldrb	r3, [r7, #7]

}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_InitTick+0x68>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d022      	beq.n	80008e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_InitTick+0x6c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_InitTick+0x68>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80008b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 f8ba 	bl	8001a2e <HAL_SYSTICK_Config>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10f      	bne.n	80008e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b0f      	cmp	r3, #15
 80008c4:	d809      	bhi.n	80008da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c6:	2200      	movs	r2, #0
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	f04f 30ff 	mov.w	r0, #4294967295
 80008ce:	f001 f886 	bl	80019de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_InitTick+0x70>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e007      	b.n	80008ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	e004      	b.n	80008ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	e001      	b.n	80008ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4413      	add	r3, r2
 800090e:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x1c>)
 8000910:	6013      	str	r3, [r2, #0]
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	2000026c 	.word	0x2000026c
 8000920:	20000008 	.word	0x20000008

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2000026c 	.word	0x2000026c

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff ffee 	bl	8000924 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d004      	beq.n	8000960 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_Delay+0x40>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4413      	add	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000960:	bf00      	nop
 8000962:	f7ff ffdf 	bl	8000924 <HAL_GetTick>
 8000966:	4602      	mov	r2, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	429a      	cmp	r2, r3
 8000970:	d8f7      	bhi.n	8000962 <HAL_Delay+0x26>
  {
  }
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000008 	.word	0x20000008

08000980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	609a      	str	r2, [r3, #8]
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3360      	adds	r3, #96	; 0x60
 80009fa:	461a      	mov	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <LL_ADC_SetOffset+0x44>)
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	4313      	orrs	r3, r2
 8000a18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a20:	bf00      	nop
 8000a22:	371c      	adds	r7, #28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	03fff000 	.word	0x03fff000

08000a30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3360      	adds	r3, #96	; 0x60
 8000a3e:	461a      	mov	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3360      	adds	r3, #96	; 0x60
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a86:	bf00      	nop
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b087      	sub	sp, #28
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3360      	adds	r3, #96	; 0x60
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3360      	adds	r3, #96	; 0x60
 8000ad8:	461a      	mov	r2, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	431a      	orrs	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000af2:	bf00      	nop
 8000af4:	371c      	adds	r7, #28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	615a      	str	r2, [r3, #20]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3330      	adds	r3, #48	; 0x30
 8000b34:	461a      	mov	r2, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	4413      	add	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	f003 031f 	and.w	r3, r3, #31
 8000b4e:	211f      	movs	r1, #31
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	401a      	ands	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	0e9b      	lsrs	r3, r3, #26
 8000b5c:	f003 011f 	and.w	r1, r3, #31
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	f003 031f 	and.w	r3, r3, #31
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b70:	bf00      	nop
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3314      	adds	r3, #20
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	0e5b      	lsrs	r3, r3, #25
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	4413      	add	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	0d1b      	lsrs	r3, r3, #20
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	2107      	movs	r1, #7
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	0d1b      	lsrs	r3, r3, #20
 8000bb6:	f003 031f 	and.w	r3, r3, #31
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bc6:	bf00      	nop
 8000bc8:	371c      	adds	r7, #28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d10a      	bne.n	8000bfe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	407f0000 	.word	0x407f0000

08000c24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	6093      	str	r3, [r2, #8]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c5c:	d101      	bne.n	8000c62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cac:	d101      	bne.n	8000cb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <LL_ADC_IsEnabled+0x18>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <LL_ADC_IsEnabled+0x1a>
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d101      	bne.n	8000cfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e000      	b.n	8000d00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d101      	bne.n	8000d24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
	...

08000d34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e177      	b.n	800103e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fc21 	bl	80005a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff67 	bl	8000c48 <LL_ADC_IsDeepPowerDownEnabled>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d004      	beq.n	8000d8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff4d 	bl	8000c24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff82 	bl	8000c98 <LL_ADC_IsInternalRegulatorEnabled>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d115      	bne.n	8000dc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff66 	bl	8000c70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000da4:	4b9c      	ldr	r3, [pc, #624]	; (8001018 <HAL_ADC_Init+0x2e4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	099b      	lsrs	r3, r3, #6
 8000daa:	4a9c      	ldr	r2, [pc, #624]	; (800101c <HAL_ADC_Init+0x2e8>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	3301      	adds	r3, #1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000db8:	e002      	b.n	8000dc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff64 	bl	8000c98 <LL_ADC_IsInternalRegulatorEnabled>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10d      	bne.n	8000df2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dda:	f043 0210 	orr.w	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff75 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 8000dfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f040 8110 	bne.w	800102c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 810c 	bne.w	800102c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e1c:	f043 0202 	orr.w	r2, r3, #2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff49 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d111      	bne.n	8000e58 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e38:	f7ff ff42 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	4878      	ldr	r0, [pc, #480]	; (8001020 <HAL_ADC_Init+0x2ec>)
 8000e40:	f7ff ff3e 	bl	8000cc0 <LL_ADC_IsEnabled>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4323      	orrs	r3, r4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4874      	ldr	r0, [pc, #464]	; (8001024 <HAL_ADC_Init+0x2f0>)
 8000e54:	f7ff fd94 	bl	8000980 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7f5b      	ldrb	r3, [r3, #29]
 8000e5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000e68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000e6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d106      	bne.n	8000e94 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	045b      	lsls	r3, r3, #17
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d009      	beq.n	8000eb0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <HAL_ADC_Init+0x2f4>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	430b      	orrs	r3, r1
 8000ec2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff01 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 8000ee4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff0e 	bl	8000d0c <LL_ADC_INJ_IsConversionOngoing>
 8000ef0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d16d      	bne.n	8000fd4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d16a      	bne.n	8000fd4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f0a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f1a:	f023 0302 	bic.w	r3, r3, #2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	430b      	orrs	r3, r1
 8000f26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d017      	beq.n	8000f60 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6911      	ldr	r1, [r2, #16]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000f5e:	e013      	b.n	8000f88 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d118      	bne.n	8000fc4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000fa8:	4311      	orrs	r1, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	e007      	b.n	8000fd4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10c      	bne.n	8000ff6 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f023 010f 	bic.w	r1, r3, #15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a1b      	ldr	r3, [r3, #32]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff4:	e007      	b.n	8001006 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020f 	bic.w	r2, r2, #15
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	65da      	str	r2, [r3, #92]	; 0x5c
 8001016:	e011      	b.n	800103c <HAL_ADC_Init+0x308>
 8001018:	20000000 	.word	0x20000000
 800101c:	053e2d63 	.word	0x053e2d63
 8001020:	50000100 	.word	0x50000100
 8001024:	50000300 	.word	0x50000300
 8001028:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001030:	f043 0210 	orr.w	r2, r3, #16
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800103c:	7ffb      	ldrb	r3, [r7, #31]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	bf00      	nop

08001048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0b6      	sub	sp, #216	; 0xd8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_ConfigChannel+0x22>
 8001066:	2302      	movs	r3, #2
 8001068:	e3c8      	b.n	80017fc <HAL_ADC_ConfigChannel+0x7b4>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe35 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 83ad 	bne.w	80017de <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6859      	ldr	r1, [r3, #4]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	f7ff fd47 	bl	8000b24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe23 	bl	8000ce6 <LL_ADC_REG_IsConversionOngoing>
 80010a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe2f 	bl	8000d0c <LL_ADC_INJ_IsConversionOngoing>
 80010ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 81d9 	bne.w	800146e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f040 81d4 	bne.w	800146e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ce:	d10f      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd4e 	bl	8000b7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fd08 	bl	8000afe <LL_ADC_SetSamplingTimeCommonConfig>
 80010ee:	e00e      	b.n	800110e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f7ff fd3d 	bl	8000b7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fcf8 	bl	8000afe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b04      	cmp	r3, #4
 800112e:	d022      	beq.n	8001176 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6919      	ldr	r1, [r3, #16]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001140:	f7ff fc52 	bl	80009e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	6919      	ldr	r1, [r3, #16]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	461a      	mov	r2, r3
 8001152:	f7ff fc9e 	bl	8000a92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	7f1b      	ldrb	r3, [r3, #28]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <HAL_ADC_ConfigChannel+0x124>
 8001166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800116a:	e000      	b.n	800116e <HAL_ADC_ConfigChannel+0x126>
 800116c:	2300      	movs	r3, #0
 800116e:	461a      	mov	r2, r3
 8001170:	f7ff fcaa 	bl	8000ac8 <LL_ADC_SetOffsetSaturation>
 8001174:	e17b      	b.n	800146e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fc57 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10a      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x15a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fc4c 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	0e9b      	lsrs	r3, r3, #26
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	e01e      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x198>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc41 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80011d0:	2320      	movs	r3, #32
 80011d2:	e004      	b.n	80011de <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80011d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1b0>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0e9b      	lsrs	r3, r3, #26
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	e018      	b.n	800122a <HAL_ADC_ConfigChannel+0x1e2>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800120c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800121c:	2320      	movs	r3, #32
 800121e:	e004      	b.n	800122a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800122a:	429a      	cmp	r2, r3
 800122c:	d106      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc10 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fbf4 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10a      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x220>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fbe9 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	0e9b      	lsrs	r3, r3, #26
 8001262:	f003 021f 	and.w	r2, r3, #31
 8001266:	e01e      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x25e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fbde 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800128a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800128e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001296:	2320      	movs	r3, #32
 8001298:	e004      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800129a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <HAL_ADC_ConfigChannel+0x276>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e9b      	lsrs	r3, r3, #26
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	e018      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x2a8>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80012d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80012da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80012e2:	2320      	movs	r3, #32
 80012e4:	e004      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80012e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d106      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fbad 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2102      	movs	r1, #2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fb91 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10a      	bne.n	800132e <HAL_ADC_ConfigChannel+0x2e6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb86 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	0e9b      	lsrs	r3, r3, #26
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	e01e      	b.n	800136c <HAL_ADC_ConfigChannel+0x324>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2102      	movs	r1, #2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fb7b 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800134c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800135c:	2320      	movs	r3, #32
 800135e:	e004      	b.n	800136a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x33c>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	0e9b      	lsrs	r3, r3, #26
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	e016      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x36a>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001396:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800139c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80013a4:	2320      	movs	r3, #32
 80013a6:	e004      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80013a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d106      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fb4c 	bl	8000a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2103      	movs	r1, #3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb30 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x3a8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2103      	movs	r1, #3
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fb25 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	0e9b      	lsrs	r3, r3, #26
 80013ea:	f003 021f 	and.w	r2, r3, #31
 80013ee:	e017      	b.n	8001420 <HAL_ADC_ConfigChannel+0x3d8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2103      	movs	r1, #3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb1a 	bl	8000a30 <LL_ADC_GetOffsetChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800140a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800140c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001412:	2320      	movs	r3, #32
 8001414:	e003      	b.n	800141e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x3f0>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	e011      	b.n	800145c <HAL_ADC_ConfigChannel+0x414>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001440:	fa93 f3a3 	rbit	r3, r3
 8001444:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001448:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800144a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001450:	2320      	movs	r3, #32
 8001452:	e003      	b.n	800145c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800145c:	429a      	cmp	r2, r3
 800145e:	d106      	bne.n	800146e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	2103      	movs	r1, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff faf7 	bl	8000a5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc24 	bl	8000cc0 <LL_ADC_IsEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8140 	bne.w	8001700 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	461a      	mov	r2, r3
 800148e:	f7ff fba1 	bl	8000bd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	4a8f      	ldr	r2, [pc, #572]	; (80016d4 <HAL_ADC_ConfigChannel+0x68c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	f040 8131 	bne.w	8001700 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10b      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x47e>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	0e9b      	lsrs	r3, r3, #26
 80014b4:	3301      	adds	r3, #1
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	2b09      	cmp	r3, #9
 80014bc:	bf94      	ite	ls
 80014be:	2301      	movls	r3, #1
 80014c0:	2300      	movhi	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	e019      	b.n	80014fa <HAL_ADC_ConfigChannel+0x4b2>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80014d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80014d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80014de:	2320      	movs	r3, #32
 80014e0:	e003      	b.n	80014ea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80014e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d079      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_ADC_ConfigChannel+0x4d2>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0e9b      	lsrs	r3, r3, #26
 8001510:	3301      	adds	r3, #1
 8001512:	069b      	lsls	r3, r3, #26
 8001514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001518:	e015      	b.n	8001546 <HAL_ADC_ConfigChannel+0x4fe>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800152a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800152c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001532:	2320      	movs	r3, #32
 8001534:	e003      	b.n	800153e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	069b      	lsls	r3, r3, #26
 8001542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x51e>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e9b      	lsrs	r3, r3, #26
 8001558:	3301      	adds	r3, #1
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	e017      	b.n	8001596 <HAL_ADC_ConfigChannel+0x54e>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001576:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800157e:	2320      	movs	r3, #32
 8001580:	e003      	b.n	800158a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	ea42 0103 	orr.w	r1, r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10a      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x574>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0e9b      	lsrs	r3, r3, #26
 80015ac:	3301      	adds	r3, #1
 80015ae:	f003 021f 	and.w	r2, r3, #31
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	051b      	lsls	r3, r3, #20
 80015ba:	e018      	b.n	80015ee <HAL_ADC_ConfigChannel+0x5a6>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80015ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80015d4:	2320      	movs	r3, #32
 80015d6:	e003      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80015d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	f003 021f 	and.w	r2, r3, #31
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015ee:	430b      	orrs	r3, r1
 80015f0:	e081      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <HAL_ADC_ConfigChannel+0x5c6>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	3301      	adds	r3, #1
 8001606:	069b      	lsls	r3, r3, #26
 8001608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800160c:	e015      	b.n	800163a <HAL_ADC_ConfigChannel+0x5f2>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001626:	2320      	movs	r3, #32
 8001628:	e003      	b.n	8001632 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3301      	adds	r3, #1
 8001634:	069b      	lsls	r3, r3, #26
 8001636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ADC_ConfigChannel+0x612>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	3301      	adds	r3, #1
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	e017      	b.n	800168a <HAL_ADC_ConfigChannel+0x642>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	61fb      	str	r3, [r7, #28]
  return result;
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001672:	2320      	movs	r3, #32
 8001674:	e003      	b.n	800167e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	ea42 0103 	orr.w	r1, r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x66e>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0e9b      	lsrs	r3, r3, #26
 80016a0:	3301      	adds	r3, #1
 80016a2:	f003 021f 	and.w	r2, r3, #31
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	3b1e      	subs	r3, #30
 80016ae:	051b      	lsls	r3, r3, #20
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b4:	e01e      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x6ac>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	613b      	str	r3, [r7, #16]
  return result;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d104      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80016ce:	2320      	movs	r3, #32
 80016d0:	e006      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x698>
 80016d2:	bf00      	nop
 80016d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3301      	adds	r3, #1
 80016e2:	f003 021f 	and.w	r2, r3, #31
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	3b1e      	subs	r3, #30
 80016ee:	051b      	lsls	r3, r3, #20
 80016f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016f4:	430b      	orrs	r3, r1
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	6892      	ldr	r2, [r2, #8]
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa3e 	bl	8000b7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_ADC_ConfigChannel+0x7bc>)
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d071      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800170c:	483e      	ldr	r0, [pc, #248]	; (8001808 <HAL_ADC_ConfigChannel+0x7c0>)
 800170e:	f7ff f95d 	bl	80009cc <LL_ADC_GetCommonPathInternalCh>
 8001712:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_ADC_ConfigChannel+0x7c4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d004      	beq.n	800172a <HAL_ADC_ConfigChannel+0x6e2>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <HAL_ADC_ConfigChannel+0x7c8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d127      	bne.n	800177a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800172a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800172e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d121      	bne.n	800177a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173e:	d157      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001748:	4619      	mov	r1, r3
 800174a:	482f      	ldr	r0, [pc, #188]	; (8001808 <HAL_ADC_ConfigChannel+0x7c0>)
 800174c:	f7ff f92b 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_ADC_ConfigChannel+0x7cc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_ADC_ConfigChannel+0x7d0>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800176a:	e002      	b.n	8001772 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3b01      	subs	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001778:	e03a      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a27      	ldr	r2, [pc, #156]	; (800181c <HAL_ADC_ConfigChannel+0x7d4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d113      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x764>
 8001784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a22      	ldr	r2, [pc, #136]	; (8001820 <HAL_ADC_ConfigChannel+0x7d8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02a      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800179a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	4619      	mov	r1, r3
 80017a4:	4818      	ldr	r0, [pc, #96]	; (8001808 <HAL_ADC_ConfigChannel+0x7c0>)
 80017a6:	f7ff f8fe 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017aa:	e021      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_ADC_ConfigChannel+0x7dc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11c      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a16      	ldr	r2, [pc, #88]	; (8001820 <HAL_ADC_ConfigChannel+0x7d8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d011      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017d4:	4619      	mov	r1, r3
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <HAL_ADC_ConfigChannel+0x7c0>)
 80017d8:	f7ff f8e5 	bl	80009a6 <LL_ADC_SetCommonPathInternalCh>
 80017dc:	e008      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e2:	f043 0220 	orr.w	r2, r3, #32
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80017f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	37d8      	adds	r7, #216	; 0xd8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	80080000 	.word	0x80080000
 8001808:	50000300 	.word	0x50000300
 800180c:	c3210000 	.word	0xc3210000
 8001810:	90c00010 	.word	0x90c00010
 8001814:	20000000 	.word	0x20000000
 8001818:	053e2d63 	.word	0x053e2d63
 800181c:	c7520000 	.word	0xc7520000
 8001820:	50000100 	.word	0x50000100
 8001824:	cb840000 	.word	0xcb840000

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185a:	4a04      	ldr	r2, [pc, #16]	; (800186c <__NVIC_SetPriorityGrouping+0x44>)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60d3      	str	r3, [r2, #12]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff29 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff40 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff90 	bl	800191c <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5f 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff33 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa4 	bl	8001984 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e014      	b.n	8001a82 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	791b      	ldrb	r3, [r3, #4]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fdf1 	bl	8000650 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2202      	movs	r2, #2
 8001a72:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	795b      	ldrb	r3, [r3, #5]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DAC_ConfigChannel+0x18>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e192      	b.n	8001dca <HAL_DAC_ConfigChannel+0x33e>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2202      	movs	r2, #2
 8001aae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d174      	bne.n	8001ba2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ff34 	bl	8000924 <HAL_GetTick>
 8001abc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d134      	bne.n	8001b2e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ac4:	e011      	b.n	8001aea <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ac6:	f7fe ff2d 	bl	8000924 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d90a      	bls.n	8001aea <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f043 0208 	orr.w	r2, r3, #8
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e16f      	b.n	8001dca <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e6      	bne.n	8001ac6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7fe ff1f 	bl	800093c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
 8001b08:	e01e      	b.n	8001b48 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b0a:	f7fe ff0b 	bl	8000924 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d90a      	bls.n	8001b2e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f043 0208 	orr.w	r2, r3, #8
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2203      	movs	r2, #3
 8001b28:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e14d      	b.n	8001dca <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	dbe8      	blt.n	8001b0a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7fe feff 	bl	800093c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	ea02 0103 	and.w	r1, r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	21ff      	movs	r1, #255	; 0xff
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	ea02 0103 	and.w	r1, r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d11d      	bne.n	8001be6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	221f      	movs	r2, #31
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	4013      	ands	r3, r2
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d102      	bne.n	8001c10 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
 8001c0e:	e00f      	b.n	8001c30 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d102      	bne.n	8001c1e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	e008      	b.n	8001c30 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001c26:	2301      	movs	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	e001      	b.n	8001c30 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	6a3a      	ldr	r2, [r7, #32]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c52:	4013      	ands	r3, r2
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	791b      	ldrb	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d102      	bne.n	8001c64 <HAL_DAC_ConfigChannel+0x1d8>
 8001c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c62:	e000      	b.n	8001c66 <HAL_DAC_ConfigChannel+0x1da>
 8001c64:	2300      	movs	r3, #0
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	4013      	ands	r3, r2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	795b      	ldrb	r3, [r3, #5]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_DAC_ConfigChannel+0x204>
 8001c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8e:	e000      	b.n	8001c92 <HAL_DAC_ConfigChannel+0x206>
 8001c90:	2300      	movs	r3, #0
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d114      	bne.n	8001cd2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001ca8:	f002 fde6 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8001cac:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_DAC_ConfigChannel+0x348>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d904      	bls.n	8001cc0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	e00f      	b.n	8001ce0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	4a45      	ldr	r2, [pc, #276]	; (8001dd8 <HAL_DAC_ConfigChannel+0x34c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d90a      	bls.n	8001cde <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd0:	e006      	b.n	8001ce0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	e000      	b.n	8001ce0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001cde:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	4013      	ands	r3, r2
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6819      	ldr	r1, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	22c0      	movs	r2, #192	; 0xc0
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	ea02 0103 	and.w	r1, r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	09896800 	.word	0x09896800
 8001dd8:	04c4b400 	.word	0x04c4b400

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dea:	e15a      	b.n	80020a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 814c 	beq.w	800209c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d130      	bne.n	8001e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e52:	2201      	movs	r2, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0201 	and.w	r2, r3, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d017      	beq.n	8001eba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d123      	bne.n	8001f0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80a6 	beq.w	800209c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f50:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f54:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f68:	4a56      	ldr	r2, [pc, #344]	; (80020c4 <HAL_GPIO_Init+0x2e8>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f92:	d01f      	beq.n	8001fd4 <HAL_GPIO_Init+0x1f8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x2ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d019      	beq.n	8001fd0 <HAL_GPIO_Init+0x1f4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_GPIO_Init+0x2f0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1f0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_GPIO_Init+0x2f4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_GPIO_Init+0x2f8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_GPIO_Init+0x2fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e4>
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	e00a      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	e008      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_GPIO_Init+0x300>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002018:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_GPIO_Init+0x300>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002042:	4a26      	ldr	r2, [pc, #152]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_GPIO_Init+0x300>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_GPIO_Init+0x300>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f ae9d 	bne.w	8001dec <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e081      	b.n	8002226 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fac8 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002160:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002170:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e006      	b.n	8002198 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002196:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d104      	bne.n	80021aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69d9      	ldr	r1, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	d138      	bne.n	80022b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800224e:	2302      	movs	r3, #2
 8002250:	e032      	b.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2224      	movs	r2, #36	; 0x24
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002280:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6819      	ldr	r1, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e000      	b.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
  }
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d139      	bne.n	800234e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e033      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002316:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	b08b      	sub	sp, #44	; 0x2c
 8002360:	af06      	add	r7, sp, #24
 8002362:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0d7      	b.n	800251e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f006 fd82 	bl	8008e8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fcc8 	bl	8004d2a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e04c      	b.n	800243a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	3301      	adds	r3, #1
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	b298      	uxth	r0, r3
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3336      	adds	r3, #54	; 0x36
 80023de:	4602      	mov	r2, r0
 80023e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3303      	adds	r3, #3
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3338      	adds	r3, #56	; 0x38
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	333c      	adds	r3, #60	; 0x3c
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	3340      	adds	r3, #64	; 0x40
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	3301      	adds	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	d3ad      	bcc.n	80023a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e044      	b.n	80024d4 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	f203 1369 	addw	r3, r3, #361	; 0x169
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	3301      	adds	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d3b5      	bcc.n	800244a <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	687e      	ldr	r6, [r7, #4]
 80024e6:	466d      	mov	r5, sp
 80024e8:	f106 0410 	add.w	r4, r6, #16
 80024ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	602b      	str	r3, [r5, #0]
 80024f4:	1d33      	adds	r3, r6, #4
 80024f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f002 fc31 	bl	8004d60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f001 fc29 	bl	8003d6e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002526 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_PCD_Start+0x16>
 8002538:	2302      	movs	r3, #2
 800253a:	e012      	b.n	8002562 <HAL_PCD_Start+0x3c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fbd7 	bl	8004cfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fdf0 	bl	8007138 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f004 fdf5 	bl	8007166 <USB_ReadInterrupts>
 800257c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb26 	bl	8002bda <PCD_EP_ISR_Handler>

    return;
 800258e:	e110      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	2b00      	cmp	r3, #0
 8002598:	d013      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	b292      	uxth	r2, r2
 80025ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f006 fcfb 	bl	8008fae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80025b8:	2100      	movs	r1, #0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8fc 	bl	80027b8 <HAL_PCD_SetAddress>

    return;
 80025c0:	e0f7      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025de:	b292      	uxth	r2, r2
 80025e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025e4:	e0e5      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002602:	b292      	uxth	r2, r2
 8002604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002608:	e0d3      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d034      	beq.n	800267e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800261c:	b29a      	uxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	b292      	uxth	r2, r2
 8002628:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	b292      	uxth	r2, r2
 8002640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d107      	bne.n	800265e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002656:	2100      	movs	r1, #0
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f006 fe9d 	bl	8009398 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f006 fcde 	bl	8009020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002676:	b292      	uxth	r2, r2
 8002678:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800267c:	e099      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002684:	2b00      	cmp	r3, #0
 8002686:	d027      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	b292      	uxth	r2, r2
 800269c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b2:	b292      	uxth	r2, r2
 80026b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0204 	orr.w	r2, r2, #4
 80026ca:	b292      	uxth	r2, r2
 80026cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f006 fc8b 	bl	8008fec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026d6:	e06c      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d040      	beq.n	8002764 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f4:	b292      	uxth	r2, r2
 80026f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d12b      	bne.n	800275c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0204 	orr.w	r2, r2, #4
 8002716:	b292      	uxth	r2, r2
 8002718:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0208 	orr.w	r2, r2, #8
 800272e:	b292      	uxth	r2, r2
 8002730:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002744:	b29b      	uxth	r3, r3
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002752:	2101      	movs	r1, #1
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f006 fe1f 	bl	8009398 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800275a:	e02a      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f006 fc45 	bl	8008fec <HAL_PCD_SuspendCallback>
    return;
 8002762:	e026      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00f      	beq.n	800278e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002776:	b29a      	uxth	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002780:	b292      	uxth	r2, r2
 8002782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f006 fc03 	bl	8008f92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800278c:	e011      	b.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027aa:	b292      	uxth	r2, r2
 80027ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80027b0:	bf00      	nop
  }
}
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_PCD_SetAddress+0x1a>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e013      	b.n	80027fa <HAL_PCD_SetAddress+0x42>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 fc90 	bl	8007110 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	4608      	mov	r0, r1
 800280c:	4611      	mov	r1, r2
 800280e:	461a      	mov	r2, r3
 8002810:	4603      	mov	r3, r0
 8002812:	70fb      	strb	r3, [r7, #3]
 8002814:	460b      	mov	r3, r1
 8002816:	803b      	strh	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da0e      	bge.n	8002846 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	705a      	strb	r2, [r3, #1]
 8002844:	e00e      	b.n	8002864 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 0207 	and.w	r2, r3, #7
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	b2da      	uxtb	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002870:	883a      	ldrh	r2, [r7, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	78ba      	ldrb	r2, [r7, #2]
 800287a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800288e:	78bb      	ldrb	r3, [r7, #2]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d102      	bne.n	800289a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_PCD_EP_Open+0xa6>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e00e      	b.n	80028c6 <HAL_PCD_EP_Open+0xc4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68f9      	ldr	r1, [r7, #12]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fa74 	bl	8004da4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80028c4:	7afb      	ldrb	r3, [r7, #11]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da0e      	bge.n	8002900 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	705a      	strb	r2, [r3, #1]
 80028fe:	e00e      	b.n	800291e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0207 	and.w	r2, r3, #7
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_PCD_EP_Close+0x6a>
 8002934:	2302      	movs	r3, #2
 8002936:	e00e      	b.n	8002956 <HAL_PCD_EP_Close+0x88>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	4618      	mov	r0, r3
 8002948:	f002 fdc0 	bl	80054cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	460b      	mov	r3, r1
 800296c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296e:	7afb      	ldrb	r3, [r7, #11]
 8002970:	f003 0207 	and.w	r2, r3, #7
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2200      	movs	r2, #0
 8002996:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2200      	movs	r2, #0
 800299c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029aa:	7afb      	ldrb	r3, [r7, #11]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 ff73 	bl	80058a6 <USB_EPStartXfer>
 80029c0:	e005      	b.n	80029ce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6979      	ldr	r1, [r7, #20]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 ff6c 	bl	80058a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 0207 	and.w	r2, r3, #7
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2201      	movs	r2, #1
 8002a52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a60:	7afb      	ldrb	r3, [r7, #11]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 ff18 	bl	80058a6 <USB_EPStartXfer>
 8002a76:	e005      	b.n	8002a84 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6979      	ldr	r1, [r7, #20]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 ff11 	bl	80058a6 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	f003 0207 	and.w	r2, r3, #7
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d901      	bls.n	8002aac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e03e      	b.n	8002b2a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da0e      	bge.n	8002ad2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
 8002ad0:	e00c      	b.n	8002aec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_PCD_EP_SetStall+0x7e>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e00e      	b.n	8002b2a <HAL_PCD_EP_SetStall+0x9c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f9f9 	bl	8006f12 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d901      	bls.n	8002b50 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e040      	b.n	8002bd2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da0e      	bge.n	8002b76 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
 8002b74:	e00e      	b.n	8002b94 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 0207 	and.w	r2, r3, #7
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_PCD_EP_ClrStall+0x82>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e00e      	b.n	8002bd2 <HAL_PCD_EP_ClrStall+0xa0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68f9      	ldr	r1, [r7, #12]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 f9f6 	bl	8006fb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b096      	sub	sp, #88	; 0x58
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002be2:	e39c      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002bf0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002bfe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 815e 	bne.w	8002ec4 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d150      	bne.n	8002cb6 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	81fb      	strh	r3, [r7, #14]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
 8002c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3328      	adds	r3, #40	; 0x28
 8002c3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	441a      	add	r2, r3
 8002c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c72:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002c74:	2100      	movs	r1, #0
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f006 f971 	bl	8008f5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 834a 	beq.w	800331e <PCD_EP_ISR_Handler+0x744>
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8345 	bne.w	800331e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cb4:	e333      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002cc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d032      	beq.n	8002d3a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d08:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f004 fa7b 	bl	800720a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d20:	4013      	ands	r3, r2
 8002d22:	823b      	strh	r3, [r7, #16]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	8a3a      	ldrh	r2, [r7, #16]
 8002d2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f006 f8e6 	bl	8008f04 <HAL_PCD_SetupStageCallback>
 8002d38:	e2f1      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d3a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f280 82ed 	bge.w	800331e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d50:	4013      	ands	r3, r2
 8002d52:	83fb      	strh	r3, [r7, #30]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	8bfa      	ldrh	r2, [r7, #30]
 8002d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d019      	beq.n	8002dc6 <PCD_EP_ISR_Handler+0x1ec>
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da0:	6959      	ldr	r1, [r3, #20]
 8002da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f004 fa2d 	bl	800720a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	441a      	add	r2, r3
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f006 f8b1 	bl	8008f28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 82a3 	bne.w	800331e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8002dfe:	d918      	bls.n	8002e32 <PCD_EP_ISR_Handler+0x258>
 8002e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	647b      	str	r3, [r7, #68]	; 0x44
 8002e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <PCD_EP_ISR_Handler+0x240>
 8002e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e16:	3b01      	subs	r3, #1
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	e029      	b.n	8002e86 <PCD_EP_ISR_Handler+0x2ac>
 8002e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d112      	bne.n	8002e60 <PCD_EP_ISR_Handler+0x286>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	e012      	b.n	8002e86 <PCD_EP_ISR_Handler+0x2ac>
 8002e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	085b      	lsrs	r3, r3, #1
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44
 8002e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <PCD_EP_ISR_Handler+0x2a0>
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	3301      	adds	r3, #1
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	029b      	lsls	r3, r3, #10
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	827b      	strh	r3, [r7, #18]
 8002e98:	8a7b      	ldrh	r3, [r7, #18]
 8002e9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e9e:	827b      	strh	r3, [r7, #18]
 8002ea0:	8a7b      	ldrh	r3, [r7, #18]
 8002ea2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ea6:	827b      	strh	r3, [r7, #18]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	8a7b      	ldrh	r3, [r7, #18]
 8002eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	8013      	strh	r3, [r2, #0]
 8002ec2:	e22c      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ed8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f280 80f6 	bge.w	80030ce <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ef8:	4013      	ands	r3, r2
 8002efa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f14:	b292      	uxth	r2, r2
 8002f16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f18:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	7b1b      	ldrb	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d123      	bne.n	8002f7e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002f5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 808e 	beq.w	8003084 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6e:	6959      	ldr	r1, [r3, #20]
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f72:	88da      	ldrh	r2, [r3, #6]
 8002f74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f78:	f004 f947 	bl	800720a <USB_ReadPMA>
 8002f7c:	e082      	b.n	8003084 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	78db      	ldrb	r3, [r3, #3]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d10a      	bne.n	8002f9c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f86:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f9d3 	bl	800333a <HAL_PCD_EP_DB_Receive>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f9a:	e073      	b.n	8003084 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d022      	beq.n	8003040 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	4413      	add	r3, r2
 8003014:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003022:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02c      	beq.n	8003084 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	6959      	ldr	r1, [r3, #20]
 8003032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003034:	891a      	ldrh	r2, [r3, #8]
 8003036:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800303a:	f004 f8e6 	bl	800720a <USB_ReadPMA>
 800303e:	e021      	b.n	8003084 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	4413      	add	r3, r2
 800305a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003068:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	6959      	ldr	r1, [r3, #20]
 8003078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307a:	895a      	ldrh	r2, [r3, #10]
 800307c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003080:	f004 f8c3 	bl	800720a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800308c:	441a      	add	r2, r3
 800308e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003090:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800309a:	441a      	add	r2, r3
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <PCD_EP_ISR_Handler+0x4da>
 80030a8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d206      	bcs.n	80030c2 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f005 ff34 	bl	8008f28 <HAL_PCD_DataOutStageCallback>
 80030c0:	e005      	b.n	80030ce <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 fbec 	bl	80058a6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8121 	beq.w	800331e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80030dc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003128:	b29b      	uxth	r3, r3
 800312a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	78db      	ldrb	r3, [r3, #3]
 8003130:	2b02      	cmp	r3, #2
 8003132:	f000 80a2 	beq.w	800327a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800313c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800313e:	7b1b      	ldrb	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8093 	beq.w	800326c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003146:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d046      	beq.n	80031e0 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d126      	bne.n	80031a8 <PCD_EP_ISR_Handler+0x5ce>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003168:	b29b      	uxth	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	4413      	add	r3, r2
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	00da      	lsls	r2, r3, #3
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	4413      	add	r3, r2
 800317c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800318c:	b29a      	uxth	r2, r3
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e061      	b.n	800326c <PCD_EP_ISR_Handler+0x692>
 80031a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d15d      	bne.n	800326c <PCD_EP_ISR_Handler+0x692>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c4:	4413      	add	r3, r2
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00da      	lsls	r2, r3, #3
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
 80031de:	e045      	b.n	800326c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d126      	bne.n	800323c <PCD_EP_ISR_Handler+0x662>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	637b      	str	r3, [r7, #52]	; 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003202:	4413      	add	r3, r2
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	00da      	lsls	r2, r3, #3
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	4413      	add	r3, r2
 8003210:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003220:	b29a      	uxth	r2, r3
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003234:	b29a      	uxth	r2, r3
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	e017      	b.n	800326c <PCD_EP_ISR_Handler+0x692>
 800323c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d113      	bne.n	800326c <PCD_EP_ISR_Handler+0x692>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003252:	4413      	add	r3, r2
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	00da      	lsls	r2, r3, #3
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	4413      	add	r3, r2
 8003260:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003264:	63bb      	str	r3, [r7, #56]	; 0x38
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2200      	movs	r2, #0
 800326a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800326c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f005 fe73 	bl	8008f5e <HAL_PCD_DataInStageCallback>
 8003278:	e051      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800327a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d144      	bne.n	8003310 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80032ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d907      	bls.n	80032ca <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80032ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e002      	b.n	80032d0 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80032d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f005 fe3d 	bl	8008f5e <HAL_PCD_DataInStageCallback>
 80032e4:	e01b      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032ee:	441a      	add	r2, r3
 80032f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032fc:	441a      	add	r2, r3
 80032fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003300:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003308:	4618      	mov	r0, r3
 800330a:	f002 facc 	bl	80058a6 <USB_EPStartXfer>
 800330e:	e006      	b.n	800331e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003310:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003314:	461a      	mov	r2, r3
 8003316:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f917 	bl	800354c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003326:	b29b      	uxth	r3, r3
 8003328:	b21b      	sxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	f6ff ac5a 	blt.w	8002be4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3758      	adds	r7, #88	; 0x58
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b088      	sub	sp, #32
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	4613      	mov	r3, r2
 8003346:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d07c      	beq.n	800344c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335a:	b29b      	uxth	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	4413      	add	r3, r2
 800336c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003376:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	699a      	ldr	r2, [r3, #24]
 800337c:	8b7b      	ldrh	r3, [r7, #26]
 800337e:	429a      	cmp	r2, r3
 8003380:	d306      	bcc.n	8003390 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	8b7b      	ldrh	r3, [r7, #26]
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	e002      	b.n	8003396 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d123      	bne.n	80033e6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b8:	833b      	strh	r3, [r7, #24]
 80033ba:	8b3b      	ldrh	r3, [r7, #24]
 80033bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033c0:	833b      	strh	r3, [r7, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	8b3b      	ldrh	r3, [r7, #24]
 80033d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01f      	beq.n	8003430 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	82fb      	strh	r3, [r7, #22]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	8afb      	ldrh	r3, [r7, #22]
 800341c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003428:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800342c:	b29b      	uxth	r3, r3
 800342e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003430:	8b7b      	ldrh	r3, [r7, #26]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8085 	beq.w	8003542 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6959      	ldr	r1, [r3, #20]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	891a      	ldrh	r2, [r3, #8]
 8003444:	8b7b      	ldrh	r3, [r7, #26]
 8003446:	f003 fee0 	bl	800720a <USB_ReadPMA>
 800344a:	e07a      	b.n	8003542 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003454:	b29b      	uxth	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	4413      	add	r3, r2
 8003466:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003470:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	8b7b      	ldrh	r3, [r7, #26]
 8003478:	429a      	cmp	r2, r3
 800347a:	d306      	bcc.n	800348a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	8b7b      	ldrh	r3, [r7, #26]
 8003482:	1ad2      	subs	r2, r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	619a      	str	r2, [r3, #24]
 8003488:	e002      	b.n	8003490 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d123      	bne.n	80034e0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	83fb      	strh	r3, [r7, #30]
 80034b4:	8bfb      	ldrh	r3, [r7, #30]
 80034b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034ba:	83fb      	strh	r3, [r7, #30]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	8bfb      	ldrh	r3, [r7, #30]
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11f      	bne.n	800352a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003504:	83bb      	strh	r3, [r7, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	8bbb      	ldrh	r3, [r7, #28]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003522:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800352a:	8b7b      	ldrh	r3, [r7, #26]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6959      	ldr	r1, [r3, #20]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	895a      	ldrh	r2, [r3, #10]
 800353c:	8b7b      	ldrh	r3, [r7, #26]
 800353e:	f003 fe64 	bl	800720a <USB_ReadPMA>
    }
  }

  return count;
 8003542:	8b7b      	ldrh	r3, [r7, #26]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b0a2      	sub	sp, #136	; 0x88
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 81c5 	beq.w	80038f0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	4413      	add	r3, r2
 8003580:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003596:	429a      	cmp	r2, r3
 8003598:	d907      	bls.n	80035aa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a2:	1ad2      	subs	r2, r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	619a      	str	r2, [r3, #24]
 80035a8:	e002      	b.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 80b9 	bne.w	800372c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d126      	bne.n	8003610 <HAL_PCD_EP_DB_Transmit+0xc4>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	4413      	add	r3, r2
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	00da      	lsls	r2, r3, #3
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	4413      	add	r3, r2
 80035e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003608:	b29a      	uxth	r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	801a      	strh	r2, [r3, #0]
 800360e:	e01a      	b.n	8003646 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	785b      	ldrb	r3, [r3, #1]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d116      	bne.n	8003646 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003626:	b29b      	uxth	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	4413      	add	r3, r2
 800362e:	633b      	str	r3, [r7, #48]	; 0x30
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	00da      	lsls	r2, r3, #3
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	4413      	add	r3, r2
 800363a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	2200      	movs	r2, #0
 8003644:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	623b      	str	r3, [r7, #32]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d126      	bne.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x156>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	00da      	lsls	r2, r3, #3
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4413      	add	r3, r2
 8003676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003686:	b29a      	uxth	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369a:	b29a      	uxth	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	e017      	b.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d113      	bne.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	4413      	add	r3, r2
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	00da      	lsls	r2, r3, #3
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4413      	add	r3, r2
 80036c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2200      	movs	r2, #0
 80036d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f005 fc40 	bl	8008f5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 82d2 	beq.w	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003704:	827b      	strh	r3, [r7, #18]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	441a      	add	r2, r3
 8003714:	8a7b      	ldrh	r3, [r7, #18]
 8003716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800371a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003726:	b29b      	uxth	r3, r3
 8003728:	8013      	strh	r3, [r2, #0]
 800372a:	e2b0      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d021      	beq.n	800377a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800376a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800376e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003776:	b29b      	uxth	r3, r3
 8003778:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 8284 	bne.w	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800378e:	441a      	add	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800379c:	441a      	add	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d309      	bcc.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ba:	1ad2      	subs	r2, r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	621a      	str	r2, [r3, #32]
 80037c0:	e015      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80037ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037d8:	e009      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d155      	bne.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x356>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	4413      	add	r3, r2
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	00da      	lsls	r2, r3, #3
 8003814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003816:	4413      	add	r3, r2
 8003818:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
 800381e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003820:	2b3e      	cmp	r3, #62	; 0x3e
 8003822:	d916      	bls.n	8003852 <HAL_PCD_EP_DB_Transmit+0x306>
 8003824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
 800382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003836:	3b01      	subs	r3, #1
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	b29b      	uxth	r3, r3
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	b29b      	uxth	r3, r3
 8003842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384a:	b29a      	uxth	r2, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	e043      	b.n	80038da <HAL_PCD_EP_DB_Transmit+0x38e>
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	2b00      	cmp	r3, #0
 8003856:	d112      	bne.n	800387e <HAL_PCD_EP_DB_Transmit+0x332>
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003862:	b29a      	uxth	r2, r3
 8003864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003876:	b29a      	uxth	r2, r3
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	e02d      	b.n	80038da <HAL_PCD_EP_DB_Transmit+0x38e>
 800387e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	64bb      	str	r3, [r7, #72]	; 0x48
 8003884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_PCD_EP_DB_Transmit+0x348>
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	3301      	adds	r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	b29b      	uxth	r3, r3
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	b29a      	uxth	r2, r3
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e01b      	b.n	80038da <HAL_PCD_EP_DB_Transmit+0x38e>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d117      	bne.n	80038da <HAL_PCD_EP_DB_Transmit+0x38e>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038be:	4413      	add	r3, r2
 80038c0:	643b      	str	r3, [r7, #64]	; 0x40
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00da      	lsls	r2, r3, #3
 80038c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ca:	4413      	add	r3, r2
 80038cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6959      	ldr	r1, [r3, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	891a      	ldrh	r2, [r3, #8]
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f003 fc4c 	bl	8007186 <USB_WritePMA>
 80038ee:	e1ce      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	4413      	add	r3, r2
 800390a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003914:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003920:	429a      	cmp	r2, r3
 8003922:	d307      	bcc.n	8003934 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800392c:	1ad2      	subs	r2, r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	619a      	str	r2, [r3, #24]
 8003932:	e002      	b.n	800393a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 80c4 	bne.w	8003acc <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d126      	bne.n	800399a <HAL_PCD_EP_DB_Transmit+0x44e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	66bb      	str	r3, [r7, #104]	; 0x68
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003960:	4413      	add	r3, r2
 8003962:	66bb      	str	r3, [r7, #104]	; 0x68
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00da      	lsls	r2, r3, #3
 800396a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396c:	4413      	add	r3, r2
 800396e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800397e:	b29a      	uxth	r2, r3
 8003980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003992:	b29a      	uxth	r2, r3
 8003994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003996:	801a      	strh	r2, [r3, #0]
 8003998:	e01a      	b.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x484>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d116      	bne.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x484>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	673b      	str	r3, [r7, #112]	; 0x70
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b6:	4413      	add	r3, r2
 80039b8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00da      	lsls	r2, r3, #3
 80039c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c2:	4413      	add	r3, r2
 80039c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	2200      	movs	r2, #0
 80039ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d12f      	bne.n	8003a3e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	461a      	mov	r2, r3
 80039f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039f6:	4413      	add	r3, r2
 80039f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00da      	lsls	r2, r3, #3
 8003a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a06:	4413      	add	r3, r2
 8003a08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	e017      	b.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x522>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	785b      	ldrb	r3, [r3, #1]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d113      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x522>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a54:	4413      	add	r3, r2
 8003a56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	00da      	lsls	r2, r3, #3
 8003a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f005 fa72 	bl	8008f5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 8104 	bne.w	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]
 8003aca:	e0e0      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d121      	bne.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 80b4 	bne.w	8003c8e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b2e:	441a      	add	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b3c:	441a      	add	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d309      	bcc.n	8003b62 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	621a      	str	r2, [r3, #32]
 8003b60:	e015      	b.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b78:	e009      	b.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	663b      	str	r3, [r7, #96]	; 0x60
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d155      	bne.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	4413      	add	r3, r2
 8003bb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	00da      	lsls	r2, r3, #3
 8003bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bc8:	d916      	bls.n	8003bf8 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	677b      	str	r3, [r7, #116]	; 0x74
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x694>
 8003bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	677b      	str	r3, [r7, #116]	; 0x74
 8003be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	029b      	lsls	r3, r3, #10
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	e040      	b.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d112      	bne.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e02a      	b.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	677b      	str	r3, [r7, #116]	; 0x74
 8003c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c36:	3301      	adds	r3, #1
 8003c38:	677b      	str	r3, [r7, #116]	; 0x74
 8003c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	029b      	lsls	r3, r3, #10
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c44:	801a      	strh	r2, [r3, #0]
 8003c46:	e018      	b.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d114      	bne.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x72e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c5e:	4413      	add	r3, r2
 8003c60:	663b      	str	r3, [r7, #96]	; 0x60
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	00da      	lsls	r2, r3, #3
 8003c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c78:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6959      	ldr	r1, [r3, #20]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	895a      	ldrh	r2, [r3, #10]
 8003c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f003 fa7c 	bl	8007186 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca8:	823b      	strh	r3, [r7, #16]
 8003caa:	8a3b      	ldrh	r3, [r7, #16]
 8003cac:	f083 0310 	eor.w	r3, r3, #16
 8003cb0:	823b      	strh	r3, [r7, #16]
 8003cb2:	8a3b      	ldrh	r3, [r7, #16]
 8003cb4:	f083 0320 	eor.w	r3, r3, #32
 8003cb8:	823b      	strh	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	441a      	add	r2, r3
 8003cc8:	8a3b      	ldrh	r3, [r7, #16]
 8003cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3788      	adds	r7, #136	; 0x88
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cfa:	897b      	ldrh	r3, [r7, #10]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e009      	b.n	8003d32 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d1e:	897a      	ldrh	r2, [r7, #10]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d32:	893b      	ldrh	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	80da      	strh	r2, [r3, #6]
 8003d46:	e00b      	b.n	8003d60 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d141      	bne.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd2:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d131      	bne.n	8003e44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de6:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df0:	4b43      	ldr	r3, [pc, #268]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003df8:	4a41      	ldr	r2, [pc, #260]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2232      	movs	r2, #50	; 0x32
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	4a3f      	ldr	r2, [pc, #252]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	0c9b      	lsrs	r3, r3, #18
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e16:	e002      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1e:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d102      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f2      	bne.n	8003e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e32:	4b33      	ldr	r3, [pc, #204]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d158      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e057      	b.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e54:	e04d      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d141      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5e:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6a:	d131      	bne.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e72:	4a23      	ldr	r2, [pc, #140]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e84:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e8c:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2232      	movs	r2, #50	; 0x32
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	4a1c      	ldr	r2, [pc, #112]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	0c9b      	lsrs	r3, r3, #18
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea2:	e002      	b.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d102      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f2      	bne.n	8003ea4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d112      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e011      	b.n	8003ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ee0:	e007      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eea:	4a05      	ldr	r2, [pc, #20]	; (8003f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	40007000 	.word	0x40007000
 8003f04:	20000000 	.word	0x20000000
 8003f08:	431bde83 	.word	0x431bde83

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e306      	b.n	800452c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2a:	4b97      	ldr	r3, [pc, #604]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f34:	4b94      	ldr	r3, [pc, #592]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3e>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_OscConfig+0x44>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	4b8d      	ldr	r3, [pc, #564]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05b      	beq.n	8004014 <HAL_RCC_OscConfig+0x108>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d157      	bne.n	8004014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e2e1      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d106      	bne.n	8003f80 <HAL_RCC_OscConfig+0x74>
 8003f72:	4b85      	ldr	r3, [pc, #532]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a84      	ldr	r2, [pc, #528]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7e      	ldr	r2, [pc, #504]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b7c      	ldr	r3, [pc, #496]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7b      	ldr	r2, [pc, #492]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003fa4:	4b78      	ldr	r3, [pc, #480]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a77      	ldr	r2, [pc, #476]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a74      	ldr	r2, [pc, #464]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fc fcae 	bl	8000924 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fc fcaa 	bl	8000924 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e2a6      	b.n	800452c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fde:	4b6a      	ldr	r3, [pc, #424]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xc0>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fc fc9a 	bl	8000924 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fc fc96 	bl	8000924 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e292      	b.n	800452c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004006:	4b60      	ldr	r3, [pc, #384]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xe8>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d075      	beq.n	800410e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004022:	4b59      	ldr	r3, [pc, #356]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800402c:	4b56      	ldr	r3, [pc, #344]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d102      	bne.n	8004042 <HAL_RCC_OscConfig+0x136>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d002      	beq.n	8004048 <HAL_RCC_OscConfig+0x13c>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b04      	cmp	r3, #4
 8004046:	d11f      	bne.n	8004088 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004048:	4b4f      	ldr	r3, [pc, #316]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x154>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e265      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	4946      	ldr	r1, [pc, #280]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004074:	4b45      	ldr	r3, [pc, #276]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fc07 	bl	800088c <HAL_InitTick>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d043      	beq.n	800410c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e251      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d023      	beq.n	80040d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004090:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a3c      	ldr	r2, [pc, #240]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fc fc42 	bl	8000924 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a4:	f7fc fc3e 	bl	8000924 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e23a      	b.n	800452c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b31      	ldr	r3, [pc, #196]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	061b      	lsls	r3, r3, #24
 80040d0:	492d      	ldr	r1, [pc, #180]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
 80040d6:	e01a      	b.n	800410e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 80040de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fc fc1e 	bl	8000924 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fc fc1a 	bl	8000924 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e216      	b.n	800452c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1e0>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d041      	beq.n	800419e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01c      	beq.n	800415c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004128:	4a17      	ldr	r2, [pc, #92]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fc fbf7 	bl	8000924 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413a:	f7fc fbf3 	bl	8000924 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1ef      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ef      	beq.n	800413a <HAL_RCC_OscConfig+0x22e>
 800415a:	e020      	b.n	800419e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fc fbda 	bl	8000924 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004172:	e00d      	b.n	8004190 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004174:	f7fc fbd6 	bl	8000924 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d906      	bls.n	8004190 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1d2      	b.n	800452c <HAL_RCC_OscConfig+0x620>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004190:	4b8c      	ldr	r3, [pc, #560]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ea      	bne.n	8004174 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80a6 	beq.w	80042f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b0:	4b84      	ldr	r3, [pc, #528]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x2b4>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x2b6>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	4a7e      	ldr	r2, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6593      	str	r3, [r2, #88]	; 0x58
 80041d2:	4b7c      	ldr	r3, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e2:	4b79      	ldr	r3, [pc, #484]	; (80043c8 <HAL_RCC_OscConfig+0x4bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ee:	4b76      	ldr	r3, [pc, #472]	; (80043c8 <HAL_RCC_OscConfig+0x4bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a75      	ldr	r2, [pc, #468]	; (80043c8 <HAL_RCC_OscConfig+0x4bc>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fc fb93 	bl	8000924 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fc fb8f 	bl	8000924 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e18b      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004214:	4b6c      	ldr	r3, [pc, #432]	; (80043c8 <HAL_RCC_OscConfig+0x4bc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d108      	bne.n	800423a <HAL_RCC_OscConfig+0x32e>
 8004228:	4b66      	ldr	r3, [pc, #408]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	4a65      	ldr	r2, [pc, #404]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004238:	e024      	b.n	8004284 <HAL_RCC_OscConfig+0x378>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d110      	bne.n	8004264 <HAL_RCC_OscConfig+0x358>
 8004242:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004248:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	4a5a      	ldr	r2, [pc, #360]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004262:	e00f      	b.n	8004284 <HAL_RCC_OscConfig+0x378>
 8004264:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	4a56      	ldr	r2, [pc, #344]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d016      	beq.n	80042ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fc fb4a 	bl	8000924 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fc fb46 	bl	8000924 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e140      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ed      	beq.n	8004294 <HAL_RCC_OscConfig+0x388>
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fc fb33 	bl	8000924 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fc fb2f 	bl	8000924 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e129      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d8:	4b3a      	ldr	r3, [pc, #232]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ed      	bne.n	80042c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4a34      	ldr	r2, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d03c      	beq.n	800437e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01c      	beq.n	8004346 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800430c:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800430e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004312:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fc fb02 	bl	8000924 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004324:	f7fc fafe 	bl	8000924 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0fa      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004336:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ef      	beq.n	8004324 <HAL_RCC_OscConfig+0x418>
 8004344:	e01b      	b.n	800437e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004346:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004356:	f7fc fae5 	bl	8000924 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435e:	f7fc fae1 	bl	8000924 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0dd      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 8004372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ef      	bne.n	800435e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80d1 	beq.w	800452a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b0c      	cmp	r3, #12
 8004392:	f000 808b 	beq.w	80044ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d15e      	bne.n	800445c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCC_OscConfig+0x4b8>)
 80043a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fc fabb 	bl	8000924 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b0:	e00c      	b.n	80043cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fc fab7 	bl	8000924 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d905      	bls.n	80043cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0b3      	b.n	800452c <HAL_RCC_OscConfig+0x620>
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ec      	bne.n	80043b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d8:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	4b56      	ldr	r3, [pc, #344]	; (8004538 <HAL_RCC_OscConfig+0x62c>)
 80043de:	4013      	ands	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6a11      	ldr	r1, [r2, #32]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e8:	3a01      	subs	r2, #1
 80043ea:	0112      	lsls	r2, r2, #4
 80043ec:	4311      	orrs	r1, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043f2:	0212      	lsls	r2, r2, #8
 80043f4:	4311      	orrs	r1, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043fa:	0852      	lsrs	r2, r2, #1
 80043fc:	3a01      	subs	r2, #1
 80043fe:	0552      	lsls	r2, r2, #21
 8004400:	4311      	orrs	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004406:	0852      	lsrs	r2, r2, #1
 8004408:	3a01      	subs	r2, #1
 800440a:	0652      	lsls	r2, r2, #25
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004412:	06d2      	lsls	r2, r2, #27
 8004414:	430a      	orrs	r2, r1
 8004416:	4947      	ldr	r1, [pc, #284]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 8004418:	4313      	orrs	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b45      	ldr	r3, [pc, #276]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a44      	ldr	r2, [pc, #272]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004428:	4b42      	ldr	r3, [pc, #264]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a41      	ldr	r2, [pc, #260]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fa76 	bl	8000924 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fa72 	bl	8000924 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e06e      	b.n	800452c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x530>
 800445a:	e066      	b.n	800452a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a34      	ldr	r2, [pc, #208]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004466:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004468:	4b32      	ldr	r3, [pc, #200]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a31      	ldr	r2, [pc, #196]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a2e      	ldr	r2, [pc, #184]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 800447a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fc fa4e 	bl	8000924 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fc fa4a 	bl	8000924 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e046      	b.n	800452c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449e:	4b25      	ldr	r3, [pc, #148]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x580>
 80044aa:	e03e      	b.n	800452a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e039      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_RCC_OscConfig+0x628>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d12c      	bne.n	8004526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	3b01      	subs	r3, #1
 80044d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d123      	bne.n	8004526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d11b      	bne.n	8004526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d113      	bne.n	8004526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	3b01      	subs	r3, #1
 800450c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d109      	bne.n	8004526 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	019f800c 	.word	0x019f800c

0800453c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e11e      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b91      	ldr	r3, [pc, #580]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d910      	bls.n	8004584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b8e      	ldr	r3, [pc, #568]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 020f 	bic.w	r2, r3, #15
 800456a:	498c      	ldr	r1, [pc, #560]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b8a      	ldr	r3, [pc, #552]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e106      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d073      	beq.n	8004678 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d129      	bne.n	80045ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004598:	4b81      	ldr	r3, [pc, #516]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0f4      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045a8:	f000 f972 	bl	8004890 <RCC_GetSysClockFreqFromPLLSource>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4a7c      	ldr	r2, [pc, #496]	; (80047a4 <HAL_RCC_ClockConfig+0x268>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d93f      	bls.n	8004636 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045b6:	4b7a      	ldr	r3, [pc, #488]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d033      	beq.n	8004636 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d12f      	bne.n	8004636 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045d6:	4b72      	ldr	r3, [pc, #456]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045de:	4a70      	ldr	r2, [pc, #448]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80045e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e024      	b.n	8004636 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f4:	4b6a      	ldr	r3, [pc, #424]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0c6      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	4b66      	ldr	r3, [pc, #408]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0be      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004614:	f000 f8ce 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 8004618:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4a61      	ldr	r2, [pc, #388]	; (80047a4 <HAL_RCC_ClockConfig+0x268>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d909      	bls.n	8004636 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004622:	4b5f      	ldr	r3, [pc, #380]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462a:	4a5d      	ldr	r2, [pc, #372]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004636:	4b5a      	ldr	r3, [pc, #360]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 0203 	bic.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4957      	ldr	r1, [pc, #348]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004644:	4313      	orrs	r3, r2
 8004646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004648:	f7fc f96c 	bl	8000924 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	e00a      	b.n	8004666 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004650:	f7fc f968 	bl	8000924 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f241 3288 	movw	r2, #5000	; 0x1388
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e095      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 020c 	and.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	429a      	cmp	r2, r3
 8004676:	d1eb      	bne.n	8004650 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d023      	beq.n	80046cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004690:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a42      	ldr	r2, [pc, #264]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800469a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046b0:	4a3b      	ldr	r2, [pc, #236]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80046b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b8:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4936      	ldr	r1, [pc, #216]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
 80046ca:	e008      	b.n	80046de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d105      	bne.n	80046de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046d2:	4b33      	ldr	r3, [pc, #204]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 80046d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046de:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d21d      	bcs.n	8004728 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ec:	4b2b      	ldr	r3, [pc, #172]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 020f 	bic.w	r2, r3, #15
 80046f4:	4929      	ldr	r1, [pc, #164]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046fc:	f7fc f912 	bl	8000924 <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fc f90e 	bl	8000924 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e03b      	b.n	8004792 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_RCC_ClockConfig+0x260>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d1ed      	bne.n	8004704 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4917      	ldr	r1, [pc, #92]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	490f      	ldr	r1, [pc, #60]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004766:	f000 f825 	bl	80047b4 <HAL_RCC_GetSysClockFreq>
 800476a:	4602      	mov	r2, r0
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <HAL_RCC_ClockConfig+0x264>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	091b      	lsrs	r3, r3, #4
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	490c      	ldr	r1, [pc, #48]	; (80047a8 <HAL_RCC_ClockConfig+0x26c>)
 8004778:	5ccb      	ldrb	r3, [r1, r3]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <HAL_RCC_ClockConfig+0x270>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_ClockConfig+0x274>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fc f87e 	bl	800088c <HAL_InitTick>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40022000 	.word	0x40022000
 80047a0:	40021000 	.word	0x40021000
 80047a4:	04c4b400 	.word	0x04c4b400
 80047a8:	08009550 	.word	0x08009550
 80047ac:	20000000 	.word	0x20000000
 80047b0:	20000004 	.word	0x20000004

080047b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d102      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e047      	b.n	800485c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d102      	bne.n	80047de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d8:	4b26      	ldr	r3, [pc, #152]	; (8004874 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e03e      	b.n	800485c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047de:	4b23      	ldr	r3, [pc, #140]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d136      	bne.n	8004858 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f4:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3301      	adds	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d10c      	bne.n	8004822 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_RCC_GetSysClockFreq+0xc0>)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004812:	68d2      	ldr	r2, [r2, #12]
 8004814:	0a12      	lsrs	r2, r2, #8
 8004816:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
      break;
 8004820:	e00c      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004822:	4a13      	ldr	r2, [pc, #76]	; (8004870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	4a10      	ldr	r2, [pc, #64]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	0a12      	lsrs	r2, r2, #8
 8004830:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
      break;
 800483a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_GetSysClockFreq+0xb8>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e001      	b.n	800485c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800485c:	693b      	ldr	r3, [r7, #16]
}
 800485e:	4618      	mov	r0, r3
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	00f42400 	.word	0x00f42400
 8004874:	016e3600 	.word	0x016e3600

08004878 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000000 	.word	0x20000000

08004890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004896:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10c      	bne.n	80048ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	4a14      	ldr	r2, [pc, #80]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048be:	68d2      	ldr	r2, [r2, #12]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	617b      	str	r3, [r7, #20]
    break;
 80048cc:	e00c      	b.n	80048e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ce:	4a12      	ldr	r2, [pc, #72]	; (8004918 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d6:	4a0e      	ldr	r2, [pc, #56]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d8:	68d2      	ldr	r2, [r2, #12]
 80048da:	0a12      	lsrs	r2, r2, #8
 80048dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]
    break;
 80048e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	0e5b      	lsrs	r3, r3, #25
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004902:	687b      	ldr	r3, [r7, #4]
}
 8004904:	4618      	mov	r0, r3
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	40021000 	.word	0x40021000
 8004914:	016e3600 	.word	0x016e3600
 8004918:	00f42400 	.word	0x00f42400

0800491c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004924:	2300      	movs	r3, #0
 8004926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004928:	2300      	movs	r3, #0
 800492a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8098 	beq.w	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10d      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4b40      	ldr	r3, [pc, #256]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6593      	str	r3, [r2, #88]	; 0x58
 8004956:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004966:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a39      	ldr	r2, [pc, #228]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004972:	f7fb ffd7 	bl	8000924 <HAL_GetTick>
 8004976:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004978:	e009      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497a:	f7fb ffd3 	bl	8000924 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d902      	bls.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	74fb      	strb	r3, [r7, #19]
        break;
 800498c:	e005      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ef      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d159      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01e      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d019      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049bc:	4b23      	ldr	r3, [pc, #140]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049c8:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d8:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fb ff93 	bl	8000924 <HAL_GetTick>
 80049fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a00:	e00b      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7fb ff8f 	bl	8000924 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d902      	bls.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	74fb      	strb	r3, [r7, #19]
            break;
 8004a18:	e006      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1a:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ec      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a28:	7cfb      	ldrb	r3, [r7, #19]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4903      	ldr	r1, [pc, #12]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	74bb      	strb	r3, [r7, #18]
 8004a4a:	e005      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a58:	7c7b      	ldrb	r3, [r7, #17]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d105      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	4ba6      	ldr	r3, [pc, #664]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	4aa5      	ldr	r2, [pc, #660]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a76:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f023 0203 	bic.w	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	499c      	ldr	r1, [pc, #624]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a98:	4b97      	ldr	r3, [pc, #604]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 020c 	bic.w	r2, r3, #12
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4994      	ldr	r1, [pc, #592]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aba:	4b8f      	ldr	r3, [pc, #572]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	498b      	ldr	r1, [pc, #556]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004adc:	4b86      	ldr	r3, [pc, #536]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	4983      	ldr	r1, [pc, #524]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004afe:	4b7e      	ldr	r3, [pc, #504]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	497a      	ldr	r1, [pc, #488]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b20:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	4972      	ldr	r1, [pc, #456]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	4969      	ldr	r1, [pc, #420]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b64:	4b64      	ldr	r3, [pc, #400]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4961      	ldr	r1, [pc, #388]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b86:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	4958      	ldr	r1, [pc, #352]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	4950      	ldr	r1, [pc, #320]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004be0:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4942      	ldr	r1, [pc, #264]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a3c      	ldr	r2, [pc, #240]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c18:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c36:	d105      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a2e      	ldr	r2, [pc, #184]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c50:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6e:	d105      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a20      	ldr	r2, [pc, #128]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	4918      	ldr	r1, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	490a      	ldr	r1, [pc, #40]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cde:	d105      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000

08004cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d0c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d32:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d60:	b084      	sub	sp, #16
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	f107 0014 	add.w	r0, r7, #20
 8004d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	b004      	add	sp, #16
 8004da0:	4770      	bx	lr
	...

08004da4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b09d      	sub	sp, #116	; 0x74
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	78db      	ldrb	r3, [r3, #3]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d81f      	bhi.n	8004e16 <USB_ActivateEndpoint+0x72>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <USB_ActivateEndpoint+0x38>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e1f 	.word	0x08004e1f
 8004de8:	08004dfb 	.word	0x08004dfb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004df8:	e012      	b.n	8004e20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dfa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004dfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004e02:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e06:	e00b      	b.n	8004e20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004e14:	e004      	b.n	8004e20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004e1c:	e000      	b.n	8004e20 <USB_ActivateEndpoint+0x7c>
      break;
 8004e1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	b21a      	sxth	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b21b      	sxth	r3, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	7b1b      	ldrb	r3, [r3, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 8149 	bne.w	8005128 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8084 	beq.w	8004fa8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	00da      	lsls	r2, r3, #3
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	88db      	ldrh	r3, [r3, #6]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	827b      	strh	r3, [r7, #18]
 8004ee2:	8a7b      	ldrh	r3, [r7, #18]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <USB_ActivateEndpoint+0x180>
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	823b      	strh	r3, [r7, #16]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	8a3b      	ldrh	r3, [r7, #16]
 8004f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	78db      	ldrb	r3, [r3, #3]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d020      	beq.n	8004f6e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f42:	81bb      	strh	r3, [r7, #12]
 8004f44:	89bb      	ldrh	r3, [r7, #12]
 8004f46:	f083 0320 	eor.w	r3, r3, #32
 8004f4a:	81bb      	strh	r3, [r7, #12]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	89bb      	ldrh	r3, [r7, #12]
 8004f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	8013      	strh	r3, [r2, #0]
 8004f6c:	e2a6      	b.n	80054bc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f84:	81fb      	strh	r3, [r7, #14]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	441a      	add	r2, r3
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]
 8004fa6:	e289      	b.n	80054bc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	4413      	add	r3, r2
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	00da      	lsls	r2, r3, #3
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	88db      	ldrh	r3, [r3, #6]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	4413      	add	r3, r2
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	00da      	lsls	r2, r3, #3
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	2b3e      	cmp	r3, #62	; 0x3e
 8005006:	d918      	bls.n	800503a <USB_ActivateEndpoint+0x296>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <USB_ActivateEndpoint+0x27e>
 800501c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800501e:	3b01      	subs	r3, #1
 8005020:	66bb      	str	r3, [r7, #104]	; 0x68
 8005022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005024:	b29b      	uxth	r3, r3
 8005026:	029b      	lsls	r3, r3, #10
 8005028:	b29b      	uxth	r3, r3
 800502a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005032:	b29a      	uxth	r2, r3
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	801a      	strh	r2, [r3, #0]
 8005038:	e029      	b.n	800508e <USB_ActivateEndpoint+0x2ea>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d112      	bne.n	8005068 <USB_ActivateEndpoint+0x2c4>
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800504c:	b29a      	uxth	r2, r3
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005060:	b29a      	uxth	r2, r3
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	801a      	strh	r2, [r3, #0]
 8005066:	e012      	b.n	800508e <USB_ActivateEndpoint+0x2ea>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <USB_ActivateEndpoint+0x2de>
 800507c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800507e:	3301      	adds	r3, #1
 8005080:	66bb      	str	r3, [r7, #104]	; 0x68
 8005082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005084:	b29b      	uxth	r3, r3
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	b29a      	uxth	r2, r3
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	847b      	strh	r3, [r7, #34]	; 0x22
 800509c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800509e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01b      	beq.n	80050de <USB_ActivateEndpoint+0x33a>
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	843b      	strh	r3, [r7, #32]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	441a      	add	r2, r3
 80050c8:	8c3b      	ldrh	r3, [r7, #32]
 80050ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	83fb      	strh	r3, [r7, #30]
 80050f6:	8bfb      	ldrh	r3, [r7, #30]
 80050f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050fc:	83fb      	strh	r3, [r7, #30]
 80050fe:	8bfb      	ldrh	r3, [r7, #30]
 8005100:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005104:	83fb      	strh	r3, [r7, #30]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	8bfb      	ldrh	r3, [r7, #30]
 8005112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005122:	b29b      	uxth	r3, r3
 8005124:	8013      	strh	r3, [r2, #0]
 8005126:	e1c9      	b.n	80054bc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	78db      	ldrb	r3, [r3, #3]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d11e      	bne.n	800516e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005160:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]
 800516c:	e01d      	b.n	80051aa <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	441a      	add	r2, r3
 8005192:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ba:	4413      	add	r3, r2
 80051bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	891b      	ldrh	r3, [r3, #8]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	657b      	str	r3, [r7, #84]	; 0x54
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ee:	4413      	add	r3, r2
 80051f0:	657b      	str	r3, [r7, #84]	; 0x54
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	00da      	lsls	r2, r3, #3
 80051f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fa:	4413      	add	r3, r2
 80051fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005200:	653b      	str	r3, [r7, #80]	; 0x50
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	895b      	ldrh	r3, [r3, #10]
 8005206:	085b      	lsrs	r3, r3, #1
 8005208:	b29b      	uxth	r3, r3
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005210:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 8093 	bne.w	8005342 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800522c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01b      	beq.n	8005270 <USB_ActivateEndpoint+0x4cc>
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800525c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	b29b      	uxth	r3, r3
 800526e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800527e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <USB_ActivateEndpoint+0x51c>
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	877b      	strh	r3, [r7, #58]	; 0x3a
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80052d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052de:	873b      	strh	r3, [r7, #56]	; 0x38
 80052e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800532c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	b29b      	uxth	r3, r3
 800533e:	8013      	strh	r3, [r2, #0]
 8005340:	e0bc      	b.n	80054bc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01d      	beq.n	800539a <USB_ActivateEndpoint+0x5f6>
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01d      	beq.n	80053f2 <USB_ActivateEndpoint+0x64e>
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d024      	beq.n	8005444 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005410:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005418:	f083 0320 	eor.w	r3, r3, #32
 800541c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	441a      	add	r2, r3
 800542a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]
 8005442:	e01d      	b.n	8005480 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800546c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547c:	b29b      	uxth	r3, r3
 800547e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80054a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80054bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3774      	adds	r7, #116	; 0x74
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b08d      	sub	sp, #52	; 0x34
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	7b1b      	ldrb	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 808e 	bne.w	80055fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d044      	beq.n	8005572 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	81bb      	strh	r3, [r7, #12]
 80054f6:	89bb      	ldrh	r3, [r7, #12]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <USB_DeactivateEndpoint+0x6c>
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	817b      	strh	r3, [r7, #10]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	897b      	ldrh	r3, [r7, #10]
 8005524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005530:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005534:	b29b      	uxth	r3, r3
 8005536:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554e:	813b      	strh	r3, [r7, #8]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	893b      	ldrh	r3, [r7, #8]
 800555c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]
 8005570:	e192      	b.n	8005898 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	827b      	strh	r3, [r7, #18]
 8005580:	8a7b      	ldrh	r3, [r7, #18]
 8005582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01b      	beq.n	80055c2 <USB_DeactivateEndpoint+0xf6>
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	823b      	strh	r3, [r7, #16]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	8a3b      	ldrh	r3, [r7, #16]
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d8:	81fb      	strh	r3, [r7, #14]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	441a      	add	r2, r3
 80055e4:	89fb      	ldrh	r3, [r7, #14]
 80055e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
 80055fa:	e14d      	b.n	8005898 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 80a5 	bne.w	8005750 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	843b      	strh	r3, [r7, #32]
 8005614:	8c3b      	ldrh	r3, [r7, #32]
 8005616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01b      	beq.n	8005656 <USB_DeactivateEndpoint+0x18a>
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005634:	83fb      	strh	r3, [r7, #30]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	8bfb      	ldrh	r3, [r7, #30]
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	83bb      	strh	r3, [r7, #28]
 8005664:	8bbb      	ldrh	r3, [r7, #28]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01b      	beq.n	80056a6 <USB_DeactivateEndpoint+0x1da>
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005684:	837b      	strh	r3, [r7, #26]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	441a      	add	r2, r3
 8005690:	8b7b      	ldrh	r3, [r7, #26]
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	833b      	strh	r3, [r7, #24]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	441a      	add	r2, r3
 80056c8:	8b3b      	ldrh	r3, [r7, #24]
 80056ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	82fb      	strh	r3, [r7, #22]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8afb      	ldrh	r3, [r7, #22]
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572c:	82bb      	strh	r3, [r7, #20]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	441a      	add	r2, r3
 8005738:	8abb      	ldrh	r3, [r7, #20]
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]
 800574e:	e0a3      	b.n	8005898 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800575e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01b      	beq.n	80057a0 <USB_DeactivateEndpoint+0x2d4>
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	441a      	add	r2, r3
 800578a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800578c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579c:	b29b      	uxth	r3, r3
 800579e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80057ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <USB_DeactivateEndpoint+0x324>
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005806:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	847b      	strh	r3, [r7, #34]	; 0x22
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005894:	b29b      	uxth	r3, r3
 8005896:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3734      	adds	r7, #52	; 0x34
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b0c2      	sub	sp, #264	; 0x108
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058b4:	6018      	str	r0, [r3, #0]
 80058b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058be:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	f040 867b 	bne.w	80065c8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d908      	bls.n	8005900 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058fe:	e007      	b.n	8005910 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	7b1b      	ldrb	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d13a      	bne.n	8005996 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6959      	ldr	r1, [r3, #20]
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	88da      	ldrh	r2, [r3, #6]
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593c:	b29b      	uxth	r3, r3
 800593e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005942:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005946:	6800      	ldr	r0, [r0, #0]
 8005948:	f001 fc1d 	bl	8007186 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800594c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005966:	b29b      	uxth	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4413      	add	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	00da      	lsls	r2, r3, #3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4413      	add	r3, r2
 8005982:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	f000 bde3 	b.w	800655c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	78db      	ldrb	r3, [r3, #3]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	f040 843a 	bne.w	800621c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f240 83b7 	bls.w	8006134 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6a1a      	ldr	r2, [r3, #32]
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 81b3 	beq.w	8005dce <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d16d      	bne.n	8005b60 <USB_EPStartXfer+0x2ba>
 8005a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	4413      	add	r3, r2
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	00da      	lsls	r2, r3, #3
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac6:	d91c      	bls.n	8005b02 <USB_EPStartXfer+0x25c>
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <USB_EPStartXfer+0x242>
 8005ade:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ae8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	e053      	b.n	8005baa <USB_EPStartXfer+0x304>
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d112      	bne.n	8005b30 <USB_EPStartXfer+0x28a>
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e03c      	b.n	8005baa <USB_EPStartXfer+0x304>
 8005b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <USB_EPStartXfer+0x2aa>
 8005b46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	029b      	lsls	r3, r3, #10
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e024      	b.n	8005baa <USB_EPStartXfer+0x304>
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d11c      	bne.n	8005baa <USB_EPStartXfer+0x304>
 8005b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	4413      	add	r3, r2
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30
 8005b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00da      	lsls	r2, r3, #3
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	4413      	add	r3, r2
 8005b9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	895b      	ldrh	r3, [r3, #10]
 8005bb6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6959      	ldr	r1, [r3, #20]
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bd8:	6800      	ldr	r0, [r0, #0]
 8005bda:	f001 fad4 	bl	8007186 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bee:	441a      	add	r2, r3
 8005bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6a1a      	ldr	r2, [r3, #32]
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d90f      	bls.n	8005c38 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c28:	1ad2      	subs	r2, r2, r3
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	621a      	str	r2, [r3, #32]
 8005c36:	e00e      	b.n	8005c56 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d16d      	bne.n	8005d42 <USB_EPStartXfer+0x49c>
 8005c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	4413      	add	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	00da      	lsls	r2, r3, #3
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca8:	d91c      	bls.n	8005ce4 <USB_EPStartXfer+0x43e>
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <USB_EPStartXfer+0x424>
 8005cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	029b      	lsls	r3, r3, #10
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	e059      	b.n	8005d98 <USB_EPStartXfer+0x4f2>
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d112      	bne.n	8005d12 <USB_EPStartXfer+0x46c>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e042      	b.n	8005d98 <USB_EPStartXfer+0x4f2>
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <USB_EPStartXfer+0x48c>
 8005d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e02a      	b.n	8005d98 <USB_EPStartXfer+0x4f2>
 8005d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d122      	bne.n	8005d98 <USB_EPStartXfer+0x4f2>
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	4413      	add	r3, r2
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	00da      	lsls	r2, r3, #3
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	4413      	add	r3, r2
 8005d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	891b      	ldrh	r3, [r3, #8]
 8005da4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6959      	ldr	r1, [r3, #20]
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005dc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005dc6:	6800      	ldr	r0, [r0, #0]
 8005dc8:	f001 f9dd 	bl	8007186 <USB_WritePMA>
 8005dcc:	e3c6      	b.n	800655c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d16d      	bne.n	8005eba <USB_EPStartXfer+0x614>
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfe:	4413      	add	r3, r2
 8005e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	00da      	lsls	r2, r3, #3
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	4413      	add	r3, r2
 8005e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005e20:	d91c      	bls.n	8005e5c <USB_EPStartXfer+0x5b6>
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <USB_EPStartXfer+0x59c>
 8005e38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	801a      	strh	r2, [r3, #0]
 8005e5a:	e059      	b.n	8005f10 <USB_EPStartXfer+0x66a>
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d112      	bne.n	8005e8a <USB_EPStartXfer+0x5e4>
 8005e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	e042      	b.n	8005f10 <USB_EPStartXfer+0x66a>
 8005e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d004      	beq.n	8005eaa <USB_EPStartXfer+0x604>
 8005ea0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	029b      	lsls	r3, r3, #10
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e02a      	b.n	8005f10 <USB_EPStartXfer+0x66a>
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d122      	bne.n	8005f10 <USB_EPStartXfer+0x66a>
 8005eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eea:	4413      	add	r3, r2
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
 8005eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	00da      	lsls	r2, r3, #3
 8005efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efe:	4413      	add	r3, r2
 8005f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	891b      	ldrh	r3, [r3, #8]
 8005f1c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6959      	ldr	r1, [r3, #20]
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f3e:	6800      	ldr	r0, [r0, #0]
 8005f40:	f001 f921 	bl	8007186 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f54:	441a      	add	r2, r3
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d90f      	bls.n	8005f9e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6a1a      	ldr	r2, [r3, #32]
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	621a      	str	r2, [r3, #32]
 8005f9c:	e00e      	b.n	8005fbc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d16d      	bne.n	80060b4 <USB_EPStartXfer+0x80e>
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	4413      	add	r3, r2
 8005ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	00da      	lsls	r2, r3, #3
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	4413      	add	r3, r2
 800600e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006012:	637b      	str	r3, [r7, #52]	; 0x34
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006018:	2b3e      	cmp	r3, #62	; 0x3e
 800601a:	d91c      	bls.n	8006056 <USB_EPStartXfer+0x7b0>
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <USB_EPStartXfer+0x796>
 8006032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006036:	3b01      	subs	r3, #1
 8006038:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	b29b      	uxth	r3, r3
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	b29b      	uxth	r3, r3
 8006046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604e:	b29a      	uxth	r2, r3
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e053      	b.n	80060fe <USB_EPStartXfer+0x858>
 8006056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605a:	2b00      	cmp	r3, #0
 800605c:	d112      	bne.n	8006084 <USB_EPStartXfer+0x7de>
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006068:	b29a      	uxth	r2, r3
 800606a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607c:	b29a      	uxth	r2, r3
 800607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	e03c      	b.n	80060fe <USB_EPStartXfer+0x858>
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d004      	beq.n	80060a4 <USB_EPStartXfer+0x7fe>
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	3301      	adds	r3, #1
 80060a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e024      	b.n	80060fe <USB_EPStartXfer+0x858>
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d11c      	bne.n	80060fe <USB_EPStartXfer+0x858>
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d8:	4413      	add	r3, r2
 80060da:	643b      	str	r3, [r7, #64]	; 0x40
 80060dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	00da      	lsls	r2, r3, #3
 80060ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	895b      	ldrh	r3, [r3, #10]
 800610a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800610e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6959      	ldr	r1, [r3, #20]
 800611a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611e:	b29b      	uxth	r3, r3
 8006120:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006124:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006128:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	f001 f82a 	bl	8007186 <USB_WritePMA>
 8006132:	e213      	b.n	800655c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c0:	4413      	add	r3, r2
 80061c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	00da      	lsls	r2, r3, #3
 80061d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061da:	65bb      	str	r3, [r7, #88]	; 0x58
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	891b      	ldrh	r3, [r3, #8]
 80061f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6959      	ldr	r1, [r3, #20]
 8006202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006206:	b29b      	uxth	r3, r3
 8006208:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800620c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006210:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006214:	6800      	ldr	r0, [r0, #0]
 8006216:	f000 ffb6 	bl	8007186 <USB_WritePMA>
 800621a:	e19f      	b.n	800655c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800623a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80bc 	beq.w	80063da <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	673b      	str	r3, [r7, #112]	; 0x70
 800626e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d16d      	bne.n	800635a <USB_EPStartXfer+0xab4>
 800627e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	66bb      	str	r3, [r7, #104]	; 0x68
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006298:	b29b      	uxth	r3, r3
 800629a:	461a      	mov	r2, r3
 800629c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800629e:	4413      	add	r3, r2
 80062a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	00da      	lsls	r2, r3, #3
 80062b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062b2:	4413      	add	r3, r2
 80062b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062b8:	667b      	str	r3, [r7, #100]	; 0x64
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062be:	2b3e      	cmp	r3, #62	; 0x3e
 80062c0:	d91c      	bls.n	80062fc <USB_EPStartXfer+0xa56>
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <USB_EPStartXfer+0xa3c>
 80062d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062dc:	3b01      	subs	r3, #1
 80062de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	029b      	lsls	r3, r3, #10
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e053      	b.n	80063a4 <USB_EPStartXfer+0xafe>
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	2b00      	cmp	r3, #0
 8006302:	d112      	bne.n	800632a <USB_EPStartXfer+0xa84>
 8006304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800630e:	b29a      	uxth	r2, r3
 8006310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006322:	b29a      	uxth	r2, r3
 8006324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	e03c      	b.n	80063a4 <USB_EPStartXfer+0xafe>
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <USB_EPStartXfer+0xaa4>
 8006340:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006344:	3301      	adds	r3, #1
 8006346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800634a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29a      	uxth	r2, r3
 8006354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e024      	b.n	80063a4 <USB_EPStartXfer+0xafe>
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d11c      	bne.n	80063a4 <USB_EPStartXfer+0xafe>
 800636a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637e:	4413      	add	r3, r2
 8006380:	673b      	str	r3, [r7, #112]	; 0x70
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	00da      	lsls	r2, r3, #3
 8006390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006392:	4413      	add	r3, r2
 8006394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639e:	b29a      	uxth	r2, r3
 80063a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	895b      	ldrh	r3, [r3, #10]
 80063b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6959      	ldr	r1, [r3, #20]
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80063ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80063ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80063d2:	6800      	ldr	r0, [r0, #0]
 80063d4:	f000 fed7 	bl	8007186 <USB_WritePMA>
 80063d8:	e0c0      	b.n	800655c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d16d      	bne.n	80064c6 <USB_EPStartXfer+0xc20>
 80063ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006404:	b29b      	uxth	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800640a:	4413      	add	r3, r2
 800640c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800640e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	00da      	lsls	r2, r3, #3
 800641c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641e:	4413      	add	r3, r2
 8006420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006424:	67bb      	str	r3, [r7, #120]	; 0x78
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642a:	2b3e      	cmp	r3, #62	; 0x3e
 800642c:	d91c      	bls.n	8006468 <USB_EPStartXfer+0xbc2>
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <USB_EPStartXfer+0xba8>
 8006444:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006448:	3b01      	subs	r3, #1
 800644a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800644e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006452:	b29b      	uxth	r3, r3
 8006454:	029b      	lsls	r3, r3, #10
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006460:	b29a      	uxth	r2, r3
 8006462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e05f      	b.n	8006528 <USB_EPStartXfer+0xc82>
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	2b00      	cmp	r3, #0
 800646e:	d112      	bne.n	8006496 <USB_EPStartXfer+0xbf0>
 8006470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800647a:	b29a      	uxth	r2, r3
 800647c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648e:	b29a      	uxth	r2, r3
 8006490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	e048      	b.n	8006528 <USB_EPStartXfer+0xc82>
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <USB_EPStartXfer+0xc10>
 80064ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	b29a      	uxth	r2, r3
 80064c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	e030      	b.n	8006528 <USB_EPStartXfer+0xc82>
 80064c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d128      	bne.n	8006528 <USB_EPStartXfer+0xc82>
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064fa:	4413      	add	r3, r2
 80064fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	00da      	lsls	r2, r3, #3
 800650e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006512:	4413      	add	r3, r2
 8006514:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	b29a      	uxth	r2, r3
 8006522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006526:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	891b      	ldrh	r3, [r3, #8]
 8006534:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6959      	ldr	r1, [r3, #20]
 8006544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006548:	b29b      	uxth	r3, r3
 800654a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800654e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006552:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	f000 fe15 	bl	8007186 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800655c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006582:	817b      	strh	r3, [r7, #10]
 8006584:	897b      	ldrh	r3, [r7, #10]
 8006586:	f083 0310 	eor.w	r3, r3, #16
 800658a:	817b      	strh	r3, [r7, #10]
 800658c:	897b      	ldrh	r3, [r7, #10]
 800658e:	f083 0320 	eor.w	r3, r3, #32
 8006592:	817b      	strh	r3, [r7, #10]
 8006594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	897b      	ldrh	r3, [r7, #10]
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
 80065c4:	f000 bc9f 	b.w	8006f06 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	7b1b      	ldrb	r3, [r3, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 80ae 	bne.w	8006736 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d917      	bls.n	8006626 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	619a      	str	r2, [r3, #24]
 8006624:	e00e      	b.n	8006644 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006660:	b29b      	uxth	r3, r3
 8006662:	461a      	mov	r2, r3
 8006664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006668:	4413      	add	r3, r2
 800666a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	00da      	lsls	r2, r3, #3
 800667c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006680:	4413      	add	r3, r2
 8006682:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	2b3e      	cmp	r3, #62	; 0x3e
 8006690:	d91d      	bls.n	80066ce <USB_EPStartXfer+0xe28>
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <USB_EPStartXfer+0xe0c>
 80066a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066ac:	3b01      	subs	r3, #1
 80066ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	029b      	lsls	r3, r3, #10
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e3e1      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
 80066ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d116      	bne.n	8006704 <USB_EPStartXfer+0xe5e>
 80066d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e3c6      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	085b      	lsrs	r3, r3, #1
 800670a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <USB_EPStartXfer+0xe7e>
 800671a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800671e:	3301      	adds	r3, #1
 8006720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006728:	b29b      	uxth	r3, r3
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	b29a      	uxth	r2, r3
 800672e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	e3ad      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	78db      	ldrb	r3, [r3, #3]
 8006742:	2b02      	cmp	r3, #2
 8006744:	f040 8200 	bne.w	8006b48 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 8091 	bne.w	800687c <USB_EPStartXfer+0xfd6>
 800675a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800677e:	4413      	add	r3, r2
 8006780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	00da      	lsls	r2, r3, #3
 8006792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006796:	4413      	add	r3, r2
 8006798:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800679c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b3e      	cmp	r3, #62	; 0x3e
 80067ae:	d925      	bls.n	80067fc <USB_EPStartXfer+0xf56>
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0xf3a>
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e074      	b.n	80068e6 <USB_EPStartXfer+0x1040>
 80067fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d116      	bne.n	800683a <USB_EPStartXfer+0xf94>
 800680c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e055      	b.n	80068e6 <USB_EPStartXfer+0x1040>
 800683a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	085b      	lsrs	r3, r3, #1
 8006848:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <USB_EPStartXfer+0xfc4>
 8006860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006864:	3301      	adds	r3, #1
 8006866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686e:	b29b      	uxth	r3, r3
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	e034      	b.n	80068e6 <USB_EPStartXfer+0x1040>
 800687c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d12c      	bne.n	80068e6 <USB_EPStartXfer+0x1040>
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800689a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	461a      	mov	r2, r3
 80068ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068b0:	4413      	add	r3, r2
 80068b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	00da      	lsls	r2, r3, #3
 80068c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 8091 	bne.w	8006a28 <USB_EPStartXfer+0x1182>
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800692a:	4413      	add	r3, r2
 800692c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	00da      	lsls	r2, r3, #3
 800693e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006942:	4413      	add	r3, r2
 8006944:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b3e      	cmp	r3, #62	; 0x3e
 800695a:	d925      	bls.n	80069a8 <USB_EPStartXfer+0x1102>
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800696e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <USB_EPStartXfer+0x10e6>
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006986:	3b01      	subs	r3, #1
 8006988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800698c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006990:	b29b      	uxth	r3, r3
 8006992:	029b      	lsls	r3, r3, #10
 8006994:	b29b      	uxth	r3, r3
 8006996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	e06d      	b.n	8006a84 <USB_EPStartXfer+0x11de>
 80069a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d116      	bne.n	80069e6 <USB_EPStartXfer+0x1140>
 80069b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e04e      	b.n	8006a84 <USB_EPStartXfer+0x11de>
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <USB_EPStartXfer+0x1170>
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	e02d      	b.n	8006a84 <USB_EPStartXfer+0x11de>
 8006a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d125      	bne.n	8006a84 <USB_EPStartXfer+0x11de>
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	00da      	lsls	r2, r3, #3
 8006a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a82:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 81fe 	beq.w	8006e92 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ab6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d005      	beq.n	8006ace <USB_EPStartXfer+0x1228>
 8006ac2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10d      	bne.n	8006aea <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ace:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 81db 	bne.w	8006e92 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006adc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 81d4 	bne.w	8006e92 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	441a      	add	r2, r3
 8006b2e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8013      	strh	r3, [r2, #0]
 8006b46:	e1a4      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	78db      	ldrb	r3, [r3, #3]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	f040 819a 	bne.w	8006e8e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d917      	bls.n	8006ba6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	619a      	str	r2, [r3, #24]
 8006ba4:	e00e      	b.n	8006bc4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d178      	bne.n	8006cc6 <USB_EPStartXfer+0x1420>
 8006bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00da      	lsls	r2, r3, #3
 8006c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c20:	d91d      	bls.n	8006c5e <USB_EPStartXfer+0x13b8>
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <USB_EPStartXfer+0x139c>
 8006c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	029b      	lsls	r3, r3, #10
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	e064      	b.n	8006d28 <USB_EPStartXfer+0x1482>
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d116      	bne.n	8006c94 <USB_EPStartXfer+0x13ee>
 8006c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c78:	801a      	strh	r2, [r3, #0]
 8006c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	e049      	b.n	8006d28 <USB_EPStartXfer+0x1482>
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <USB_EPStartXfer+0x140e>
 8006caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cae:	3301      	adds	r3, #1
 8006cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	029b      	lsls	r3, r3, #10
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e030      	b.n	8006d28 <USB_EPStartXfer+0x1482>
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d128      	bne.n	8006d28 <USB_EPStartXfer+0x1482>
 8006cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	00da      	lsls	r2, r3, #3
 8006d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d12:	4413      	add	r3, r2
 8006d14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	785b      	ldrb	r3, [r3, #1]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d178      	bne.n	8006e38 <USB_EPStartXfer+0x1592>
 8006d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	00da      	lsls	r2, r3, #3
 8006d7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d82:	4413      	add	r3, r2
 8006d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	2b3e      	cmp	r3, #62	; 0x3e
 8006d92:	d91d      	bls.n	8006dd0 <USB_EPStartXfer+0x152a>
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <USB_EPStartXfer+0x150e>
 8006daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dae:	3b01      	subs	r3, #1
 8006db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	029b      	lsls	r3, r3, #10
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e060      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d116      	bne.n	8006e06 <USB_EPStartXfer+0x1560>
 8006dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e045      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0x1580>
 8006e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	029b      	lsls	r3, r3, #10
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e34:	801a      	strh	r2, [r3, #0]
 8006e36:	e02c      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
 8006e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d124      	bne.n	8006e92 <USB_EPStartXfer+0x15ec>
 8006e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e5e:	4413      	add	r3, r2
 8006e60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00da      	lsls	r2, r3, #3
 8006e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e76:	4413      	add	r3, r2
 8006e78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	e001      	b.n	8006e92 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e03a      	b.n	8006f08 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ebc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ec0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ec4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ec8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ecc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ed0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	441a      	add	r2, r3
 8006eee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d020      	beq.n	8006f66 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3a:	81bb      	strh	r3, [r7, #12]
 8006f3c:	89bb      	ldrh	r3, [r7, #12]
 8006f3e:	f083 0310 	eor.w	r3, r3, #16
 8006f42:	81bb      	strh	r3, [r7, #12]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	441a      	add	r2, r3
 8006f4e:	89bb      	ldrh	r3, [r7, #12]
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]
 8006f64:	e01f      	b.n	8006fa6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7c:	81fb      	strh	r3, [r7, #14]
 8006f7e:	89fb      	ldrh	r3, [r7, #14]
 8006f80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f84:	81fb      	strh	r3, [r7, #14]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	7b1b      	ldrb	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 809d 	bne.w	8007102 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d04c      	beq.n	800706a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	823b      	strh	r3, [r7, #16]
 8006fde:	8a3b      	ldrh	r3, [r7, #16]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01b      	beq.n	8007020 <USB_EPClearStall+0x6c>
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	81fb      	strh	r3, [r7, #14]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	441a      	add	r2, r3
 800700a:	89fb      	ldrh	r3, [r7, #14]
 800700c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007018:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800701c:	b29b      	uxth	r3, r3
 800701e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	78db      	ldrb	r3, [r3, #3]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d06c      	beq.n	8007102 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703e:	81bb      	strh	r3, [r7, #12]
 8007040:	89bb      	ldrh	r3, [r7, #12]
 8007042:	f083 0320 	eor.w	r3, r3, #32
 8007046:	81bb      	strh	r3, [r7, #12]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	441a      	add	r2, r3
 8007052:	89bb      	ldrh	r3, [r7, #12]
 8007054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800705c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007064:	b29b      	uxth	r3, r3
 8007066:	8013      	strh	r3, [r2, #0]
 8007068:	e04b      	b.n	8007102 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	82fb      	strh	r3, [r7, #22]
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01b      	beq.n	80070ba <USB_EPClearStall+0x106>
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	881b      	ldrh	r3, [r3, #0]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007098:	82bb      	strh	r3, [r7, #20]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	441a      	add	r2, r3
 80070a4:	8abb      	ldrh	r3, [r7, #20]
 80070a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d0:	827b      	strh	r3, [r7, #18]
 80070d2:	8a7b      	ldrh	r3, [r7, #18]
 80070d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070d8:	827b      	strh	r3, [r7, #18]
 80070da:	8a7b      	ldrh	r3, [r7, #18]
 80070dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070e0:	827b      	strh	r3, [r7, #18]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	441a      	add	r2, r3
 80070ec:	8a7b      	ldrh	r3, [r7, #18]
 80070ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070fe:	b29b      	uxth	r3, r3
 8007100:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2280      	movs	r2, #128	; 0x80
 8007126:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007146:	b29b      	uxth	r3, r3
 8007148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007174:	b29b      	uxth	r3, r3
 8007176:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007178:	68fb      	ldr	r3, [r7, #12]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007186:	b480      	push	{r7}
 8007188:	b08d      	sub	sp, #52	; 0x34
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	4611      	mov	r1, r2
 8007192:	461a      	mov	r2, r3
 8007194:	460b      	mov	r3, r1
 8007196:	80fb      	strh	r3, [r7, #6]
 8007198:	4613      	mov	r3, r2
 800719a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800719c:	88bb      	ldrh	r3, [r7, #4]
 800719e:	3301      	adds	r3, #1
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80071ac:	88fa      	ldrh	r2, [r7, #6]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071bc:	e01b      	b.n	80071f6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	3301      	adds	r3, #1
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	3302      	adds	r3, #2
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	3301      	adds	r3, #1
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	3b01      	subs	r3, #1
 80071f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e0      	bne.n	80071be <USB_WritePMA+0x38>
  }
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	3734      	adds	r7, #52	; 0x34
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800720a:	b480      	push	{r7}
 800720c:	b08b      	sub	sp, #44	; 0x2c
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	4611      	mov	r1, r2
 8007216:	461a      	mov	r2, r3
 8007218:	460b      	mov	r3, r1
 800721a:	80fb      	strh	r3, [r7, #6]
 800721c:	4613      	mov	r3, r2
 800721e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007220:	88bb      	ldrh	r3, [r7, #4]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007230:	88fa      	ldrh	r2, [r7, #6]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800723a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
 8007240:	e018      	b.n	8007274 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	3302      	adds	r3, #2
 800724e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	b2da      	uxtb	r2, r3
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	3301      	adds	r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	0a1b      	lsrs	r3, r3, #8
 8007262:	b2da      	uxtb	r2, r3
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	3301      	adds	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	3b01      	subs	r3, #1
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e3      	bne.n	8007242 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800727a:	88bb      	ldrh	r3, [r7, #4]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	701a      	strb	r2, [r3, #0]
  }
}
 8007296:	bf00      	nop
 8007298:	372c      	adds	r7, #44	; 0x2c
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072ae:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072b2:	f002 f8a7 	bl	8009404 <USBD_static_malloc>
 80072b6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80072c6:	2302      	movs	r3, #2
 80072c8:	e066      	b.n	8007398 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	7c1b      	ldrb	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d119      	bne.n	800730e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072de:	2202      	movs	r2, #2
 80072e0:	2181      	movs	r1, #129	; 0x81
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 ff33 	bl	800914e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80072ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f2:	2202      	movs	r2, #2
 80072f4:	2101      	movs	r1, #1
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f001 ff29 	bl	800914e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2210      	movs	r2, #16
 8007308:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800730c:	e016      	b.n	800733c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	2202      	movs	r2, #2
 8007312:	2181      	movs	r1, #129	; 0x81
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 ff1a 	bl	800914e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	2202      	movs	r2, #2
 8007324:	2101      	movs	r1, #1
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 ff11 	bl	800914e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2210      	movs	r2, #16
 8007338:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800733c:	2308      	movs	r3, #8
 800733e:	2203      	movs	r2, #3
 8007340:	2182      	movs	r1, #130	; 0x82
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 ff03 	bl	800914e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7c1b      	ldrb	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d109      	bne.n	8007386 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800737c:	2101      	movs	r1, #1
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 ffd5 	bl	800932e <USBD_LL_PrepareReceive>
 8007384:	e007      	b.n	8007396 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	2101      	movs	r1, #1
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 ffcc 	bl	800932e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073ac:	2181      	movs	r1, #129	; 0x81
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 fef3 	bl	800919a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073ba:	2101      	movs	r1, #1
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 feec 	bl	800919a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073ca:	2182      	movs	r1, #130	; 0x82
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fee4 	bl	800919a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00e      	beq.n	800740a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fc:	4618      	mov	r0, r3
 80073fe:	f002 f80f 	bl	8009420 <USBD_static_free>
    pdev->pClassData = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007424:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007438:	2303      	movs	r3, #3
 800743a:	e0af      	b.n	800759c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007444:	2b00      	cmp	r3, #0
 8007446:	d03f      	beq.n	80074c8 <USBD_CDC_Setup+0xb4>
 8007448:	2b20      	cmp	r3, #32
 800744a:	f040 809f 	bne.w	800758c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	88db      	ldrh	r3, [r3, #6]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02e      	beq.n	80074b4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b25b      	sxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	da16      	bge.n	800748e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800746c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	88d2      	ldrh	r2, [r2, #6]
 8007472:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	88db      	ldrh	r3, [r3, #6]
 8007478:	2b07      	cmp	r3, #7
 800747a:	bf28      	it	cs
 800747c:	2307      	movcs	r3, #7
 800747e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	89fa      	ldrh	r2, [r7, #14]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fa9f 	bl	80089ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800748c:	e085      	b.n	800759a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	785a      	ldrb	r2, [r3, #1]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80074a4:	6939      	ldr	r1, [r7, #16]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88db      	ldrh	r3, [r3, #6]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fab8 	bl	8008a22 <USBD_CtlPrepareRx>
      break;
 80074b2:	e072      	b.n	800759a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	7850      	ldrb	r0, [r2, #1]
 80074c0:	2200      	movs	r2, #0
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	4798      	blx	r3
      break;
 80074c6:	e068      	b.n	800759a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	785b      	ldrb	r3, [r3, #1]
 80074cc:	2b0b      	cmp	r3, #11
 80074ce:	d852      	bhi.n	8007576 <USBD_CDC_Setup+0x162>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <USBD_CDC_Setup+0xc4>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	08007509 	.word	0x08007509
 80074dc:	08007585 	.word	0x08007585
 80074e0:	08007577 	.word	0x08007577
 80074e4:	08007577 	.word	0x08007577
 80074e8:	08007577 	.word	0x08007577
 80074ec:	08007577 	.word	0x08007577
 80074f0:	08007577 	.word	0x08007577
 80074f4:	08007577 	.word	0x08007577
 80074f8:	08007577 	.word	0x08007577
 80074fc:	08007577 	.word	0x08007577
 8007500:	08007533 	.word	0x08007533
 8007504:	0800755d 	.word	0x0800755d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b03      	cmp	r3, #3
 8007512:	d107      	bne.n	8007524 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007514:	f107 030a 	add.w	r3, r7, #10
 8007518:	2202      	movs	r2, #2
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fa54 	bl	80089ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007522:	e032      	b.n	800758a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 f9de 	bl	80088e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	75fb      	strb	r3, [r7, #23]
          break;
 8007530:	e02b      	b.n	800758a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b03      	cmp	r3, #3
 800753c:	d107      	bne.n	800754e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800753e:	f107 030d 	add.w	r3, r7, #13
 8007542:	2201      	movs	r2, #1
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 fa3f 	bl	80089ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800754c:	e01d      	b.n	800758a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 f9c9 	bl	80088e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007556:	2303      	movs	r3, #3
 8007558:	75fb      	strb	r3, [r7, #23]
          break;
 800755a:	e016      	b.n	800758a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b03      	cmp	r3, #3
 8007566:	d00f      	beq.n	8007588 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f9bc 	bl	80088e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007574:	e008      	b.n	8007588 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 f9b5 	bl	80088e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	75fb      	strb	r3, [r7, #23]
          break;
 8007582:	e002      	b.n	800758a <USBD_CDC_Setup+0x176>
          break;
 8007584:	bf00      	nop
 8007586:	e008      	b.n	800759a <USBD_CDC_Setup+0x186>
          break;
 8007588:	bf00      	nop
      }
      break;
 800758a:	e006      	b.n	800759a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 f9aa 	bl	80088e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	75fb      	strb	r3, [r7, #23]
      break;
 8007598:	bf00      	nop
  }

  return (uint8_t)ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e04f      	b.n	8007666 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	3318      	adds	r3, #24
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d029      	beq.n	8007638 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	3318      	adds	r3, #24
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	78f9      	ldrb	r1, [r7, #3]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	460b      	mov	r3, r1
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4403      	add	r3, r0
 8007604:	3338      	adds	r3, #56	; 0x38
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	fbb2 f1f3 	udiv	r1, r2, r3
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007612:	2b00      	cmp	r3, #0
 8007614:	d110      	bne.n	8007638 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	440b      	add	r3, r1
 8007624:	3318      	adds	r3, #24
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800762a:	78f9      	ldrb	r1, [r7, #3]
 800762c:	2300      	movs	r3, #0
 800762e:	2200      	movs	r2, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fe5b 	bl	80092ec <USBD_LL_Transmit>
 8007636:	e015      	b.n	8007664 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007680:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e015      	b.n	80076bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fe6b 	bl	8009370 <USBD_LL_GetRxDataSize>
 800769a:	4602      	mov	r2, r0
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076b6:	4611      	mov	r1, r2
 80076b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	e01b      	b.n	8007716 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d015      	beq.n	8007714 <USBD_CDC_EP0_RxReady+0x50>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076ee:	2bff      	cmp	r3, #255	; 0xff
 80076f0:	d010      	beq.n	8007714 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007700:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007708:	b292      	uxth	r2, r2
 800770a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	22ff      	movs	r2, #255	; 0xff
 8007710:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2243      	movs	r2, #67	; 0x43
 800772c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800772e:	4b03      	ldr	r3, [pc, #12]	; (800773c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	20000094 	.word	0x20000094

08007740 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2243      	movs	r2, #67	; 0x43
 800774c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	20000050 	.word	0x20000050

08007760 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2243      	movs	r2, #67	; 0x43
 800776c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	200000d8 	.word	0x200000d8

08007780 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	220a      	movs	r2, #10
 800778c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800778e:	4b03      	ldr	r3, [pc, #12]	; (800779c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	2000000c 	.word	0x2000000c

080077a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e004      	b.n	80077be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077dc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e008      	b.n	80077fa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007816:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800781e:	2303      	movs	r3, #3
 8007820:	e004      	b.n	800782c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007846:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007852:	2303      	movs	r3, #3
 8007854:	e016      	b.n	8007884 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7c1b      	ldrb	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007868:	2101      	movs	r1, #1
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fd5f 	bl	800932e <USBD_LL_PrepareReceive>
 8007870:	e007      	b.n	8007882 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007878:	2340      	movs	r3, #64	; 0x40
 800787a:	2101      	movs	r1, #1
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fd56 	bl	800932e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e01f      	b.n	80078e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	79fa      	ldrb	r2, [r7, #7]
 80078d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f001 fbbd 	bl	8009058 <USBD_LL_Init>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007900:	2303      	movs	r3, #3
 8007902:	e016      	b.n	8007932 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	f107 020e 	add.w	r2, r7, #14
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	4602      	mov	r2, r0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fbe8 	bl	8009118 <USBD_LL_Start>
 8007948:	4603      	mov	r3, r0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	4611      	mov	r1, r2
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
 8007992:	4603      	mov	r3, r0
 8007994:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	4611      	mov	r1, r2
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
  }

  return USBD_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 ff46 	bl	8008874 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d01a      	beq.n	8007a42 <USBD_LL_SetupStage+0x72>
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d822      	bhi.n	8007a56 <USBD_LL_SetupStage+0x86>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <USBD_LL_SetupStage+0x4a>
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d00a      	beq.n	8007a2e <USBD_LL_SetupStage+0x5e>
 8007a18:	e01d      	b.n	8007a56 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f9ee 	bl	8007e04 <USBD_StdDevReq>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2c:	e020      	b.n	8007a70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa52 	bl	8007ee0 <USBD_StdItfReq>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e016      	b.n	8007a70 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa91 	bl	8007f72 <USBD_StdEPReq>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
      break;
 8007a54:	e00c      	b.n	8007a70 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fbb7 	bl	80091d8 <USBD_LL_StallEP>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6e:	bf00      	nop
  }

  return ret;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	460b      	mov	r3, r1
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d138      	bne.n	8007b00 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d14a      	bne.n	8007b36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d913      	bls.n	8007ad4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	1ad2      	subs	r2, r2, r3
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	bf28      	it	cs
 8007ac6:	4613      	movcs	r3, r2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 ffc5 	bl	8008a5c <USBD_CtlContinueRx>
 8007ad2:	e030      	b.n	8007b36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	d10b      	bne.n	8007af8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 ffc0 	bl	8008a7e <USBD_CtlSendStatus>
 8007afe:	e01a      	b.n	8007b36 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d114      	bne.n	8007b36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	7afa      	ldrb	r2, [r7, #11]
 8007b22:	4611      	mov	r1, r2
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	4798      	blx	r3
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	e000      	b.n	8007b38 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d16b      	bne.n	8007c2c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3314      	adds	r3, #20
 8007b58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d156      	bne.n	8007c12 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d914      	bls.n	8007b9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	1ad2      	subs	r2, r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 ff3a 	bl	8008a00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fbcb 	bl	800932e <USBD_LL_PrepareReceive>
 8007b98:	e03b      	b.n	8007c12 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d11c      	bne.n	8007be0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d316      	bcc.n	8007be0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d20f      	bcs.n	8007be0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 ff1b 	bl	8008a00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f001 fba8 	bl	800932e <USBD_LL_PrepareReceive>
 8007bde:	e018      	b.n	8007c12 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d10b      	bne.n	8007c04 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c04:	2180      	movs	r1, #128	; 0x80
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 fae6 	bl	80091d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 ff49 	bl	8008aa4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d122      	bne.n	8007c62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff fe98 	bl	8007952 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c2a:	e01a      	b.n	8007c62 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d114      	bne.n	8007c62 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00e      	beq.n	8007c62 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	7afa      	ldrb	r2, [r7, #11]
 8007c4e:	4611      	mov	r1, r2
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	4798      	blx	r3
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	e000      	b.n	8007c64 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e02f      	b.n	8007d00 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00f      	beq.n	8007cca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6852      	ldr	r2, [r2, #4]
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cca:	2340      	movs	r3, #64	; 0x40
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 fa3c 	bl	800914e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2240      	movs	r2, #64	; 0x40
 8007ce2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fa2e 	bl	800914e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2240      	movs	r2, #64	; 0x40
 8007cfc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2204      	movs	r2, #4
 8007d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d106      	bne.n	8007d76 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e012      	b.n	8007dc0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d10b      	bne.n	8007dbe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007de6:	8a3b      	ldrh	r3, [r7, #16]
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	b21a      	sxth	r2, r3
 8007dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b21b      	sxth	r3, r3
 8007df4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007df6:	89fb      	ldrh	r3, [r7, #14]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d005      	beq.n	8007e2a <USBD_StdDevReq+0x26>
 8007e1e:	2b40      	cmp	r3, #64	; 0x40
 8007e20:	d853      	bhi.n	8007eca <USBD_StdDevReq+0xc6>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <USBD_StdDevReq+0x3a>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d14f      	bne.n	8007eca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e04a      	b.n	8007ed4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d83b      	bhi.n	8007ebe <USBD_StdDevReq+0xba>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBD_StdDevReq+0x48>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007eb5 	.word	0x08007eb5
 8007e54:	08007ebf 	.word	0x08007ebf
 8007e58:	08007eab 	.word	0x08007eab
 8007e5c:	08007ebf 	.word	0x08007ebf
 8007e60:	08007e7f 	.word	0x08007e7f
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007ebf 	.word	0x08007ebf
 8007e6c:	08007e97 	.word	0x08007e97
 8007e70:	08007e89 	.word	0x08007e89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9de 	bl	8008238 <USBD_GetDescriptor>
          break;
 8007e7c:	e024      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb6d 	bl	8008560 <USBD_SetAddress>
          break;
 8007e86:	e01f      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fbac 	bl	80085e8 <USBD_SetConfig>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
          break;
 8007e94:	e018      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc4b 	bl	8008734 <USBD_GetConfig>
          break;
 8007e9e:	e013      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fc7c 	bl	80087a0 <USBD_GetStatus>
          break;
 8007ea8:	e00e      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fcab 	bl	8008808 <USBD_SetFeature>
          break;
 8007eb2:	e009      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fcba 	bl	8008830 <USBD_ClrFeature>
          break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fd11 	bl	80088e8 <USBD_CtlError>
          break;
 8007ec6:	bf00      	nop
      }
      break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fd0b 	bl	80088e8 <USBD_CtlError>
      break;
 8007ed2:	bf00      	nop
  }

  return ret;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ef6:	2b40      	cmp	r3, #64	; 0x40
 8007ef8:	d005      	beq.n	8007f06 <USBD_StdItfReq+0x26>
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d82f      	bhi.n	8007f5e <USBD_StdItfReq+0x7e>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <USBD_StdItfReq+0x26>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d12b      	bne.n	8007f5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d81d      	bhi.n	8007f50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	889b      	ldrh	r3, [r3, #4]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d813      	bhi.n	8007f46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	88db      	ldrh	r3, [r3, #6]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d110      	bne.n	8007f5a <USBD_StdItfReq+0x7a>
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10d      	bne.n	8007f5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fd9d 	bl	8008a7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f44:	e009      	b.n	8007f5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fccd 	bl	80088e8 <USBD_CtlError>
          break;
 8007f4e:	e004      	b.n	8007f5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fcc8 	bl	80088e8 <USBD_CtlError>
          break;
 8007f58:	e000      	b.n	8007f5c <USBD_StdItfReq+0x7c>
          break;
 8007f5a:	bf00      	nop
      }
      break;
 8007f5c:	e004      	b.n	8007f68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fcc1 	bl	80088e8 <USBD_CtlError>
      break;
 8007f66:	bf00      	nop
  }

  return ret;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	889b      	ldrh	r3, [r3, #4]
 8007f84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d007      	beq.n	8007fa2 <USBD_StdEPReq+0x30>
 8007f92:	2b40      	cmp	r3, #64	; 0x40
 8007f94:	f200 8145 	bhi.w	8008222 <USBD_StdEPReq+0x2b0>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00c      	beq.n	8007fb6 <USBD_StdEPReq+0x44>
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	f040 8140 	bne.w	8008222 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb4:	e13a      	b.n	800822c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d007      	beq.n	8007fce <USBD_StdEPReq+0x5c>
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	f300 8129 	bgt.w	8008216 <USBD_StdEPReq+0x2a4>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d07f      	beq.n	80080c8 <USBD_StdEPReq+0x156>
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d03c      	beq.n	8008046 <USBD_StdEPReq+0xd4>
 8007fcc:	e123      	b.n	8008216 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d002      	beq.n	8007fe0 <USBD_StdEPReq+0x6e>
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d016      	beq.n	800800c <USBD_StdEPReq+0x9a>
 8007fde:	e02c      	b.n	800803a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <USBD_StdEPReq+0x90>
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d00a      	beq.n	8008002 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f8f1 	bl	80091d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ff6:	2180      	movs	r1, #128	; 0x80
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f8ed 	bl	80091d8 <USBD_LL_StallEP>
 8007ffe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008000:	e020      	b.n	8008044 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fc6f 	bl	80088e8 <USBD_CtlError>
              break;
 800800a:	e01b      	b.n	8008044 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10e      	bne.n	8008032 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <USBD_StdEPReq+0xc0>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b80      	cmp	r3, #128	; 0x80
 800801e:	d008      	beq.n	8008032 <USBD_StdEPReq+0xc0>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	88db      	ldrh	r3, [r3, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f8d3 	bl	80091d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fd23 	bl	8008a7e <USBD_CtlSendStatus>

              break;
 8008038:	e004      	b.n	8008044 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fc53 	bl	80088e8 <USBD_CtlError>
              break;
 8008042:	bf00      	nop
          }
          break;
 8008044:	e0ec      	b.n	8008220 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d002      	beq.n	8008058 <USBD_StdEPReq+0xe6>
 8008052:	2b03      	cmp	r3, #3
 8008054:	d016      	beq.n	8008084 <USBD_StdEPReq+0x112>
 8008056:	e030      	b.n	80080ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00d      	beq.n	800807a <USBD_StdEPReq+0x108>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d00a      	beq.n	800807a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f8b5 	bl	80091d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f8b1 	bl	80091d8 <USBD_LL_StallEP>
 8008076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008078:	e025      	b.n	80080c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc33 	bl	80088e8 <USBD_CtlError>
              break;
 8008082:	e020      	b.n	80080c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11b      	bne.n	80080c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 f8bb 	bl	8009216 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fcec 	bl	8008a7e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80080b8:	e004      	b.n	80080c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc13 	bl	80088e8 <USBD_CtlError>
              break;
 80080c2:	e000      	b.n	80080c6 <USBD_StdEPReq+0x154>
              break;
 80080c4:	bf00      	nop
          }
          break;
 80080c6:	e0ab      	b.n	8008220 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d002      	beq.n	80080da <USBD_StdEPReq+0x168>
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d032      	beq.n	800813e <USBD_StdEPReq+0x1cc>
 80080d8:	e097      	b.n	800820a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <USBD_StdEPReq+0x17e>
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d004      	beq.n	80080f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fbfd 	bl	80088e8 <USBD_CtlError>
                break;
 80080ee:	e091      	b.n	8008214 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	da0b      	bge.n	8008110 <USBD_StdEPReq+0x19e>
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	3310      	adds	r3, #16
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	3304      	adds	r3, #4
 800810e:	e00b      	b.n	8008128 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	3304      	adds	r3, #4
 8008128:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2202      	movs	r2, #2
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fc47 	bl	80089ca <USBD_CtlSendData>
              break;
 800813c:	e06a      	b.n	8008214 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800813e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008142:	2b00      	cmp	r3, #0
 8008144:	da11      	bge.n	800816a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	3324      	adds	r3, #36	; 0x24
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d117      	bne.n	8008190 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fbc0 	bl	80088e8 <USBD_CtlError>
                  break;
 8008168:	e054      	b.n	8008214 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	f003 020f 	and.w	r2, r3, #15
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fbad 	bl	80088e8 <USBD_CtlError>
                  break;
 800818e:	e041      	b.n	8008214 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da0b      	bge.n	80081b0 <USBD_StdEPReq+0x23e>
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	3310      	adds	r3, #16
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	4413      	add	r3, r2
 80081ac:	3304      	adds	r3, #4
 80081ae:	e00b      	b.n	80081c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	3304      	adds	r3, #4
 80081c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <USBD_StdEPReq+0x264>
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d103      	bne.n	80081de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e00e      	b.n	80081fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 f836 	bl	8009254 <USBD_LL_IsStallEP>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2201      	movs	r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e002      	b.n	80081fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2202      	movs	r2, #2
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fbe1 	bl	80089ca <USBD_CtlSendData>
              break;
 8008208:	e004      	b.n	8008214 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fb6b 	bl	80088e8 <USBD_CtlError>
              break;
 8008212:	bf00      	nop
          }
          break;
 8008214:	e004      	b.n	8008220 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb65 	bl	80088e8 <USBD_CtlError>
          break;
 800821e:	bf00      	nop
      }
      break;
 8008220:	e004      	b.n	800822c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fb5f 	bl	80088e8 <USBD_CtlError>
      break;
 800822a:	bf00      	nop
  }

  return ret;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	2b0e      	cmp	r3, #14
 800825a:	f200 8152 	bhi.w	8008502 <USBD_GetDescriptor+0x2ca>
 800825e:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <USBD_GetDescriptor+0x2c>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	080082d5 	.word	0x080082d5
 8008268:	080082ed 	.word	0x080082ed
 800826c:	0800832d 	.word	0x0800832d
 8008270:	08008503 	.word	0x08008503
 8008274:	08008503 	.word	0x08008503
 8008278:	080084a3 	.word	0x080084a3
 800827c:	080084cf 	.word	0x080084cf
 8008280:	08008503 	.word	0x08008503
 8008284:	08008503 	.word	0x08008503
 8008288:	08008503 	.word	0x08008503
 800828c:	08008503 	.word	0x08008503
 8008290:	08008503 	.word	0x08008503
 8008294:	08008503 	.word	0x08008503
 8008298:	08008503 	.word	0x08008503
 800829c:	080082a1 	.word	0x080082a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	7c12      	ldrb	r2, [r2, #16]
 80082b8:	f107 0108 	add.w	r1, r7, #8
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082c2:	e126      	b.n	8008512 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fb0e 	bl	80088e8 <USBD_CtlError>
        err++;
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	3301      	adds	r3, #1
 80082d0:	72fb      	strb	r3, [r7, #11]
      break;
 80082d2:	e11e      	b.n	8008512 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	7c12      	ldrb	r2, [r2, #16]
 80082e0:	f107 0108 	add.w	r1, r7, #8
 80082e4:	4610      	mov	r0, r2
 80082e6:	4798      	blx	r3
 80082e8:	60f8      	str	r0, [r7, #12]
      break;
 80082ea:	e112      	b.n	8008512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7c1b      	ldrb	r3, [r3, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10d      	bne.n	8008310 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f107 0208 	add.w	r2, r7, #8
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	2202      	movs	r2, #2
 800830c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800830e:	e100      	b.n	8008512 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	f107 0208 	add.w	r2, r7, #8
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3301      	adds	r3, #1
 8008326:	2202      	movs	r2, #2
 8008328:	701a      	strb	r2, [r3, #0]
      break;
 800832a:	e0f2      	b.n	8008512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	885b      	ldrh	r3, [r3, #2]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b05      	cmp	r3, #5
 8008334:	f200 80ac 	bhi.w	8008490 <USBD_GetDescriptor+0x258>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <USBD_GetDescriptor+0x108>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008359 	.word	0x08008359
 8008344:	0800838d 	.word	0x0800838d
 8008348:	080083c1 	.word	0x080083c1
 800834c:	080083f5 	.word	0x080083f5
 8008350:	08008429 	.word	0x08008429
 8008354:	0800845d 	.word	0x0800845d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7c12      	ldrb	r2, [r2, #16]
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837a:	e091      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fab2 	bl	80088e8 <USBD_CtlError>
            err++;
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	3301      	adds	r3, #1
 8008388:	72fb      	strb	r3, [r7, #11]
          break;
 800838a:	e089      	b.n	80084a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	7c12      	ldrb	r2, [r2, #16]
 80083a4:	f107 0108 	add.w	r1, r7, #8
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ae:	e077      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa98 	bl	80088e8 <USBD_CtlError>
            err++;
 80083b8:	7afb      	ldrb	r3, [r7, #11]
 80083ba:	3301      	adds	r3, #1
 80083bc:	72fb      	strb	r3, [r7, #11]
          break;
 80083be:	e06f      	b.n	80084a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7c12      	ldrb	r2, [r2, #16]
 80083d8:	f107 0108 	add.w	r1, r7, #8
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
 80083e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083e2:	e05d      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa7e 	bl	80088e8 <USBD_CtlError>
            err++;
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	3301      	adds	r3, #1
 80083f0:	72fb      	strb	r3, [r7, #11]
          break;
 80083f2:	e055      	b.n	80084a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	7c12      	ldrb	r2, [r2, #16]
 800840c:	f107 0108 	add.w	r1, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008416:	e043      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa64 	bl	80088e8 <USBD_CtlError>
            err++;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	3301      	adds	r3, #1
 8008424:	72fb      	strb	r3, [r7, #11]
          break;
 8008426:	e03b      	b.n	80084a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	7c12      	ldrb	r2, [r2, #16]
 8008440:	f107 0108 	add.w	r1, r7, #8
 8008444:	4610      	mov	r0, r2
 8008446:	4798      	blx	r3
 8008448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800844a:	e029      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa4a 	bl	80088e8 <USBD_CtlError>
            err++;
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	3301      	adds	r3, #1
 8008458:	72fb      	strb	r3, [r7, #11]
          break;
 800845a:	e021      	b.n	80084a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00b      	beq.n	8008480 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	7c12      	ldrb	r2, [r2, #16]
 8008474:	f107 0108 	add.w	r1, r7, #8
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800847e:	e00f      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fa30 	bl	80088e8 <USBD_CtlError>
            err++;
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	3301      	adds	r3, #1
 800848c:	72fb      	strb	r3, [r7, #11]
          break;
 800848e:	e007      	b.n	80084a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fa28 	bl	80088e8 <USBD_CtlError>
          err++;
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	3301      	adds	r3, #1
 800849c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800849e:	bf00      	nop
      }
      break;
 80084a0:	e037      	b.n	8008512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	7c1b      	ldrb	r3, [r3, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	f107 0208 	add.w	r2, r7, #8
 80084b6:	4610      	mov	r0, r2
 80084b8:	4798      	blx	r3
 80084ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084bc:	e029      	b.n	8008512 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fa11 	bl	80088e8 <USBD_CtlError>
        err++;
 80084c6:	7afb      	ldrb	r3, [r7, #11]
 80084c8:	3301      	adds	r3, #1
 80084ca:	72fb      	strb	r3, [r7, #11]
      break;
 80084cc:	e021      	b.n	8008512 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7c1b      	ldrb	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10d      	bne.n	80084f2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	f107 0208 	add.w	r2, r7, #8
 80084e2:	4610      	mov	r0, r2
 80084e4:	4798      	blx	r3
 80084e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3301      	adds	r3, #1
 80084ec:	2207      	movs	r2, #7
 80084ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084f0:	e00f      	b.n	8008512 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f9f7 	bl	80088e8 <USBD_CtlError>
        err++;
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	3301      	adds	r3, #1
 80084fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008500:	e007      	b.n	8008512 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f9ef 	bl	80088e8 <USBD_CtlError>
      err++;
 800850a:	7afb      	ldrb	r3, [r7, #11]
 800850c:	3301      	adds	r3, #1
 800850e:	72fb      	strb	r3, [r7, #11]
      break;
 8008510:	bf00      	nop
  }

  if (err != 0U)
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11e      	bne.n	8008556 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	88db      	ldrh	r3, [r3, #6]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d016      	beq.n	800854e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008520:	893b      	ldrh	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00e      	beq.n	8008544 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	88da      	ldrh	r2, [r3, #6]
 800852a:	893b      	ldrh	r3, [r7, #8]
 800852c:	4293      	cmp	r3, r2
 800852e:	bf28      	it	cs
 8008530:	4613      	movcs	r3, r2
 8008532:	b29b      	uxth	r3, r3
 8008534:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008536:	893b      	ldrh	r3, [r7, #8]
 8008538:	461a      	mov	r2, r3
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fa44 	bl	80089ca <USBD_CtlSendData>
 8008542:	e009      	b.n	8008558 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f9ce 	bl	80088e8 <USBD_CtlError>
 800854c:	e004      	b.n	8008558 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa95 	bl	8008a7e <USBD_CtlSendStatus>
 8008554:	e000      	b.n	8008558 <USBD_GetDescriptor+0x320>
    return;
 8008556:	bf00      	nop
  }
}
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop

08008560 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	889b      	ldrh	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d131      	bne.n	80085d6 <USBD_SetAddress+0x76>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	88db      	ldrh	r3, [r3, #6]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d12d      	bne.n	80085d6 <USBD_SetAddress+0x76>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	885b      	ldrh	r3, [r3, #2]
 800857e:	2b7f      	cmp	r3, #127	; 0x7f
 8008580:	d829      	bhi.n	80085d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b03      	cmp	r3, #3
 8008598:	d104      	bne.n	80085a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9a3 	bl	80088e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a2:	e01d      	b.n	80085e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7bfa      	ldrb	r2, [r7, #15]
 80085a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fe7c 	bl	80092ae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fa61 	bl	8008a7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d004      	beq.n	80085cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ca:	e009      	b.n	80085e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d4:	e004      	b.n	80085e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f985 	bl	80088e8 <USBD_CtlError>
  }
}
 80085de:	bf00      	nop
 80085e0:	bf00      	nop
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	4b4c      	ldr	r3, [pc, #304]	; (8008730 <USBD_SetConfig+0x148>)
 80085fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008600:	4b4b      	ldr	r3, [pc, #300]	; (8008730 <USBD_SetConfig+0x148>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d905      	bls.n	8008614 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f96c 	bl	80088e8 <USBD_CtlError>
    return USBD_FAIL;
 8008610:	2303      	movs	r3, #3
 8008612:	e088      	b.n	8008726 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d002      	beq.n	8008626 <USBD_SetConfig+0x3e>
 8008620:	2b03      	cmp	r3, #3
 8008622:	d025      	beq.n	8008670 <USBD_SetConfig+0x88>
 8008624:	e071      	b.n	800870a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008626:	4b42      	ldr	r3, [pc, #264]	; (8008730 <USBD_SetConfig+0x148>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01c      	beq.n	8008668 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800862e:	4b40      	ldr	r3, [pc, #256]	; (8008730 <USBD_SetConfig+0x148>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008638:	4b3d      	ldr	r3, [pc, #244]	; (8008730 <USBD_SetConfig+0x148>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff f992 	bl	8007968 <USBD_SetClassConfig>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f949 	bl	80088e8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008656:	e065      	b.n	8008724 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fa10 	bl	8008a7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2203      	movs	r2, #3
 8008662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008666:	e05d      	b.n	8008724 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa08 	bl	8008a7e <USBD_CtlSendStatus>
      break;
 800866e:	e059      	b.n	8008724 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008670:	4b2f      	ldr	r3, [pc, #188]	; (8008730 <USBD_SetConfig+0x148>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d112      	bne.n	800869e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008680:	4b2b      	ldr	r3, [pc, #172]	; (8008730 <USBD_SetConfig+0x148>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800868a:	4b29      	ldr	r3, [pc, #164]	; (8008730 <USBD_SetConfig+0x148>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff f985 	bl	80079a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f9f1 	bl	8008a7e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800869c:	e042      	b.n	8008724 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800869e:	4b24      	ldr	r3, [pc, #144]	; (8008730 <USBD_SetConfig+0x148>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d02a      	beq.n	8008702 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff f973 	bl	80079a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086ba:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <USBD_SetConfig+0x148>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086c4:	4b1a      	ldr	r3, [pc, #104]	; (8008730 <USBD_SetConfig+0x148>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff f94c 	bl	8007968 <USBD_SetClassConfig>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00f      	beq.n	80086fa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f903 	bl	80088e8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff f958 	bl	80079a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086f8:	e014      	b.n	8008724 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f9bf 	bl	8008a7e <USBD_CtlSendStatus>
      break;
 8008700:	e010      	b.n	8008724 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f9bb 	bl	8008a7e <USBD_CtlSendStatus>
      break;
 8008708:	e00c      	b.n	8008724 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f8eb 	bl	80088e8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <USBD_SetConfig+0x148>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff f941 	bl	80079a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	73fb      	strb	r3, [r7, #15]
      break;
 8008722:	bf00      	nop
  }

  return ret;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000270 	.word	0x20000270

08008734 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	88db      	ldrh	r3, [r3, #6]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d004      	beq.n	8008750 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f8cd 	bl	80088e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800874e:	e023      	b.n	8008798 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	dc02      	bgt.n	8008762 <USBD_GetConfig+0x2e>
 800875c:	2b00      	cmp	r3, #0
 800875e:	dc03      	bgt.n	8008768 <USBD_GetConfig+0x34>
 8008760:	e015      	b.n	800878e <USBD_GetConfig+0x5a>
 8008762:	2b03      	cmp	r3, #3
 8008764:	d00b      	beq.n	800877e <USBD_GetConfig+0x4a>
 8008766:	e012      	b.n	800878e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3308      	adds	r3, #8
 8008772:	2201      	movs	r2, #1
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f927 	bl	80089ca <USBD_CtlSendData>
        break;
 800877c:	e00c      	b.n	8008798 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3304      	adds	r3, #4
 8008782:	2201      	movs	r2, #1
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f91f 	bl	80089ca <USBD_CtlSendData>
        break;
 800878c:	e004      	b.n	8008798 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f8a9 	bl	80088e8 <USBD_CtlError>
        break;
 8008796:	bf00      	nop
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d81e      	bhi.n	80087f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	88db      	ldrh	r3, [r3, #6]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d004      	beq.n	80087ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f890 	bl	80088e8 <USBD_CtlError>
        break;
 80087c8:	e01a      	b.n	8008800 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f043 0202 	orr.w	r2, r3, #2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	330c      	adds	r3, #12
 80087ea:	2202      	movs	r2, #2
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8eb 	bl	80089ca <USBD_CtlSendData>
      break;
 80087f4:	e004      	b.n	8008800 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f875 	bl	80088e8 <USBD_CtlError>
      break;
 80087fe:	bf00      	nop
  }
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d106      	bne.n	8008828 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f92b 	bl	8008a7e <USBD_CtlSendStatus>
  }
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008840:	b2db      	uxtb	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	2b02      	cmp	r3, #2
 8008846:	d80b      	bhi.n	8008860 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	885b      	ldrh	r3, [r3, #2]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10c      	bne.n	800886a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f910 	bl	8008a7e <USBD_CtlSendStatus>
      }
      break;
 800885e:	e004      	b.n	800886a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f840 	bl	80088e8 <USBD_CtlError>
      break;
 8008868:	e000      	b.n	800886c <USBD_ClrFeature+0x3c>
      break;
 800886a:	bf00      	nop
  }
}
 800886c:	bf00      	nop
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff fa92 	bl	8007dc8 <SWAPBYTE>
 80088a4:	4603      	mov	r3, r0
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fa85 	bl	8007dc8 <SWAPBYTE>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3301      	adds	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff fa78 	bl	8007dc8 <SWAPBYTE>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	80da      	strh	r2, [r3, #6]
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088f2:	2180      	movs	r1, #128	; 0x80
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fc6f 	bl	80091d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088fa:	2100      	movs	r1, #0
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fc6b 	bl	80091d8 <USBD_LL_StallEP>
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d036      	beq.n	800898e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008924:	6938      	ldr	r0, [r7, #16]
 8008926:	f000 f836 	bl	8008996 <USBD_GetLen>
 800892a:	4603      	mov	r3, r0
 800892c:	3301      	adds	r3, #1
 800892e:	b29b      	uxth	r3, r3
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	b29a      	uxth	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	4413      	add	r3, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	7812      	ldrb	r2, [r2, #0]
 8008942:	701a      	strb	r2, [r3, #0]
  idx++;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	3301      	adds	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	4413      	add	r3, r2
 8008950:	2203      	movs	r2, #3
 8008952:	701a      	strb	r2, [r3, #0]
  idx++;
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	3301      	adds	r3, #1
 8008958:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800895a:	e013      	b.n	8008984 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	3301      	adds	r3, #1
 800896c:	613b      	str	r3, [r7, #16]
    idx++;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	3301      	adds	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	4413      	add	r3, r2
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
    idx++;
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	3301      	adds	r3, #1
 8008982:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e7      	bne.n	800895c <USBD_GetString+0x52>
 800898c:	e000      	b.n	8008990 <USBD_GetString+0x86>
    return;
 800898e:	bf00      	nop
  }
}
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80089a6:	e005      	b.n	80089b4 <USBD_GetLen+0x1e>
  {
    len++;
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	3301      	adds	r3, #1
 80089ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	3301      	adds	r3, #1
 80089b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f5      	bne.n	80089a8 <USBD_GetLen+0x12>
  }

  return len;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2202      	movs	r2, #2
 80089da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fc7b 	bl	80092ec <USBD_LL_Transmit>

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fc6a 	bl	80092ec <USBD_LL_Transmit>

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2203      	movs	r2, #3
 8008a32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 fc6e 	bl	800932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 fc5d 	bl	800932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2200      	movs	r2, #0
 8008a92:	2100      	movs	r1, #0
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc29 	bl	80092ec <USBD_LL_Transmit>

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2205      	movs	r2, #5
 8008ab0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fc37 	bl	800932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4912      	ldr	r1, [pc, #72]	; (8008b1c <MX_USB_Device_Init+0x50>)
 8008ad4:	4812      	ldr	r0, [pc, #72]	; (8008b20 <MX_USB_Device_Init+0x54>)
 8008ad6:	f7fe fed9 	bl	800788c <USBD_Init>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008ae0:	f7f7 fd36 	bl	8000550 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008ae4:	490f      	ldr	r1, [pc, #60]	; (8008b24 <MX_USB_Device_Init+0x58>)
 8008ae6:	480e      	ldr	r0, [pc, #56]	; (8008b20 <MX_USB_Device_Init+0x54>)
 8008ae8:	f7fe ff00 	bl	80078ec <USBD_RegisterClass>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008af2:	f7f7 fd2d 	bl	8000550 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008af6:	490c      	ldr	r1, [pc, #48]	; (8008b28 <MX_USB_Device_Init+0x5c>)
 8008af8:	4809      	ldr	r0, [pc, #36]	; (8008b20 <MX_USB_Device_Init+0x54>)
 8008afa:	f7fe fe51 	bl	80077a0 <USBD_CDC_RegisterInterface>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008b04:	f7f7 fd24 	bl	8000550 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008b08:	4805      	ldr	r0, [pc, #20]	; (8008b20 <MX_USB_Device_Init+0x54>)
 8008b0a:	f7fe ff16 	bl	800793a <USBD_Start>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008b14:	f7f7 fd1c 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008b18:	bf00      	nop
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20000130 	.word	0x20000130
 8008b20:	20000274 	.word	0x20000274
 8008b24:	20000018 	.word	0x20000018
 8008b28:	2000011c 	.word	0x2000011c

08008b2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b30:	2200      	movs	r2, #0
 8008b32:	4905      	ldr	r1, [pc, #20]	; (8008b48 <CDC_Init_FS+0x1c>)
 8008b34:	4805      	ldr	r0, [pc, #20]	; (8008b4c <CDC_Init_FS+0x20>)
 8008b36:	f7fe fe48 	bl	80077ca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b3a:	4905      	ldr	r1, [pc, #20]	; (8008b50 <CDC_Init_FS+0x24>)
 8008b3c:	4803      	ldr	r0, [pc, #12]	; (8008b4c <CDC_Init_FS+0x20>)
 8008b3e:	f7fe fe62 	bl	8007806 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000944 	.word	0x20000944
 8008b4c:	20000274 	.word	0x20000274
 8008b50:	20000544 	.word	0x20000544

08008b54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
 8008b70:	4613      	mov	r3, r2
 8008b72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	2b23      	cmp	r3, #35	; 0x23
 8008b78:	d84a      	bhi.n	8008c10 <CDC_Control_FS+0xac>
 8008b7a:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <CDC_Control_FS+0x1c>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008c11 	.word	0x08008c11
 8008b84:	08008c11 	.word	0x08008c11
 8008b88:	08008c11 	.word	0x08008c11
 8008b8c:	08008c11 	.word	0x08008c11
 8008b90:	08008c11 	.word	0x08008c11
 8008b94:	08008c11 	.word	0x08008c11
 8008b98:	08008c11 	.word	0x08008c11
 8008b9c:	08008c11 	.word	0x08008c11
 8008ba0:	08008c11 	.word	0x08008c11
 8008ba4:	08008c11 	.word	0x08008c11
 8008ba8:	08008c11 	.word	0x08008c11
 8008bac:	08008c11 	.word	0x08008c11
 8008bb0:	08008c11 	.word	0x08008c11
 8008bb4:	08008c11 	.word	0x08008c11
 8008bb8:	08008c11 	.word	0x08008c11
 8008bbc:	08008c11 	.word	0x08008c11
 8008bc0:	08008c11 	.word	0x08008c11
 8008bc4:	08008c11 	.word	0x08008c11
 8008bc8:	08008c11 	.word	0x08008c11
 8008bcc:	08008c11 	.word	0x08008c11
 8008bd0:	08008c11 	.word	0x08008c11
 8008bd4:	08008c11 	.word	0x08008c11
 8008bd8:	08008c11 	.word	0x08008c11
 8008bdc:	08008c11 	.word	0x08008c11
 8008be0:	08008c11 	.word	0x08008c11
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	08008c11 	.word	0x08008c11
 8008bec:	08008c11 	.word	0x08008c11
 8008bf0:	08008c11 	.word	0x08008c11
 8008bf4:	08008c11 	.word	0x08008c11
 8008bf8:	08008c11 	.word	0x08008c11
 8008bfc:	08008c11 	.word	0x08008c11
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c11 	.word	0x08008c11
 8008c08:	08008c11 	.word	0x08008c11
 8008c0c:	08008c11 	.word	0x08008c11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c10:	bf00      	nop
  }

  return (USBD_OK);
 8008c12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	4805      	ldr	r0, [pc, #20]	; (8008c44 <CDC_Receive_FS+0x24>)
 8008c2e:	f7fe fdea 	bl	8007806 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c32:	4804      	ldr	r0, [pc, #16]	; (8008c44 <CDC_Receive_FS+0x24>)
 8008c34:	f7fe fe00 	bl	8007838 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008c38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000274 	.word	0x20000274

08008c48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2212      	movs	r2, #18
 8008c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	20000150 	.word	0x20000150

08008c90 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ca2:	4b03      	ldr	r3, [pc, #12]	; (8008cb0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	20000164 	.word	0x20000164

08008cb4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d105      	bne.n	8008cd2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4907      	ldr	r1, [pc, #28]	; (8008ce8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cca:	4808      	ldr	r0, [pc, #32]	; (8008cec <USBD_CDC_ProductStrDescriptor+0x38>)
 8008ccc:	f7ff fe1d 	bl	800890a <USBD_GetString>
 8008cd0:	e004      	b.n	8008cdc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008cd6:	4805      	ldr	r0, [pc, #20]	; (8008cec <USBD_CDC_ProductStrDescriptor+0x38>)
 8008cd8:	f7ff fe17 	bl	800890a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000d44 	.word	0x20000d44
 8008cec:	08009508 	.word	0x08009508

08008cf0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	6039      	str	r1, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	4904      	ldr	r1, [pc, #16]	; (8008d10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008d00:	4804      	ldr	r0, [pc, #16]	; (8008d14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008d02:	f7ff fe02 	bl	800890a <USBD_GetString>
  return USBD_StrDesc;
 8008d06:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000d44 	.word	0x20000d44
 8008d14:	08009520 	.word	0x08009520

08008d18 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	6039      	str	r1, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	221a      	movs	r2, #26
 8008d28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d2a:	f000 f843 	bl	8008db4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008d2e:	4b02      	ldr	r3, [pc, #8]	; (8008d38 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	20000168 	.word	0x20000168

08008d3c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d48:	79fb      	ldrb	r3, [r7, #7]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	4907      	ldr	r1, [pc, #28]	; (8008d70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d52:	4808      	ldr	r0, [pc, #32]	; (8008d74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d54:	f7ff fdd9 	bl	800890a <USBD_GetString>
 8008d58:	e004      	b.n	8008d64 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4904      	ldr	r1, [pc, #16]	; (8008d70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8008d5e:	4805      	ldr	r0, [pc, #20]	; (8008d74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008d60:	f7ff fdd3 	bl	800890a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d64:	4b02      	ldr	r3, [pc, #8]	; (8008d70 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000d44 	.word	0x20000d44
 8008d74:	08009534 	.word	0x08009534

08008d78 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	4907      	ldr	r1, [pc, #28]	; (8008dac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d8e:	4808      	ldr	r0, [pc, #32]	; (8008db0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d90:	f7ff fdbb 	bl	800890a <USBD_GetString>
 8008d94:	e004      	b.n	8008da0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4904      	ldr	r1, [pc, #16]	; (8008dac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8008d9a:	4805      	ldr	r0, [pc, #20]	; (8008db0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8008d9c:	f7ff fdb5 	bl	800890a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000d44 	.word	0x20000d44
 8008db0:	08009540 	.word	0x08009540

08008db4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <Get_SerialNum+0x44>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <Get_SerialNum+0x48>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dc6:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <Get_SerialNum+0x4c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dda:	2208      	movs	r2, #8
 8008ddc:	4909      	ldr	r1, [pc, #36]	; (8008e04 <Get_SerialNum+0x50>)
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f814 	bl	8008e0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008de4:	2204      	movs	r2, #4
 8008de6:	4908      	ldr	r1, [pc, #32]	; (8008e08 <Get_SerialNum+0x54>)
 8008de8:	68b8      	ldr	r0, [r7, #8]
 8008dea:	f000 f80f 	bl	8008e0c <IntToUnicode>
  }
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	1fff7590 	.word	0x1fff7590
 8008dfc:	1fff7594 	.word	0x1fff7594
 8008e00:	1fff7598 	.word	0x1fff7598
 8008e04:	2000016a 	.word	0x2000016a
 8008e08:	2000017a 	.word	0x2000017a

08008e0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]
 8008e22:	e027      	b.n	8008e74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	0f1b      	lsrs	r3, r3, #28
 8008e28:	2b09      	cmp	r3, #9
 8008e2a:	d80b      	bhi.n	8008e44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	0f1b      	lsrs	r3, r3, #28
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	4619      	mov	r1, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3230      	adds	r2, #48	; 0x30
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	e00a      	b.n	8008e5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	0f1b      	lsrs	r3, r3, #28
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	440b      	add	r3, r1
 8008e54:	3237      	adds	r2, #55	; 0x37
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	3301      	adds	r3, #1
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4413      	add	r3, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	3301      	adds	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
 8008e74:	7dfa      	ldrb	r2, [r7, #23]
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3d3      	bcc.n	8008e24 <IntToUnicode+0x18>
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b094      	sub	sp, #80	; 0x50
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	2244      	movs	r2, #68	; 0x44
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fafb 	bl	8009498 <memset>
  if(pcdHandle->Instance==USB)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a15      	ldr	r2, [pc, #84]	; (8008efc <HAL_PCD_MspInit+0x70>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d122      	bne.n	8008ef2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008eb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008eb6:	f107 030c 	add.w	r3, r7, #12
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fb fd2e 	bl	800491c <HAL_RCCEx_PeriphCLKConfig>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8008ec6:	f7f7 fb43 	bl	8000550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008eca:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <HAL_PCD_MspInit+0x74>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ece:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <HAL_PCD_MspInit+0x74>)
 8008ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <HAL_PCD_MspInit+0x74>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ede:	60bb      	str	r3, [r7, #8]
 8008ee0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	2014      	movs	r0, #20
 8008ee8:	f7f8 fd79 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8008eec:	2014      	movs	r0, #20
 8008eee:	f7f8 fd90 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008ef2:	bf00      	nop
 8008ef4:	3750      	adds	r7, #80	; 0x50
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	40005c00 	.word	0x40005c00
 8008f00:	40021000 	.word	0x40021000

08008f04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7fe fd58 	bl	80079d0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f3a:	78fa      	ldrb	r2, [r7, #3]
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	440b      	add	r3, r1
 8008f48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	78fb      	ldrb	r3, [r7, #3]
 8008f50:	4619      	mov	r1, r3
 8008f52:	f7fe fd92 	bl	8007a7a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	440b      	add	r3, r1
 8008f7e:	333c      	adds	r3, #60	; 0x3c
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	4619      	mov	r1, r3
 8008f86:	f7fe fddb 	bl	8007b40 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8008f8a:	bf00      	nop
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe feef 	bl	8007d84 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8008fa6:	bf00      	nop
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d001      	beq.n	8008fc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008fc2:	f7f7 fac5 	bl	8000550 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fcc:	7bfa      	ldrb	r2, [r7, #15]
 8008fce:	4611      	mov	r1, r2
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe fe99 	bl	8007d08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe fe45 	bl	8007c6c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fe94 	bl	8007d28 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009008:	4b04      	ldr	r3, [pc, #16]	; (800901c <HAL_PCD_SuspendCallback+0x30>)
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	4a03      	ldr	r2, [pc, #12]	; (800901c <HAL_PCD_SuspendCallback+0x30>)
 800900e:	f043 0306 	orr.w	r3, r3, #6
 8009012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	e000ed00 	.word	0xe000ed00

08009020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d007      	beq.n	8009040 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009030:	4b08      	ldr	r3, [pc, #32]	; (8009054 <HAL_PCD_ResumeCallback+0x34>)
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	4a07      	ldr	r2, [pc, #28]	; (8009054 <HAL_PCD_ResumeCallback+0x34>)
 8009036:	f023 0306 	bic.w	r3, r3, #6
 800903a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800903c:	f000 f9fa 	bl	8009434 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fe84 	bl	8007d54 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800904c:	bf00      	nop
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	e000ed00 	.word	0xe000ed00

08009058 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009060:	4a2b      	ldr	r2, [pc, #172]	; (8009110 <USBD_LL_Init+0xb8>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a29      	ldr	r2, [pc, #164]	; (8009110 <USBD_LL_Init+0xb8>)
 800906c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <USBD_LL_Init+0xb8>)
 8009072:	4a28      	ldr	r2, [pc, #160]	; (8009114 <USBD_LL_Init+0xbc>)
 8009074:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009076:	4b26      	ldr	r3, [pc, #152]	; (8009110 <USBD_LL_Init+0xb8>)
 8009078:	2208      	movs	r2, #8
 800907a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800907c:	4b24      	ldr	r3, [pc, #144]	; (8009110 <USBD_LL_Init+0xb8>)
 800907e:	2202      	movs	r2, #2
 8009080:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009082:	4b23      	ldr	r3, [pc, #140]	; (8009110 <USBD_LL_Init+0xb8>)
 8009084:	2202      	movs	r2, #2
 8009086:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009088:	4b21      	ldr	r3, [pc, #132]	; (8009110 <USBD_LL_Init+0xb8>)
 800908a:	2200      	movs	r2, #0
 800908c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800908e:	4b20      	ldr	r3, [pc, #128]	; (8009110 <USBD_LL_Init+0xb8>)
 8009090:	2200      	movs	r2, #0
 8009092:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009094:	4b1e      	ldr	r3, [pc, #120]	; (8009110 <USBD_LL_Init+0xb8>)
 8009096:	2200      	movs	r2, #0
 8009098:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800909a:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <USBD_LL_Init+0xb8>)
 800909c:	2200      	movs	r2, #0
 800909e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80090a0:	481b      	ldr	r0, [pc, #108]	; (8009110 <USBD_LL_Init+0xb8>)
 80090a2:	f7f9 f95b 	bl	800235c <HAL_PCD_Init>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80090ac:	f7f7 fa50 	bl	8000550 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090b6:	2318      	movs	r3, #24
 80090b8:	2200      	movs	r2, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	f7fa fe14 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090c6:	2358      	movs	r3, #88	; 0x58
 80090c8:	2200      	movs	r2, #0
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	f7fa fe0c 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090d6:	23c0      	movs	r3, #192	; 0xc0
 80090d8:	2200      	movs	r2, #0
 80090da:	2181      	movs	r1, #129	; 0x81
 80090dc:	f7fa fe04 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80090ea:	2200      	movs	r2, #0
 80090ec:	2101      	movs	r1, #1
 80090ee:	f7fa fdfb 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090fc:	2200      	movs	r2, #0
 80090fe:	2182      	movs	r1, #130	; 0x82
 8009100:	f7fa fdf2 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000f44 	.word	0x20000f44
 8009114:	40005c00 	.word	0x40005c00

08009118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800912e:	4618      	mov	r0, r3
 8009130:	f7f9 f9f9 	bl	8002526 <HAL_PCD_Start>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f980 	bl	8009440 <USBD_Get_USB_Status>
 8009140:	4603      	mov	r3, r0
 8009142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009144:	7bbb      	ldrb	r3, [r7, #14]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	461a      	mov	r2, r3
 800915c:	4603      	mov	r3, r0
 800915e:	70fb      	strb	r3, [r7, #3]
 8009160:	460b      	mov	r3, r1
 8009162:	70bb      	strb	r3, [r7, #2]
 8009164:	4613      	mov	r3, r2
 8009166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009176:	78bb      	ldrb	r3, [r7, #2]
 8009178:	883a      	ldrh	r2, [r7, #0]
 800917a:	78f9      	ldrb	r1, [r7, #3]
 800917c:	f7f9 fb41 	bl	8002802 <HAL_PCD_EP_Open>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f95a 	bl	8009440 <USBD_Get_USB_Status>
 800918c:	4603      	mov	r3, r0
 800918e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009190:	7bbb      	ldrb	r3, [r7, #14]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091b4:	78fa      	ldrb	r2, [r7, #3]
 80091b6:	4611      	mov	r1, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7f9 fb88 	bl	80028ce <HAL_PCD_EP_Close>
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f93b 	bl	8009440 <USBD_Get_USB_Status>
 80091ca:	4603      	mov	r3, r0
 80091cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091f2:	78fa      	ldrb	r2, [r7, #3]
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f9 fc49 	bl	8002a8e <HAL_PCD_EP_SetStall>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f91c 	bl	8009440 <USBD_Get_USB_Status>
 8009208:	4603      	mov	r3, r0
 800920a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920c:	7bbb      	ldrb	r3, [r7, #14]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7f9 fc7c 	bl	8002b32 <HAL_PCD_EP_ClrStall>
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 f8fd 	bl	8009440 <USBD_Get_USB_Status>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924a:	7bbb      	ldrb	r3, [r7, #14]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800926c:	2b00      	cmp	r3, #0
 800926e:	da0c      	bge.n	800928a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	00db      	lsls	r3, r3, #3
 8009282:	440b      	add	r3, r1
 8009284:	3302      	adds	r3, #2
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	e00b      	b.n	80092a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009290:	68f9      	ldr	r1, [r7, #12]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	440b      	add	r3, r1
 800929c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f9 fa73 	bl	80027b8 <HAL_PCD_SetAddress>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f8b1 	bl	8009440 <USBD_Get_USB_Status>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	460b      	mov	r3, r1
 80092fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800930a:	7af9      	ldrb	r1, [r7, #11]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	f7f9 fb7a 	bl	8002a08 <HAL_PCD_EP_Transmit>
 8009314:	4603      	mov	r3, r0
 8009316:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f890 	bl	8009440 <USBD_Get_USB_Status>
 8009320:	4603      	mov	r3, r0
 8009322:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009324:	7dbb      	ldrb	r3, [r7, #22]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b086      	sub	sp, #24
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	460b      	mov	r3, r1
 800933c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800934c:	7af9      	ldrb	r1, [r7, #11]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	f7f9 fb04 	bl	800295e <HAL_PCD_EP_Receive>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	4618      	mov	r0, r3
 800935e:	f000 f86f 	bl	8009440 <USBD_Get_USB_Status>
 8009362:	4603      	mov	r3, r0
 8009364:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009366:	7dbb      	ldrb	r3, [r7, #22]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7f9 fb26 	bl	80029d8 <HAL_PCD_EP_GetRxCount>
 800938c:	4603      	mov	r3, r0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80093a4:	78fb      	ldrb	r3, [r7, #3]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <HAL_PCDEx_LPM_Callback+0x18>
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d013      	beq.n	80093d6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80093ae:	e023      	b.n	80093f8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80093b8:	f000 f83c 	bl	8009434 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <HAL_PCDEx_LPM_Callback+0x68>)
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	4a0f      	ldr	r2, [pc, #60]	; (8009400 <HAL_PCDEx_LPM_Callback+0x68>)
 80093c2:	f023 0306 	bic.w	r3, r3, #6
 80093c6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fcc0 	bl	8007d54 <USBD_LL_Resume>
    break;
 80093d4:	e010      	b.n	80093f8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fca3 	bl	8007d28 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093ea:	4b05      	ldr	r3, [pc, #20]	; (8009400 <HAL_PCDEx_LPM_Callback+0x68>)
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	4a04      	ldr	r2, [pc, #16]	; (8009400 <HAL_PCDEx_LPM_Callback+0x68>)
 80093f0:	f043 0306 	orr.w	r3, r3, #6
 80093f4:	6113      	str	r3, [r2, #16]
    break;
 80093f6:	bf00      	nop
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	e000ed00 	.word	0xe000ed00

08009404 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800940c:	4b03      	ldr	r3, [pc, #12]	; (800941c <USBD_static_malloc+0x18>)
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	20001238 	.word	0x20001238

08009420 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009438:	f7f6 feff 	bl	800023a <SystemClock_Config>
}
 800943c:	bf00      	nop
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d817      	bhi.n	8009484 <USBD_Get_USB_Status+0x44>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <USBD_Get_USB_Status+0x1c>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	0800946d 	.word	0x0800946d
 8009460:	08009473 	.word	0x08009473
 8009464:	08009479 	.word	0x08009479
 8009468:	0800947f 	.word	0x0800947f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
    break;
 8009470:	e00b      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009472:	2303      	movs	r3, #3
 8009474:	73fb      	strb	r3, [r7, #15]
    break;
 8009476:	e008      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
    break;
 800947c:	e005      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800947e:	2303      	movs	r3, #3
 8009480:	73fb      	strb	r3, [r7, #15]
    break;
 8009482:	e002      	b.n	800948a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	73fb      	strb	r3, [r7, #15]
    break;
 8009488:	bf00      	nop
  }
  return usb_status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <memset>:
 8009498:	4402      	add	r2, r0
 800949a:	4603      	mov	r3, r0
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <memset+0xa>
 80094a0:	4770      	bx	lr
 80094a2:	f803 1b01 	strb.w	r1, [r3], #1
 80094a6:	e7f9      	b.n	800949c <memset+0x4>

080094a8 <__libc_init_array>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	4d0d      	ldr	r5, [pc, #52]	; (80094e0 <__libc_init_array+0x38>)
 80094ac:	4c0d      	ldr	r4, [pc, #52]	; (80094e4 <__libc_init_array+0x3c>)
 80094ae:	1b64      	subs	r4, r4, r5
 80094b0:	10a4      	asrs	r4, r4, #2
 80094b2:	2600      	movs	r6, #0
 80094b4:	42a6      	cmp	r6, r4
 80094b6:	d109      	bne.n	80094cc <__libc_init_array+0x24>
 80094b8:	4d0b      	ldr	r5, [pc, #44]	; (80094e8 <__libc_init_array+0x40>)
 80094ba:	4c0c      	ldr	r4, [pc, #48]	; (80094ec <__libc_init_array+0x44>)
 80094bc:	f000 f818 	bl	80094f0 <_init>
 80094c0:	1b64      	subs	r4, r4, r5
 80094c2:	10a4      	asrs	r4, r4, #2
 80094c4:	2600      	movs	r6, #0
 80094c6:	42a6      	cmp	r6, r4
 80094c8:	d105      	bne.n	80094d6 <__libc_init_array+0x2e>
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d0:	4798      	blx	r3
 80094d2:	3601      	adds	r6, #1
 80094d4:	e7ee      	b.n	80094b4 <__libc_init_array+0xc>
 80094d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094da:	4798      	blx	r3
 80094dc:	3601      	adds	r6, #1
 80094de:	e7f2      	b.n	80094c6 <__libc_init_array+0x1e>
 80094e0:	08009560 	.word	0x08009560
 80094e4:	08009560 	.word	0x08009560
 80094e8:	08009560 	.word	0x08009560
 80094ec:	08009564 	.word	0x08009564

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
